// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#include "messages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_messages_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_messages_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_EccSignOptions;
}  // namespace protobuf_messages_2eproto
class RequestRejectedDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<RequestRejected>
      _instance;
} _RequestRejected_default_instance_;
class GenericConfirmReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GenericConfirmReply>
      _instance;
} _GenericConfirmReply_default_instance_;
class GetModeAndVersionRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetModeAndVersionRequest>
      _instance;
} _GetModeAndVersionRequest_default_instance_;
class GetModeAndVersionReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<GetModeAndVersionReply>
      _instance;
} _GetModeAndVersionReply_default_instance_;
class UpgradeStartRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<UpgradeStartRequest>
      _instance;
} _UpgradeStartRequest_default_instance_;
class SendUpgradeFirmwareDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<SendUpgradeFirmware>
      _instance;
} _SendUpgradeFirmware_default_instance_;
class WriteSerialNoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WriteSerialNo>
      _instance;
} _WriteSerialNo_default_instance_;
class WriteSerialNoReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<WriteSerialNoReply>
      _instance;
} _WriteSerialNoReply_default_instance_;
class LockSerialNoDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<LockSerialNo>
      _instance;
} _LockSerialNo_default_instance_;
class lockSerialNoReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<lockSerialNoReply>
      _instance;
} _lockSerialNoReply_default_instance_;
class EccSignOptionsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EccSignOptions>
      _instance;
} _EccSignOptions_default_instance_;
class EccSignRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EccSignRequest>
      _instance;
} _EccSignRequest_default_instance_;
class EccSignResultDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EccSignResult>
      _instance;
} _EccSignResult_default_instance_;
class EccGetPublicKeyRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EccGetPublicKeyRequest>
      _instance;
} _EccGetPublicKeyRequest_default_instance_;
class EccGetPublicKeyReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EccGetPublicKeyReply>
      _instance;
} _EccGetPublicKeyReply_default_instance_;
class EccMultiplyRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EccMultiplyRequest>
      _instance;
} _EccMultiplyRequest_default_instance_;
class EccMultiplyReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EccMultiplyReply>
      _instance;
} _EccMultiplyReply_default_instance_;
class EraseDataRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<EraseDataRequest>
      _instance;
} _EraseDataRequest_default_instance_;
namespace protobuf_messages_2eproto {
static void InitDefaultsRequestRejected() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RequestRejected_default_instance_;
    new (ptr) ::RequestRejected();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RequestRejected::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_RequestRejected =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsRequestRejected}, {}};

static void InitDefaultsGenericConfirmReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GenericConfirmReply_default_instance_;
    new (ptr) ::GenericConfirmReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GenericConfirmReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GenericConfirmReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGenericConfirmReply}, {}};

static void InitDefaultsGetModeAndVersionRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GetModeAndVersionRequest_default_instance_;
    new (ptr) ::GetModeAndVersionRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GetModeAndVersionRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetModeAndVersionRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetModeAndVersionRequest}, {}};

static void InitDefaultsGetModeAndVersionReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GetModeAndVersionReply_default_instance_;
    new (ptr) ::GetModeAndVersionReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GetModeAndVersionReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_GetModeAndVersionReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsGetModeAndVersionReply}, {}};

static void InitDefaultsUpgradeStartRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UpgradeStartRequest_default_instance_;
    new (ptr) ::UpgradeStartRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UpgradeStartRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_UpgradeStartRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsUpgradeStartRequest}, {}};

static void InitDefaultsSendUpgradeFirmware() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SendUpgradeFirmware_default_instance_;
    new (ptr) ::SendUpgradeFirmware();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SendUpgradeFirmware::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_SendUpgradeFirmware =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsSendUpgradeFirmware}, {}};

static void InitDefaultsWriteSerialNo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_WriteSerialNo_default_instance_;
    new (ptr) ::WriteSerialNo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::WriteSerialNo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_WriteSerialNo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWriteSerialNo}, {}};

static void InitDefaultsWriteSerialNoReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_WriteSerialNoReply_default_instance_;
    new (ptr) ::WriteSerialNoReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::WriteSerialNoReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_WriteSerialNoReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsWriteSerialNoReply}, {}};

static void InitDefaultsLockSerialNo() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LockSerialNo_default_instance_;
    new (ptr) ::LockSerialNo();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LockSerialNo::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_LockSerialNo =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsLockSerialNo}, {}};

static void InitDefaultslockSerialNoReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_lockSerialNoReply_default_instance_;
    new (ptr) ::lockSerialNoReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lockSerialNoReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_lockSerialNoReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultslockSerialNoReply}, {}};

static void InitDefaultsEccSignOptions() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EccSignOptions_default_instance_;
    new (ptr) ::EccSignOptions();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EccSignOptions::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EccSignOptions =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEccSignOptions}, {}};

static void InitDefaultsEccSignRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EccSignRequest_default_instance_;
    new (ptr) ::EccSignRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EccSignRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<1> scc_info_EccSignRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 1, InitDefaultsEccSignRequest}, {
      &protobuf_messages_2eproto::scc_info_EccSignOptions.base,}};

static void InitDefaultsEccSignResult() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EccSignResult_default_instance_;
    new (ptr) ::EccSignResult();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EccSignResult::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EccSignResult =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEccSignResult}, {}};

static void InitDefaultsEccGetPublicKeyRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EccGetPublicKeyRequest_default_instance_;
    new (ptr) ::EccGetPublicKeyRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EccGetPublicKeyRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EccGetPublicKeyRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEccGetPublicKeyRequest}, {}};

static void InitDefaultsEccGetPublicKeyReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EccGetPublicKeyReply_default_instance_;
    new (ptr) ::EccGetPublicKeyReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EccGetPublicKeyReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EccGetPublicKeyReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEccGetPublicKeyReply}, {}};

static void InitDefaultsEccMultiplyRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EccMultiplyRequest_default_instance_;
    new (ptr) ::EccMultiplyRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EccMultiplyRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EccMultiplyRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEccMultiplyRequest}, {}};

static void InitDefaultsEccMultiplyReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EccMultiplyReply_default_instance_;
    new (ptr) ::EccMultiplyReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EccMultiplyReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EccMultiplyReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEccMultiplyReply}, {}};

static void InitDefaultsEraseDataRequest() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EraseDataRequest_default_instance_;
    new (ptr) ::EraseDataRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EraseDataRequest::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_EraseDataRequest =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsEraseDataRequest}, {}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_RequestRejected.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GenericConfirmReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetModeAndVersionRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_GetModeAndVersionReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_UpgradeStartRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_SendUpgradeFirmware.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WriteSerialNo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_WriteSerialNoReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_LockSerialNo.base);
  ::google::protobuf::internal::InitSCC(&scc_info_lockSerialNoReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EccSignOptions.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EccSignRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EccSignResult.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EccGetPublicKeyRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EccGetPublicKeyReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EccMultiplyRequest.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EccMultiplyReply.base);
  ::google::protobuf::internal::InitSCC(&scc_info_EraseDataRequest.base);
}

::google::protobuf::Metadata file_level_metadata[18];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[2];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RequestRejected, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RequestRejected, requestid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RequestRejected, errcode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::RequestRejected, errmessage_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GenericConfirmReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GetModeAndVersionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GetModeAndVersionReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GetModeAndVersionReply, mode_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GetModeAndVersionReply, firmwareversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::GetModeAndVersionReply, deviceserialno_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UpgradeStartRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UpgradeStartRequest, firmwareversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::UpgradeStartRequest, sha256hash_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SendUpgradeFirmware, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SendUpgradeFirmware, firmwareversion_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SendUpgradeFirmware, sha256hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SendUpgradeFirmware, signature_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::SendUpgradeFirmware, firmware_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WriteSerialNo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WriteSerialNo, deviceserialno_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WriteSerialNoReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WriteSerialNoReply, writesuccess_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::WriteSerialNoReply, deviceserialno_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::LockSerialNo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lockSerialNoReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lockSerialNoReply, locksuccess_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::lockSerialNoReply, deviceserialno_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EccSignOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EccSignOptions, rfc6979_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EccSignOptions, graphene_canonize_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EccSignRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EccSignRequest, hdpath_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EccSignRequest, hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EccSignRequest, algorithm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EccSignRequest, options_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EccSignResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EccSignResult, hdpath_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EccSignResult, pubkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EccSignResult, hash_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EccSignResult, r_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EccSignResult, s_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EccSignResult, recover_param_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EccGetPublicKeyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EccGetPublicKeyRequest, hdpath_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EccGetPublicKeyRequest, algorithm_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EccGetPublicKeyReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EccGetPublicKeyReply, hdpath_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EccGetPublicKeyReply, algorithm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EccGetPublicKeyReply, pubkey_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EccMultiplyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EccMultiplyRequest, hdpath_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EccMultiplyRequest, algorithm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EccMultiplyRequest, input_pubkey_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EccMultiplyReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EccMultiplyReply, hdpath_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EccMultiplyReply, algorithm_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EccMultiplyReply, input_pubkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EccMultiplyReply, dev_pubkey_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EccMultiplyReply, result_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::EraseDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::RequestRejected)},
  { 8, -1, sizeof(::GenericConfirmReply)},
  { 13, -1, sizeof(::GetModeAndVersionRequest)},
  { 18, -1, sizeof(::GetModeAndVersionReply)},
  { 26, -1, sizeof(::UpgradeStartRequest)},
  { 33, -1, sizeof(::SendUpgradeFirmware)},
  { 42, -1, sizeof(::WriteSerialNo)},
  { 48, -1, sizeof(::WriteSerialNoReply)},
  { 55, -1, sizeof(::LockSerialNo)},
  { 60, -1, sizeof(::lockSerialNoReply)},
  { 67, -1, sizeof(::EccSignOptions)},
  { 74, -1, sizeof(::EccSignRequest)},
  { 83, -1, sizeof(::EccSignResult)},
  { 94, -1, sizeof(::EccGetPublicKeyRequest)},
  { 101, -1, sizeof(::EccGetPublicKeyReply)},
  { 109, -1, sizeof(::EccMultiplyRequest)},
  { 117, -1, sizeof(::EccMultiplyReply)},
  { 127, -1, sizeof(::EraseDataRequest)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::_RequestRejected_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GenericConfirmReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GetModeAndVersionRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_GetModeAndVersionReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_UpgradeStartRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_SendUpgradeFirmware_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_WriteSerialNo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_WriteSerialNoReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_LockSerialNo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_lockSerialNoReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_EccSignOptions_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_EccSignRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_EccSignResult_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_EccGetPublicKeyRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_EccGetPublicKeyReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_EccMultiplyRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_EccMultiplyReply_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::_EraseDataRequest_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "messages.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 18);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016messages.proto\"I\n\017RequestRejected\022\021\n\tr"
      "equestId\030\001 \001(\r\022\017\n\007errCode\030\002 \001(\005\022\022\n\nerrMe"
      "ssage\030\003 \001(\t\"\025\n\023GenericConfirmReply\"\032\n\030Ge"
      "tModeAndVersionRequest\"d\n\026GetModeAndVers"
      "ionReply\022\031\n\004mode\030\001 \001(\0162\013.DeviceMode\022\027\n\017f"
      "irmwareVersion\030\002 \001(\t\022\026\n\016deviceSerialNo\030\003"
      " \001(\t\"B\n\023UpgradeStartRequest\022\027\n\017firmwareV"
      "ersion\030\001 \001(\t\022\022\n\nsha256hash\030\002 \001(\014\"g\n\023Send"
      "UpgradeFirmware\022\027\n\017firmwareVersion\030\001 \001(\t"
      "\022\022\n\nsha256hash\030\002 \001(\014\022\021\n\tsignature\030\003 \001(\014\022"
      "\020\n\010firmware\030\004 \001(\014\"\'\n\rWriteSerialNo\022\026\n\016de"
      "viceSerialNo\030\001 \001(\t\"B\n\022WriteSerialNoReply"
      "\022\024\n\014writeSuccess\030\001 \001(\010\022\026\n\016deviceSerialNo"
      "\030\002 \001(\t\"\016\n\014LockSerialNo\"@\n\021lockSerialNoRe"
      "ply\022\023\n\013lockSuccess\030\001 \001(\010\022\026\n\016deviceSerial"
      "No\030\002 \001(\t\"<\n\016EccSignOptions\022\017\n\007rfc6979\030\001 "
      "\001(\010\022\031\n\021graphene_canonize\030\002 \001(\010\"r\n\016EccSig"
      "nRequest\022\016\n\006hdPath\030\001 \001(\t\022\014\n\004hash\030\002 \001(\014\022 "
      "\n\talgorithm\030\003 \001(\0162\r.EccAlgorithm\022 \n\007opti"
      "ons\030\004 \001(\0132\017.EccSignOptions\"j\n\rEccSignRes"
      "ult\022\016\n\006hdPath\030\001 \001(\t\022\016\n\006pubkey\030\002 \001(\014\022\014\n\004h"
      "ash\030\003 \001(\014\022\t\n\001R\030\004 \001(\014\022\t\n\001S\030\005 \001(\014\022\025\n\rrecov"
      "er_param\030\006 \001(\r\"J\n\026EccGetPublicKeyRequest"
      "\022\016\n\006hdPath\030\001 \001(\t\022 \n\talgorithm\030\002 \001(\0162\r.Ec"
      "cAlgorithm\"X\n\024EccGetPublicKeyReply\022\016\n\006hd"
      "Path\030\001 \001(\t\022 \n\talgorithm\030\002 \001(\0162\r.EccAlgor"
      "ithm\022\016\n\006pubkey\030\003 \001(\014\"\\\n\022EccMultiplyReque"
      "st\022\016\n\006hdPath\030\001 \001(\t\022 \n\talgorithm\030\002 \001(\0162\r."
      "EccAlgorithm\022\024\n\014input_pubkey\030\003 \001(\014\"~\n\020Ec"
      "cMultiplyReply\022\016\n\006hdPath\030\001 \001(\t\022 \n\talgori"
      "thm\030\002 \001(\0162\r.EccAlgorithm\022\024\n\014input_pubkey"
      "\030\003 \001(\014\022\022\n\ndev_pubkey\030\004 \001(\014\022\016\n\006result\030\005 \001"
      "(\014\"\022\n\020EraseDataRequest*/\n\nDeviceMode\022\023\n\017"
      "MODE_BOOTLOADER\020\000\022\014\n\010MODE_APP\020\001*\035\n\014EccAl"
      "gorithm\022\r\n\tSECP256K1\020\000b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1390);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "messages.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_messages_2eproto
const ::google::protobuf::EnumDescriptor* DeviceMode_descriptor() {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messages_2eproto::file_level_enum_descriptors[0];
}
bool DeviceMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* EccAlgorithm_descriptor() {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_messages_2eproto::file_level_enum_descriptors[1];
}
bool EccAlgorithm_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void RequestRejected::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestRejected::kRequestIdFieldNumber;
const int RequestRejected::kErrCodeFieldNumber;
const int RequestRejected::kErrMessageFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestRejected::RequestRejected()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_RequestRejected.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:RequestRejected)
}
RequestRejected::RequestRejected(const RequestRejected& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errmessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.errmessage().size() > 0) {
    errmessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmessage_);
  }
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&errcode_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(errcode_));
  // @@protoc_insertion_point(copy_constructor:RequestRejected)
}

void RequestRejected::SharedCtor() {
  errmessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errcode_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(errcode_));
}

RequestRejected::~RequestRejected() {
  // @@protoc_insertion_point(destructor:RequestRejected)
  SharedDtor();
}

void RequestRejected::SharedDtor() {
  errmessage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RequestRejected::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* RequestRejected::descriptor() {
  ::protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestRejected& RequestRejected::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_RequestRejected.base);
  return *internal_default_instance();
}


void RequestRejected::Clear() {
// @@protoc_insertion_point(message_clear_start:RequestRejected)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errmessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errcode_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(errcode_));
  _internal_metadata_.Clear();
}

bool RequestRejected::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:RequestRejected)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 requestId = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &requestid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 errCode = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &errcode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string errMessage = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_errmessage()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->errmessage().data(), static_cast<int>(this->errmessage().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "RequestRejected.errMessage"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:RequestRejected)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:RequestRejected)
  return false;
#undef DO_
}

void RequestRejected::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:RequestRejected)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 requestId = 1;
  if (this->requestid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->requestid(), output);
  }

  // int32 errCode = 2;
  if (this->errcode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->errcode(), output);
  }

  // string errMessage = 3;
  if (this->errmessage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errmessage().data(), static_cast<int>(this->errmessage().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RequestRejected.errMessage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->errmessage(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:RequestRejected)
}

::google::protobuf::uint8* RequestRejected::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:RequestRejected)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 requestId = 1;
  if (this->requestid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->requestid(), target);
  }

  // int32 errCode = 2;
  if (this->errcode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->errcode(), target);
  }

  // string errMessage = 3;
  if (this->errmessage().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->errmessage().data(), static_cast<int>(this->errmessage().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "RequestRejected.errMessage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->errmessage(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RequestRejected)
  return target;
}

size_t RequestRejected::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RequestRejected)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string errMessage = 3;
  if (this->errmessage().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->errmessage());
  }

  // uint32 requestId = 1;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->requestid());
  }

  // int32 errCode = 2;
  if (this->errcode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->errcode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestRejected::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RequestRejected)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestRejected* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestRejected>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RequestRejected)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RequestRejected)
    MergeFrom(*source);
  }
}

void RequestRejected::MergeFrom(const RequestRejected& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RequestRejected)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.errmessage().size() > 0) {

    errmessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.errmessage_);
  }
  if (from.requestid() != 0) {
    set_requestid(from.requestid());
  }
  if (from.errcode() != 0) {
    set_errcode(from.errcode());
  }
}

void RequestRejected::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RequestRejected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestRejected::CopyFrom(const RequestRejected& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RequestRejected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRejected::IsInitialized() const {
  return true;
}

void RequestRejected::Swap(RequestRejected* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestRejected::InternalSwap(RequestRejected* other) {
  using std::swap;
  errmessage_.Swap(&other->errmessage_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requestid_, other->requestid_);
  swap(errcode_, other->errcode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata RequestRejected::GetMetadata() const {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GenericConfirmReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GenericConfirmReply::GenericConfirmReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_GenericConfirmReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GenericConfirmReply)
}
GenericConfirmReply::GenericConfirmReply(const GenericConfirmReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GenericConfirmReply)
}

void GenericConfirmReply::SharedCtor() {
}

GenericConfirmReply::~GenericConfirmReply() {
  // @@protoc_insertion_point(destructor:GenericConfirmReply)
  SharedDtor();
}

void GenericConfirmReply::SharedDtor() {
}

void GenericConfirmReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GenericConfirmReply::descriptor() {
  ::protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GenericConfirmReply& GenericConfirmReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_GenericConfirmReply.base);
  return *internal_default_instance();
}


void GenericConfirmReply::Clear() {
// @@protoc_insertion_point(message_clear_start:GenericConfirmReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool GenericConfirmReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GenericConfirmReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GenericConfirmReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GenericConfirmReply)
  return false;
#undef DO_
}

void GenericConfirmReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GenericConfirmReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GenericConfirmReply)
}

::google::protobuf::uint8* GenericConfirmReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GenericConfirmReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GenericConfirmReply)
  return target;
}

size_t GenericConfirmReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GenericConfirmReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenericConfirmReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GenericConfirmReply)
  GOOGLE_DCHECK_NE(&from, this);
  const GenericConfirmReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GenericConfirmReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GenericConfirmReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GenericConfirmReply)
    MergeFrom(*source);
  }
}

void GenericConfirmReply::MergeFrom(const GenericConfirmReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GenericConfirmReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GenericConfirmReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GenericConfirmReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenericConfirmReply::CopyFrom(const GenericConfirmReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GenericConfirmReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericConfirmReply::IsInitialized() const {
  return true;
}

void GenericConfirmReply::Swap(GenericConfirmReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GenericConfirmReply::InternalSwap(GenericConfirmReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GenericConfirmReply::GetMetadata() const {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetModeAndVersionRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetModeAndVersionRequest::GetModeAndVersionRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_GetModeAndVersionRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetModeAndVersionRequest)
}
GetModeAndVersionRequest::GetModeAndVersionRequest(const GetModeAndVersionRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GetModeAndVersionRequest)
}

void GetModeAndVersionRequest::SharedCtor() {
}

GetModeAndVersionRequest::~GetModeAndVersionRequest() {
  // @@protoc_insertion_point(destructor:GetModeAndVersionRequest)
  SharedDtor();
}

void GetModeAndVersionRequest::SharedDtor() {
}

void GetModeAndVersionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetModeAndVersionRequest::descriptor() {
  ::protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetModeAndVersionRequest& GetModeAndVersionRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_GetModeAndVersionRequest.base);
  return *internal_default_instance();
}


void GetModeAndVersionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GetModeAndVersionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool GetModeAndVersionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GetModeAndVersionRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:GetModeAndVersionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GetModeAndVersionRequest)
  return false;
#undef DO_
}

void GetModeAndVersionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GetModeAndVersionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GetModeAndVersionRequest)
}

::google::protobuf::uint8* GetModeAndVersionRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GetModeAndVersionRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetModeAndVersionRequest)
  return target;
}

size_t GetModeAndVersionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetModeAndVersionRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetModeAndVersionRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GetModeAndVersionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetModeAndVersionRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetModeAndVersionRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GetModeAndVersionRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GetModeAndVersionRequest)
    MergeFrom(*source);
  }
}

void GetModeAndVersionRequest::MergeFrom(const GetModeAndVersionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GetModeAndVersionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetModeAndVersionRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GetModeAndVersionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetModeAndVersionRequest::CopyFrom(const GetModeAndVersionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetModeAndVersionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetModeAndVersionRequest::IsInitialized() const {
  return true;
}

void GetModeAndVersionRequest::Swap(GetModeAndVersionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetModeAndVersionRequest::InternalSwap(GetModeAndVersionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetModeAndVersionRequest::GetMetadata() const {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void GetModeAndVersionReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int GetModeAndVersionReply::kModeFieldNumber;
const int GetModeAndVersionReply::kFirmwareVersionFieldNumber;
const int GetModeAndVersionReply::kDeviceSerialNoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

GetModeAndVersionReply::GetModeAndVersionReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_GetModeAndVersionReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetModeAndVersionReply)
}
GetModeAndVersionReply::GetModeAndVersionReply(const GetModeAndVersionReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  firmwareversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.firmwareversion().size() > 0) {
    firmwareversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.firmwareversion_);
  }
  deviceserialno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.deviceserialno().size() > 0) {
    deviceserialno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deviceserialno_);
  }
  mode_ = from.mode_;
  // @@protoc_insertion_point(copy_constructor:GetModeAndVersionReply)
}

void GetModeAndVersionReply::SharedCtor() {
  firmwareversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deviceserialno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mode_ = 0;
}

GetModeAndVersionReply::~GetModeAndVersionReply() {
  // @@protoc_insertion_point(destructor:GetModeAndVersionReply)
  SharedDtor();
}

void GetModeAndVersionReply::SharedDtor() {
  firmwareversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deviceserialno_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void GetModeAndVersionReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* GetModeAndVersionReply::descriptor() {
  ::protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const GetModeAndVersionReply& GetModeAndVersionReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_GetModeAndVersionReply.base);
  return *internal_default_instance();
}


void GetModeAndVersionReply::Clear() {
// @@protoc_insertion_point(message_clear_start:GetModeAndVersionReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  firmwareversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  deviceserialno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mode_ = 0;
  _internal_metadata_.Clear();
}

bool GetModeAndVersionReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:GetModeAndVersionReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .DeviceMode mode = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_mode(static_cast< ::DeviceMode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string firmwareVersion = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_firmwareversion()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->firmwareversion().data(), static_cast<int>(this->firmwareversion().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GetModeAndVersionReply.firmwareVersion"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string deviceSerialNo = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceserialno()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->deviceserialno().data(), static_cast<int>(this->deviceserialno().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "GetModeAndVersionReply.deviceSerialNo"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:GetModeAndVersionReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:GetModeAndVersionReply)
  return false;
#undef DO_
}

void GetModeAndVersionReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:GetModeAndVersionReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DeviceMode mode = 1;
  if (this->mode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->mode(), output);
  }

  // string firmwareVersion = 2;
  if (this->firmwareversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->firmwareversion().data(), static_cast<int>(this->firmwareversion().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GetModeAndVersionReply.firmwareVersion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->firmwareversion(), output);
  }

  // string deviceSerialNo = 3;
  if (this->deviceserialno().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->deviceserialno().data(), static_cast<int>(this->deviceserialno().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GetModeAndVersionReply.deviceSerialNo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->deviceserialno(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:GetModeAndVersionReply)
}

::google::protobuf::uint8* GetModeAndVersionReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:GetModeAndVersionReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DeviceMode mode = 1;
  if (this->mode() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->mode(), target);
  }

  // string firmwareVersion = 2;
  if (this->firmwareversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->firmwareversion().data(), static_cast<int>(this->firmwareversion().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GetModeAndVersionReply.firmwareVersion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->firmwareversion(), target);
  }

  // string deviceSerialNo = 3;
  if (this->deviceserialno().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->deviceserialno().data(), static_cast<int>(this->deviceserialno().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "GetModeAndVersionReply.deviceSerialNo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->deviceserialno(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetModeAndVersionReply)
  return target;
}

size_t GetModeAndVersionReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetModeAndVersionReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string firmwareVersion = 2;
  if (this->firmwareversion().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->firmwareversion());
  }

  // string deviceSerialNo = 3;
  if (this->deviceserialno().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->deviceserialno());
  }

  // .DeviceMode mode = 1;
  if (this->mode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->mode());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetModeAndVersionReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GetModeAndVersionReply)
  GOOGLE_DCHECK_NE(&from, this);
  const GetModeAndVersionReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const GetModeAndVersionReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GetModeAndVersionReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GetModeAndVersionReply)
    MergeFrom(*source);
  }
}

void GetModeAndVersionReply::MergeFrom(const GetModeAndVersionReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GetModeAndVersionReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.firmwareversion().size() > 0) {

    firmwareversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.firmwareversion_);
  }
  if (from.deviceserialno().size() > 0) {

    deviceserialno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deviceserialno_);
  }
  if (from.mode() != 0) {
    set_mode(from.mode());
  }
}

void GetModeAndVersionReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GetModeAndVersionReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetModeAndVersionReply::CopyFrom(const GetModeAndVersionReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetModeAndVersionReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetModeAndVersionReply::IsInitialized() const {
  return true;
}

void GetModeAndVersionReply::Swap(GetModeAndVersionReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void GetModeAndVersionReply::InternalSwap(GetModeAndVersionReply* other) {
  using std::swap;
  firmwareversion_.Swap(&other->firmwareversion_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  deviceserialno_.Swap(&other->deviceserialno_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(mode_, other->mode_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata GetModeAndVersionReply::GetMetadata() const {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void UpgradeStartRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UpgradeStartRequest::kFirmwareVersionFieldNumber;
const int UpgradeStartRequest::kSha256HashFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UpgradeStartRequest::UpgradeStartRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_UpgradeStartRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:UpgradeStartRequest)
}
UpgradeStartRequest::UpgradeStartRequest(const UpgradeStartRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  firmwareversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.firmwareversion().size() > 0) {
    firmwareversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.firmwareversion_);
  }
  sha256hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sha256hash().size() > 0) {
    sha256hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha256hash_);
  }
  // @@protoc_insertion_point(copy_constructor:UpgradeStartRequest)
}

void UpgradeStartRequest::SharedCtor() {
  firmwareversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sha256hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

UpgradeStartRequest::~UpgradeStartRequest() {
  // @@protoc_insertion_point(destructor:UpgradeStartRequest)
  SharedDtor();
}

void UpgradeStartRequest::SharedDtor() {
  firmwareversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sha256hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UpgradeStartRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* UpgradeStartRequest::descriptor() {
  ::protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const UpgradeStartRequest& UpgradeStartRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_UpgradeStartRequest.base);
  return *internal_default_instance();
}


void UpgradeStartRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:UpgradeStartRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  firmwareversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sha256hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool UpgradeStartRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:UpgradeStartRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string firmwareVersion = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_firmwareversion()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->firmwareversion().data(), static_cast<int>(this->firmwareversion().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "UpgradeStartRequest.firmwareVersion"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes sha256hash = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha256hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:UpgradeStartRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:UpgradeStartRequest)
  return false;
#undef DO_
}

void UpgradeStartRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:UpgradeStartRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string firmwareVersion = 1;
  if (this->firmwareversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->firmwareversion().data(), static_cast<int>(this->firmwareversion().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "UpgradeStartRequest.firmwareVersion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->firmwareversion(), output);
  }

  // bytes sha256hash = 2;
  if (this->sha256hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->sha256hash(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:UpgradeStartRequest)
}

::google::protobuf::uint8* UpgradeStartRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:UpgradeStartRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string firmwareVersion = 1;
  if (this->firmwareversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->firmwareversion().data(), static_cast<int>(this->firmwareversion().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "UpgradeStartRequest.firmwareVersion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->firmwareversion(), target);
  }

  // bytes sha256hash = 2;
  if (this->sha256hash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->sha256hash(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UpgradeStartRequest)
  return target;
}

size_t UpgradeStartRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UpgradeStartRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string firmwareVersion = 1;
  if (this->firmwareversion().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->firmwareversion());
  }

  // bytes sha256hash = 2;
  if (this->sha256hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->sha256hash());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpgradeStartRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UpgradeStartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpgradeStartRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const UpgradeStartRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UpgradeStartRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UpgradeStartRequest)
    MergeFrom(*source);
  }
}

void UpgradeStartRequest::MergeFrom(const UpgradeStartRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UpgradeStartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.firmwareversion().size() > 0) {

    firmwareversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.firmwareversion_);
  }
  if (from.sha256hash().size() > 0) {

    sha256hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha256hash_);
  }
}

void UpgradeStartRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UpgradeStartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpgradeStartRequest::CopyFrom(const UpgradeStartRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UpgradeStartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpgradeStartRequest::IsInitialized() const {
  return true;
}

void UpgradeStartRequest::Swap(UpgradeStartRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UpgradeStartRequest::InternalSwap(UpgradeStartRequest* other) {
  using std::swap;
  firmwareversion_.Swap(&other->firmwareversion_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sha256hash_.Swap(&other->sha256hash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata UpgradeStartRequest::GetMetadata() const {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void SendUpgradeFirmware::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SendUpgradeFirmware::kFirmwareVersionFieldNumber;
const int SendUpgradeFirmware::kSha256HashFieldNumber;
const int SendUpgradeFirmware::kSignatureFieldNumber;
const int SendUpgradeFirmware::kFirmwareFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SendUpgradeFirmware::SendUpgradeFirmware()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_SendUpgradeFirmware.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:SendUpgradeFirmware)
}
SendUpgradeFirmware::SendUpgradeFirmware(const SendUpgradeFirmware& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  firmwareversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.firmwareversion().size() > 0) {
    firmwareversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.firmwareversion_);
  }
  sha256hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sha256hash().size() > 0) {
    sha256hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha256hash_);
  }
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.signature().size() > 0) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  firmware_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.firmware().size() > 0) {
    firmware_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.firmware_);
  }
  // @@protoc_insertion_point(copy_constructor:SendUpgradeFirmware)
}

void SendUpgradeFirmware::SharedCtor() {
  firmwareversion_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sha256hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firmware_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

SendUpgradeFirmware::~SendUpgradeFirmware() {
  // @@protoc_insertion_point(destructor:SendUpgradeFirmware)
  SharedDtor();
}

void SendUpgradeFirmware::SharedDtor() {
  firmwareversion_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sha256hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firmware_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SendUpgradeFirmware::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* SendUpgradeFirmware::descriptor() {
  ::protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SendUpgradeFirmware& SendUpgradeFirmware::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_SendUpgradeFirmware.base);
  return *internal_default_instance();
}


void SendUpgradeFirmware::Clear() {
// @@protoc_insertion_point(message_clear_start:SendUpgradeFirmware)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  firmwareversion_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sha256hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  firmware_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool SendUpgradeFirmware::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:SendUpgradeFirmware)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string firmwareVersion = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_firmwareversion()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->firmwareversion().data(), static_cast<int>(this->firmwareversion().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "SendUpgradeFirmware.firmwareVersion"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes sha256hash = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_sha256hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes signature = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes firmware = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_firmware()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:SendUpgradeFirmware)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:SendUpgradeFirmware)
  return false;
#undef DO_
}

void SendUpgradeFirmware::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:SendUpgradeFirmware)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string firmwareVersion = 1;
  if (this->firmwareversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->firmwareversion().data(), static_cast<int>(this->firmwareversion().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SendUpgradeFirmware.firmwareVersion");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->firmwareversion(), output);
  }

  // bytes sha256hash = 2;
  if (this->sha256hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->sha256hash(), output);
  }

  // bytes signature = 3;
  if (this->signature().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->signature(), output);
  }

  // bytes firmware = 4;
  if (this->firmware().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->firmware(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:SendUpgradeFirmware)
}

::google::protobuf::uint8* SendUpgradeFirmware::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:SendUpgradeFirmware)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string firmwareVersion = 1;
  if (this->firmwareversion().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->firmwareversion().data(), static_cast<int>(this->firmwareversion().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "SendUpgradeFirmware.firmwareVersion");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->firmwareversion(), target);
  }

  // bytes sha256hash = 2;
  if (this->sha256hash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->sha256hash(), target);
  }

  // bytes signature = 3;
  if (this->signature().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->signature(), target);
  }

  // bytes firmware = 4;
  if (this->firmware().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->firmware(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SendUpgradeFirmware)
  return target;
}

size_t SendUpgradeFirmware::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SendUpgradeFirmware)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string firmwareVersion = 1;
  if (this->firmwareversion().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->firmwareversion());
  }

  // bytes sha256hash = 2;
  if (this->sha256hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->sha256hash());
  }

  // bytes signature = 3;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->signature());
  }

  // bytes firmware = 4;
  if (this->firmware().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->firmware());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendUpgradeFirmware::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SendUpgradeFirmware)
  GOOGLE_DCHECK_NE(&from, this);
  const SendUpgradeFirmware* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SendUpgradeFirmware>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SendUpgradeFirmware)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SendUpgradeFirmware)
    MergeFrom(*source);
  }
}

void SendUpgradeFirmware::MergeFrom(const SendUpgradeFirmware& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SendUpgradeFirmware)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.firmwareversion().size() > 0) {

    firmwareversion_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.firmwareversion_);
  }
  if (from.sha256hash().size() > 0) {

    sha256hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sha256hash_);
  }
  if (from.signature().size() > 0) {

    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  if (from.firmware().size() > 0) {

    firmware_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.firmware_);
  }
}

void SendUpgradeFirmware::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SendUpgradeFirmware)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendUpgradeFirmware::CopyFrom(const SendUpgradeFirmware& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SendUpgradeFirmware)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendUpgradeFirmware::IsInitialized() const {
  return true;
}

void SendUpgradeFirmware::Swap(SendUpgradeFirmware* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SendUpgradeFirmware::InternalSwap(SendUpgradeFirmware* other) {
  using std::swap;
  firmwareversion_.Swap(&other->firmwareversion_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sha256hash_.Swap(&other->sha256hash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  signature_.Swap(&other->signature_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  firmware_.Swap(&other->firmware_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata SendUpgradeFirmware::GetMetadata() const {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WriteSerialNo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WriteSerialNo::kDeviceSerialNoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WriteSerialNo::WriteSerialNo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_WriteSerialNo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:WriteSerialNo)
}
WriteSerialNo::WriteSerialNo(const WriteSerialNo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  deviceserialno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.deviceserialno().size() > 0) {
    deviceserialno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deviceserialno_);
  }
  // @@protoc_insertion_point(copy_constructor:WriteSerialNo)
}

void WriteSerialNo::SharedCtor() {
  deviceserialno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

WriteSerialNo::~WriteSerialNo() {
  // @@protoc_insertion_point(destructor:WriteSerialNo)
  SharedDtor();
}

void WriteSerialNo::SharedDtor() {
  deviceserialno_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WriteSerialNo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WriteSerialNo::descriptor() {
  ::protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WriteSerialNo& WriteSerialNo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_WriteSerialNo.base);
  return *internal_default_instance();
}


void WriteSerialNo::Clear() {
// @@protoc_insertion_point(message_clear_start:WriteSerialNo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deviceserialno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

bool WriteSerialNo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WriteSerialNo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string deviceSerialNo = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceserialno()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->deviceserialno().data(), static_cast<int>(this->deviceserialno().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "WriteSerialNo.deviceSerialNo"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WriteSerialNo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WriteSerialNo)
  return false;
#undef DO_
}

void WriteSerialNo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WriteSerialNo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string deviceSerialNo = 1;
  if (this->deviceserialno().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->deviceserialno().data(), static_cast<int>(this->deviceserialno().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "WriteSerialNo.deviceSerialNo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->deviceserialno(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:WriteSerialNo)
}

::google::protobuf::uint8* WriteSerialNo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WriteSerialNo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string deviceSerialNo = 1;
  if (this->deviceserialno().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->deviceserialno().data(), static_cast<int>(this->deviceserialno().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "WriteSerialNo.deviceSerialNo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->deviceserialno(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WriteSerialNo)
  return target;
}

size_t WriteSerialNo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WriteSerialNo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string deviceSerialNo = 1;
  if (this->deviceserialno().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->deviceserialno());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteSerialNo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WriteSerialNo)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteSerialNo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WriteSerialNo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WriteSerialNo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WriteSerialNo)
    MergeFrom(*source);
  }
}

void WriteSerialNo::MergeFrom(const WriteSerialNo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WriteSerialNo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.deviceserialno().size() > 0) {

    deviceserialno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deviceserialno_);
  }
}

void WriteSerialNo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WriteSerialNo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteSerialNo::CopyFrom(const WriteSerialNo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WriteSerialNo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteSerialNo::IsInitialized() const {
  return true;
}

void WriteSerialNo::Swap(WriteSerialNo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WriteSerialNo::InternalSwap(WriteSerialNo* other) {
  using std::swap;
  deviceserialno_.Swap(&other->deviceserialno_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WriteSerialNo::GetMetadata() const {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void WriteSerialNoReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WriteSerialNoReply::kWriteSuccessFieldNumber;
const int WriteSerialNoReply::kDeviceSerialNoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WriteSerialNoReply::WriteSerialNoReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_WriteSerialNoReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:WriteSerialNoReply)
}
WriteSerialNoReply::WriteSerialNoReply(const WriteSerialNoReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  deviceserialno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.deviceserialno().size() > 0) {
    deviceserialno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deviceserialno_);
  }
  writesuccess_ = from.writesuccess_;
  // @@protoc_insertion_point(copy_constructor:WriteSerialNoReply)
}

void WriteSerialNoReply::SharedCtor() {
  deviceserialno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  writesuccess_ = false;
}

WriteSerialNoReply::~WriteSerialNoReply() {
  // @@protoc_insertion_point(destructor:WriteSerialNoReply)
  SharedDtor();
}

void WriteSerialNoReply::SharedDtor() {
  deviceserialno_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void WriteSerialNoReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* WriteSerialNoReply::descriptor() {
  ::protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const WriteSerialNoReply& WriteSerialNoReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_WriteSerialNoReply.base);
  return *internal_default_instance();
}


void WriteSerialNoReply::Clear() {
// @@protoc_insertion_point(message_clear_start:WriteSerialNoReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deviceserialno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  writesuccess_ = false;
  _internal_metadata_.Clear();
}

bool WriteSerialNoReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:WriteSerialNoReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool writeSuccess = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &writesuccess_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string deviceSerialNo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceserialno()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->deviceserialno().data(), static_cast<int>(this->deviceserialno().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "WriteSerialNoReply.deviceSerialNo"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:WriteSerialNoReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:WriteSerialNoReply)
  return false;
#undef DO_
}

void WriteSerialNoReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:WriteSerialNoReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool writeSuccess = 1;
  if (this->writesuccess() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->writesuccess(), output);
  }

  // string deviceSerialNo = 2;
  if (this->deviceserialno().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->deviceserialno().data(), static_cast<int>(this->deviceserialno().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "WriteSerialNoReply.deviceSerialNo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->deviceserialno(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:WriteSerialNoReply)
}

::google::protobuf::uint8* WriteSerialNoReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:WriteSerialNoReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool writeSuccess = 1;
  if (this->writesuccess() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->writesuccess(), target);
  }

  // string deviceSerialNo = 2;
  if (this->deviceserialno().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->deviceserialno().data(), static_cast<int>(this->deviceserialno().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "WriteSerialNoReply.deviceSerialNo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->deviceserialno(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WriteSerialNoReply)
  return target;
}

size_t WriteSerialNoReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WriteSerialNoReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string deviceSerialNo = 2;
  if (this->deviceserialno().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->deviceserialno());
  }

  // bool writeSuccess = 1;
  if (this->writesuccess() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteSerialNoReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WriteSerialNoReply)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteSerialNoReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const WriteSerialNoReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WriteSerialNoReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WriteSerialNoReply)
    MergeFrom(*source);
  }
}

void WriteSerialNoReply::MergeFrom(const WriteSerialNoReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WriteSerialNoReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.deviceserialno().size() > 0) {

    deviceserialno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deviceserialno_);
  }
  if (from.writesuccess() != 0) {
    set_writesuccess(from.writesuccess());
  }
}

void WriteSerialNoReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WriteSerialNoReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteSerialNoReply::CopyFrom(const WriteSerialNoReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WriteSerialNoReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteSerialNoReply::IsInitialized() const {
  return true;
}

void WriteSerialNoReply::Swap(WriteSerialNoReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WriteSerialNoReply::InternalSwap(WriteSerialNoReply* other) {
  using std::swap;
  deviceserialno_.Swap(&other->deviceserialno_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(writesuccess_, other->writesuccess_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata WriteSerialNoReply::GetMetadata() const {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void LockSerialNo::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LockSerialNo::LockSerialNo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_LockSerialNo.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:LockSerialNo)
}
LockSerialNo::LockSerialNo(const LockSerialNo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:LockSerialNo)
}

void LockSerialNo::SharedCtor() {
}

LockSerialNo::~LockSerialNo() {
  // @@protoc_insertion_point(destructor:LockSerialNo)
  SharedDtor();
}

void LockSerialNo::SharedDtor() {
}

void LockSerialNo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* LockSerialNo::descriptor() {
  ::protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LockSerialNo& LockSerialNo::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_LockSerialNo.base);
  return *internal_default_instance();
}


void LockSerialNo::Clear() {
// @@protoc_insertion_point(message_clear_start:LockSerialNo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool LockSerialNo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:LockSerialNo)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:LockSerialNo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:LockSerialNo)
  return false;
#undef DO_
}

void LockSerialNo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:LockSerialNo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:LockSerialNo)
}

::google::protobuf::uint8* LockSerialNo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:LockSerialNo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LockSerialNo)
  return target;
}

size_t LockSerialNo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LockSerialNo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LockSerialNo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LockSerialNo)
  GOOGLE_DCHECK_NE(&from, this);
  const LockSerialNo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LockSerialNo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LockSerialNo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LockSerialNo)
    MergeFrom(*source);
  }
}

void LockSerialNo::MergeFrom(const LockSerialNo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LockSerialNo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void LockSerialNo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LockSerialNo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LockSerialNo::CopyFrom(const LockSerialNo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LockSerialNo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LockSerialNo::IsInitialized() const {
  return true;
}

void LockSerialNo::Swap(LockSerialNo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LockSerialNo::InternalSwap(LockSerialNo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata LockSerialNo::GetMetadata() const {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void lockSerialNoReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int lockSerialNoReply::kLockSuccessFieldNumber;
const int lockSerialNoReply::kDeviceSerialNoFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

lockSerialNoReply::lockSerialNoReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_lockSerialNoReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:lockSerialNoReply)
}
lockSerialNoReply::lockSerialNoReply(const lockSerialNoReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  deviceserialno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.deviceserialno().size() > 0) {
    deviceserialno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deviceserialno_);
  }
  locksuccess_ = from.locksuccess_;
  // @@protoc_insertion_point(copy_constructor:lockSerialNoReply)
}

void lockSerialNoReply::SharedCtor() {
  deviceserialno_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  locksuccess_ = false;
}

lockSerialNoReply::~lockSerialNoReply() {
  // @@protoc_insertion_point(destructor:lockSerialNoReply)
  SharedDtor();
}

void lockSerialNoReply::SharedDtor() {
  deviceserialno_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void lockSerialNoReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* lockSerialNoReply::descriptor() {
  ::protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const lockSerialNoReply& lockSerialNoReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_lockSerialNoReply.base);
  return *internal_default_instance();
}


void lockSerialNoReply::Clear() {
// @@protoc_insertion_point(message_clear_start:lockSerialNoReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deviceserialno_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  locksuccess_ = false;
  _internal_metadata_.Clear();
}

bool lockSerialNoReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:lockSerialNoReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool lockSuccess = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &locksuccess_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string deviceSerialNo = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_deviceserialno()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->deviceserialno().data(), static_cast<int>(this->deviceserialno().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "lockSerialNoReply.deviceSerialNo"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:lockSerialNoReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:lockSerialNoReply)
  return false;
#undef DO_
}

void lockSerialNoReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:lockSerialNoReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool lockSuccess = 1;
  if (this->locksuccess() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->locksuccess(), output);
  }

  // string deviceSerialNo = 2;
  if (this->deviceserialno().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->deviceserialno().data(), static_cast<int>(this->deviceserialno().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lockSerialNoReply.deviceSerialNo");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->deviceserialno(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:lockSerialNoReply)
}

::google::protobuf::uint8* lockSerialNoReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:lockSerialNoReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool lockSuccess = 1;
  if (this->locksuccess() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->locksuccess(), target);
  }

  // string deviceSerialNo = 2;
  if (this->deviceserialno().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->deviceserialno().data(), static_cast<int>(this->deviceserialno().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "lockSerialNoReply.deviceSerialNo");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->deviceserialno(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lockSerialNoReply)
  return target;
}

size_t lockSerialNoReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lockSerialNoReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string deviceSerialNo = 2;
  if (this->deviceserialno().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->deviceserialno());
  }

  // bool lockSuccess = 1;
  if (this->locksuccess() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void lockSerialNoReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lockSerialNoReply)
  GOOGLE_DCHECK_NE(&from, this);
  const lockSerialNoReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const lockSerialNoReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lockSerialNoReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lockSerialNoReply)
    MergeFrom(*source);
  }
}

void lockSerialNoReply::MergeFrom(const lockSerialNoReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lockSerialNoReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.deviceserialno().size() > 0) {

    deviceserialno_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.deviceserialno_);
  }
  if (from.locksuccess() != 0) {
    set_locksuccess(from.locksuccess());
  }
}

void lockSerialNoReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lockSerialNoReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void lockSerialNoReply::CopyFrom(const lockSerialNoReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lockSerialNoReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lockSerialNoReply::IsInitialized() const {
  return true;
}

void lockSerialNoReply::Swap(lockSerialNoReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void lockSerialNoReply::InternalSwap(lockSerialNoReply* other) {
  using std::swap;
  deviceserialno_.Swap(&other->deviceserialno_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(locksuccess_, other->locksuccess_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata lockSerialNoReply::GetMetadata() const {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EccSignOptions::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EccSignOptions::kRfc6979FieldNumber;
const int EccSignOptions::kGrapheneCanonizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EccSignOptions::EccSignOptions()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_EccSignOptions.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:EccSignOptions)
}
EccSignOptions::EccSignOptions(const EccSignOptions& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&rfc6979_, &from.rfc6979_,
    static_cast<size_t>(reinterpret_cast<char*>(&graphene_canonize_) -
    reinterpret_cast<char*>(&rfc6979_)) + sizeof(graphene_canonize_));
  // @@protoc_insertion_point(copy_constructor:EccSignOptions)
}

void EccSignOptions::SharedCtor() {
  ::memset(&rfc6979_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&graphene_canonize_) -
      reinterpret_cast<char*>(&rfc6979_)) + sizeof(graphene_canonize_));
}

EccSignOptions::~EccSignOptions() {
  // @@protoc_insertion_point(destructor:EccSignOptions)
  SharedDtor();
}

void EccSignOptions::SharedDtor() {
}

void EccSignOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EccSignOptions::descriptor() {
  ::protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EccSignOptions& EccSignOptions::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_EccSignOptions.base);
  return *internal_default_instance();
}


void EccSignOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:EccSignOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&rfc6979_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&graphene_canonize_) -
      reinterpret_cast<char*>(&rfc6979_)) + sizeof(graphene_canonize_));
  _internal_metadata_.Clear();
}

bool EccSignOptions::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EccSignOptions)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool rfc6979 = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &rfc6979_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool graphene_canonize = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &graphene_canonize_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EccSignOptions)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EccSignOptions)
  return false;
#undef DO_
}

void EccSignOptions::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EccSignOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool rfc6979 = 1;
  if (this->rfc6979() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->rfc6979(), output);
  }

  // bool graphene_canonize = 2;
  if (this->graphene_canonize() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->graphene_canonize(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:EccSignOptions)
}

::google::protobuf::uint8* EccSignOptions::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:EccSignOptions)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool rfc6979 = 1;
  if (this->rfc6979() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->rfc6979(), target);
  }

  // bool graphene_canonize = 2;
  if (this->graphene_canonize() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->graphene_canonize(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EccSignOptions)
  return target;
}

size_t EccSignOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EccSignOptions)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // bool rfc6979 = 1;
  if (this->rfc6979() != 0) {
    total_size += 1 + 1;
  }

  // bool graphene_canonize = 2;
  if (this->graphene_canonize() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EccSignOptions::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EccSignOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const EccSignOptions* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EccSignOptions>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EccSignOptions)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EccSignOptions)
    MergeFrom(*source);
  }
}

void EccSignOptions::MergeFrom(const EccSignOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EccSignOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rfc6979() != 0) {
    set_rfc6979(from.rfc6979());
  }
  if (from.graphene_canonize() != 0) {
    set_graphene_canonize(from.graphene_canonize());
  }
}

void EccSignOptions::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EccSignOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EccSignOptions::CopyFrom(const EccSignOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EccSignOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EccSignOptions::IsInitialized() const {
  return true;
}

void EccSignOptions::Swap(EccSignOptions* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EccSignOptions::InternalSwap(EccSignOptions* other) {
  using std::swap;
  swap(rfc6979_, other->rfc6979_);
  swap(graphene_canonize_, other->graphene_canonize_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EccSignOptions::GetMetadata() const {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EccSignRequest::InitAsDefaultInstance() {
  ::_EccSignRequest_default_instance_._instance.get_mutable()->options_ = const_cast< ::EccSignOptions*>(
      ::EccSignOptions::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EccSignRequest::kHdPathFieldNumber;
const int EccSignRequest::kHashFieldNumber;
const int EccSignRequest::kAlgorithmFieldNumber;
const int EccSignRequest::kOptionsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EccSignRequest::EccSignRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_EccSignRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:EccSignRequest)
}
EccSignRequest::EccSignRequest(const EccSignRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hdpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hdpath().size() > 0) {
    hdpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hdpath_);
  }
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hash().size() > 0) {
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.has_options()) {
    options_ = new ::EccSignOptions(*from.options_);
  } else {
    options_ = NULL;
  }
  algorithm_ = from.algorithm_;
  // @@protoc_insertion_point(copy_constructor:EccSignRequest)
}

void EccSignRequest::SharedCtor() {
  hdpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&options_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&algorithm_) -
      reinterpret_cast<char*>(&options_)) + sizeof(algorithm_));
}

EccSignRequest::~EccSignRequest() {
  // @@protoc_insertion_point(destructor:EccSignRequest)
  SharedDtor();
}

void EccSignRequest::SharedDtor() {
  hdpath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete options_;
}

void EccSignRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EccSignRequest::descriptor() {
  ::protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EccSignRequest& EccSignRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_EccSignRequest.base);
  return *internal_default_instance();
}


void EccSignRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:EccSignRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hdpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && options_ != NULL) {
    delete options_;
  }
  options_ = NULL;
  algorithm_ = 0;
  _internal_metadata_.Clear();
}

bool EccSignRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EccSignRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string hdPath = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hdpath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hdpath().data(), static_cast<int>(this->hdpath().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "EccSignRequest.hdPath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes hash = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .EccAlgorithm algorithm = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_algorithm(static_cast< ::EccAlgorithm >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .EccSignOptions options = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_options()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EccSignRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EccSignRequest)
  return false;
#undef DO_
}

void EccSignRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EccSignRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hdPath = 1;
  if (this->hdpath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hdpath().data(), static_cast<int>(this->hdpath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "EccSignRequest.hdPath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->hdpath(), output);
  }

  // bytes hash = 2;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->hash(), output);
  }

  // .EccAlgorithm algorithm = 3;
  if (this->algorithm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->algorithm(), output);
  }

  // .EccSignOptions options = 4;
  if (this->has_options()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_options(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:EccSignRequest)
}

::google::protobuf::uint8* EccSignRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:EccSignRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hdPath = 1;
  if (this->hdpath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hdpath().data(), static_cast<int>(this->hdpath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "EccSignRequest.hdPath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hdpath(), target);
  }

  // bytes hash = 2;
  if (this->hash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->hash(), target);
  }

  // .EccAlgorithm algorithm = 3;
  if (this->algorithm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->algorithm(), target);
  }

  // .EccSignOptions options = 4;
  if (this->has_options()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_options(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EccSignRequest)
  return target;
}

size_t EccSignRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EccSignRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string hdPath = 1;
  if (this->hdpath().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hdpath());
  }

  // bytes hash = 2;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hash());
  }

  // .EccSignOptions options = 4;
  if (this->has_options()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSize(
        *options_);
  }

  // .EccAlgorithm algorithm = 3;
  if (this->algorithm() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->algorithm());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EccSignRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EccSignRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EccSignRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EccSignRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EccSignRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EccSignRequest)
    MergeFrom(*source);
  }
}

void EccSignRequest::MergeFrom(const EccSignRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EccSignRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hdpath().size() > 0) {

    hdpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hdpath_);
  }
  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.has_options()) {
    mutable_options()->::EccSignOptions::MergeFrom(from.options());
  }
  if (from.algorithm() != 0) {
    set_algorithm(from.algorithm());
  }
}

void EccSignRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EccSignRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EccSignRequest::CopyFrom(const EccSignRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EccSignRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EccSignRequest::IsInitialized() const {
  return true;
}

void EccSignRequest::Swap(EccSignRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EccSignRequest::InternalSwap(EccSignRequest* other) {
  using std::swap;
  hdpath_.Swap(&other->hdpath_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hash_.Swap(&other->hash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(options_, other->options_);
  swap(algorithm_, other->algorithm_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EccSignRequest::GetMetadata() const {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EccSignResult::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EccSignResult::kHdPathFieldNumber;
const int EccSignResult::kPubkeyFieldNumber;
const int EccSignResult::kHashFieldNumber;
const int EccSignResult::kRFieldNumber;
const int EccSignResult::kSFieldNumber;
const int EccSignResult::kRecoverParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EccSignResult::EccSignResult()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_EccSignResult.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:EccSignResult)
}
EccSignResult::EccSignResult(const EccSignResult& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hdpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hdpath().size() > 0) {
    hdpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hdpath_);
  }
  pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pubkey().size() > 0) {
    pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
  }
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hash().size() > 0) {
    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  r_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.r().size() > 0) {
    r_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.r_);
  }
  s_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.s().size() > 0) {
    s_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.s_);
  }
  recover_param_ = from.recover_param_;
  // @@protoc_insertion_point(copy_constructor:EccSignResult)
}

void EccSignResult::SharedCtor() {
  hdpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  r_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  s_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recover_param_ = 0u;
}

EccSignResult::~EccSignResult() {
  // @@protoc_insertion_point(destructor:EccSignResult)
  SharedDtor();
}

void EccSignResult::SharedDtor() {
  hdpath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pubkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  r_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  s_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EccSignResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EccSignResult::descriptor() {
  ::protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EccSignResult& EccSignResult::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_EccSignResult.base);
  return *internal_default_instance();
}


void EccSignResult::Clear() {
// @@protoc_insertion_point(message_clear_start:EccSignResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hdpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  hash_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  r_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  s_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recover_param_ = 0u;
  _internal_metadata_.Clear();
}

bool EccSignResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EccSignResult)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string hdPath = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hdpath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hdpath().data(), static_cast<int>(this->hdpath().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "EccSignResult.hdPath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pubkey = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pubkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes hash = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_hash()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes R = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_r()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes S = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_s()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 recover_param = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &recover_param_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EccSignResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EccSignResult)
  return false;
#undef DO_
}

void EccSignResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EccSignResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hdPath = 1;
  if (this->hdpath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hdpath().data(), static_cast<int>(this->hdpath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "EccSignResult.hdPath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->hdpath(), output);
  }

  // bytes pubkey = 2;
  if (this->pubkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->pubkey(), output);
  }

  // bytes hash = 3;
  if (this->hash().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->hash(), output);
  }

  // bytes R = 4;
  if (this->r().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->r(), output);
  }

  // bytes S = 5;
  if (this->s().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->s(), output);
  }

  // uint32 recover_param = 6;
  if (this->recover_param() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->recover_param(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:EccSignResult)
}

::google::protobuf::uint8* EccSignResult::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:EccSignResult)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hdPath = 1;
  if (this->hdpath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hdpath().data(), static_cast<int>(this->hdpath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "EccSignResult.hdPath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hdpath(), target);
  }

  // bytes pubkey = 2;
  if (this->pubkey().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->pubkey(), target);
  }

  // bytes hash = 3;
  if (this->hash().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->hash(), target);
  }

  // bytes R = 4;
  if (this->r().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->r(), target);
  }

  // bytes S = 5;
  if (this->s().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->s(), target);
  }

  // uint32 recover_param = 6;
  if (this->recover_param() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->recover_param(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EccSignResult)
  return target;
}

size_t EccSignResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EccSignResult)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string hdPath = 1;
  if (this->hdpath().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hdpath());
  }

  // bytes pubkey = 2;
  if (this->pubkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pubkey());
  }

  // bytes hash = 3;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->hash());
  }

  // bytes R = 4;
  if (this->r().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->r());
  }

  // bytes S = 5;
  if (this->s().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->s());
  }

  // uint32 recover_param = 6;
  if (this->recover_param() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->recover_param());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EccSignResult::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EccSignResult)
  GOOGLE_DCHECK_NE(&from, this);
  const EccSignResult* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EccSignResult>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EccSignResult)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EccSignResult)
    MergeFrom(*source);
  }
}

void EccSignResult::MergeFrom(const EccSignResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EccSignResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hdpath().size() > 0) {

    hdpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hdpath_);
  }
  if (from.pubkey().size() > 0) {

    pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
  }
  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.r().size() > 0) {

    r_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.r_);
  }
  if (from.s().size() > 0) {

    s_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.s_);
  }
  if (from.recover_param() != 0) {
    set_recover_param(from.recover_param());
  }
}

void EccSignResult::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EccSignResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EccSignResult::CopyFrom(const EccSignResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EccSignResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EccSignResult::IsInitialized() const {
  return true;
}

void EccSignResult::Swap(EccSignResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EccSignResult::InternalSwap(EccSignResult* other) {
  using std::swap;
  hdpath_.Swap(&other->hdpath_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pubkey_.Swap(&other->pubkey_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hash_.Swap(&other->hash_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  r_.Swap(&other->r_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  s_.Swap(&other->s_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(recover_param_, other->recover_param_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EccSignResult::GetMetadata() const {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EccGetPublicKeyRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EccGetPublicKeyRequest::kHdPathFieldNumber;
const int EccGetPublicKeyRequest::kAlgorithmFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EccGetPublicKeyRequest::EccGetPublicKeyRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_EccGetPublicKeyRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:EccGetPublicKeyRequest)
}
EccGetPublicKeyRequest::EccGetPublicKeyRequest(const EccGetPublicKeyRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hdpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hdpath().size() > 0) {
    hdpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hdpath_);
  }
  algorithm_ = from.algorithm_;
  // @@protoc_insertion_point(copy_constructor:EccGetPublicKeyRequest)
}

void EccGetPublicKeyRequest::SharedCtor() {
  hdpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  algorithm_ = 0;
}

EccGetPublicKeyRequest::~EccGetPublicKeyRequest() {
  // @@protoc_insertion_point(destructor:EccGetPublicKeyRequest)
  SharedDtor();
}

void EccGetPublicKeyRequest::SharedDtor() {
  hdpath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EccGetPublicKeyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EccGetPublicKeyRequest::descriptor() {
  ::protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EccGetPublicKeyRequest& EccGetPublicKeyRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_EccGetPublicKeyRequest.base);
  return *internal_default_instance();
}


void EccGetPublicKeyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:EccGetPublicKeyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hdpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  algorithm_ = 0;
  _internal_metadata_.Clear();
}

bool EccGetPublicKeyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EccGetPublicKeyRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string hdPath = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hdpath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hdpath().data(), static_cast<int>(this->hdpath().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "EccGetPublicKeyRequest.hdPath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .EccAlgorithm algorithm = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_algorithm(static_cast< ::EccAlgorithm >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EccGetPublicKeyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EccGetPublicKeyRequest)
  return false;
#undef DO_
}

void EccGetPublicKeyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EccGetPublicKeyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hdPath = 1;
  if (this->hdpath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hdpath().data(), static_cast<int>(this->hdpath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "EccGetPublicKeyRequest.hdPath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->hdpath(), output);
  }

  // .EccAlgorithm algorithm = 2;
  if (this->algorithm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->algorithm(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:EccGetPublicKeyRequest)
}

::google::protobuf::uint8* EccGetPublicKeyRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:EccGetPublicKeyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hdPath = 1;
  if (this->hdpath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hdpath().data(), static_cast<int>(this->hdpath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "EccGetPublicKeyRequest.hdPath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hdpath(), target);
  }

  // .EccAlgorithm algorithm = 2;
  if (this->algorithm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->algorithm(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EccGetPublicKeyRequest)
  return target;
}

size_t EccGetPublicKeyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EccGetPublicKeyRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string hdPath = 1;
  if (this->hdpath().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hdpath());
  }

  // .EccAlgorithm algorithm = 2;
  if (this->algorithm() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->algorithm());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EccGetPublicKeyRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EccGetPublicKeyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EccGetPublicKeyRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EccGetPublicKeyRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EccGetPublicKeyRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EccGetPublicKeyRequest)
    MergeFrom(*source);
  }
}

void EccGetPublicKeyRequest::MergeFrom(const EccGetPublicKeyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EccGetPublicKeyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hdpath().size() > 0) {

    hdpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hdpath_);
  }
  if (from.algorithm() != 0) {
    set_algorithm(from.algorithm());
  }
}

void EccGetPublicKeyRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EccGetPublicKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EccGetPublicKeyRequest::CopyFrom(const EccGetPublicKeyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EccGetPublicKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EccGetPublicKeyRequest::IsInitialized() const {
  return true;
}

void EccGetPublicKeyRequest::Swap(EccGetPublicKeyRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EccGetPublicKeyRequest::InternalSwap(EccGetPublicKeyRequest* other) {
  using std::swap;
  hdpath_.Swap(&other->hdpath_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(algorithm_, other->algorithm_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EccGetPublicKeyRequest::GetMetadata() const {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EccGetPublicKeyReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EccGetPublicKeyReply::kHdPathFieldNumber;
const int EccGetPublicKeyReply::kAlgorithmFieldNumber;
const int EccGetPublicKeyReply::kPubkeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EccGetPublicKeyReply::EccGetPublicKeyReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_EccGetPublicKeyReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:EccGetPublicKeyReply)
}
EccGetPublicKeyReply::EccGetPublicKeyReply(const EccGetPublicKeyReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hdpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hdpath().size() > 0) {
    hdpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hdpath_);
  }
  pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.pubkey().size() > 0) {
    pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
  }
  algorithm_ = from.algorithm_;
  // @@protoc_insertion_point(copy_constructor:EccGetPublicKeyReply)
}

void EccGetPublicKeyReply::SharedCtor() {
  hdpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  algorithm_ = 0;
}

EccGetPublicKeyReply::~EccGetPublicKeyReply() {
  // @@protoc_insertion_point(destructor:EccGetPublicKeyReply)
  SharedDtor();
}

void EccGetPublicKeyReply::SharedDtor() {
  hdpath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pubkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EccGetPublicKeyReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EccGetPublicKeyReply::descriptor() {
  ::protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EccGetPublicKeyReply& EccGetPublicKeyReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_EccGetPublicKeyReply.base);
  return *internal_default_instance();
}


void EccGetPublicKeyReply::Clear() {
// @@protoc_insertion_point(message_clear_start:EccGetPublicKeyReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hdpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  algorithm_ = 0;
  _internal_metadata_.Clear();
}

bool EccGetPublicKeyReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EccGetPublicKeyReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string hdPath = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hdpath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hdpath().data(), static_cast<int>(this->hdpath().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "EccGetPublicKeyReply.hdPath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .EccAlgorithm algorithm = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_algorithm(static_cast< ::EccAlgorithm >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes pubkey = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_pubkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EccGetPublicKeyReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EccGetPublicKeyReply)
  return false;
#undef DO_
}

void EccGetPublicKeyReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EccGetPublicKeyReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hdPath = 1;
  if (this->hdpath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hdpath().data(), static_cast<int>(this->hdpath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "EccGetPublicKeyReply.hdPath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->hdpath(), output);
  }

  // .EccAlgorithm algorithm = 2;
  if (this->algorithm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->algorithm(), output);
  }

  // bytes pubkey = 3;
  if (this->pubkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->pubkey(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:EccGetPublicKeyReply)
}

::google::protobuf::uint8* EccGetPublicKeyReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:EccGetPublicKeyReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hdPath = 1;
  if (this->hdpath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hdpath().data(), static_cast<int>(this->hdpath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "EccGetPublicKeyReply.hdPath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hdpath(), target);
  }

  // .EccAlgorithm algorithm = 2;
  if (this->algorithm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->algorithm(), target);
  }

  // bytes pubkey = 3;
  if (this->pubkey().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->pubkey(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EccGetPublicKeyReply)
  return target;
}

size_t EccGetPublicKeyReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EccGetPublicKeyReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string hdPath = 1;
  if (this->hdpath().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hdpath());
  }

  // bytes pubkey = 3;
  if (this->pubkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->pubkey());
  }

  // .EccAlgorithm algorithm = 2;
  if (this->algorithm() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->algorithm());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EccGetPublicKeyReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EccGetPublicKeyReply)
  GOOGLE_DCHECK_NE(&from, this);
  const EccGetPublicKeyReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EccGetPublicKeyReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EccGetPublicKeyReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EccGetPublicKeyReply)
    MergeFrom(*source);
  }
}

void EccGetPublicKeyReply::MergeFrom(const EccGetPublicKeyReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EccGetPublicKeyReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hdpath().size() > 0) {

    hdpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hdpath_);
  }
  if (from.pubkey().size() > 0) {

    pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
  }
  if (from.algorithm() != 0) {
    set_algorithm(from.algorithm());
  }
}

void EccGetPublicKeyReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EccGetPublicKeyReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EccGetPublicKeyReply::CopyFrom(const EccGetPublicKeyReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EccGetPublicKeyReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EccGetPublicKeyReply::IsInitialized() const {
  return true;
}

void EccGetPublicKeyReply::Swap(EccGetPublicKeyReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EccGetPublicKeyReply::InternalSwap(EccGetPublicKeyReply* other) {
  using std::swap;
  hdpath_.Swap(&other->hdpath_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pubkey_.Swap(&other->pubkey_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(algorithm_, other->algorithm_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EccGetPublicKeyReply::GetMetadata() const {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EccMultiplyRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EccMultiplyRequest::kHdPathFieldNumber;
const int EccMultiplyRequest::kAlgorithmFieldNumber;
const int EccMultiplyRequest::kInputPubkeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EccMultiplyRequest::EccMultiplyRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_EccMultiplyRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:EccMultiplyRequest)
}
EccMultiplyRequest::EccMultiplyRequest(const EccMultiplyRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hdpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hdpath().size() > 0) {
    hdpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hdpath_);
  }
  input_pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.input_pubkey().size() > 0) {
    input_pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_pubkey_);
  }
  algorithm_ = from.algorithm_;
  // @@protoc_insertion_point(copy_constructor:EccMultiplyRequest)
}

void EccMultiplyRequest::SharedCtor() {
  hdpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  input_pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  algorithm_ = 0;
}

EccMultiplyRequest::~EccMultiplyRequest() {
  // @@protoc_insertion_point(destructor:EccMultiplyRequest)
  SharedDtor();
}

void EccMultiplyRequest::SharedDtor() {
  hdpath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  input_pubkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EccMultiplyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EccMultiplyRequest::descriptor() {
  ::protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EccMultiplyRequest& EccMultiplyRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_EccMultiplyRequest.base);
  return *internal_default_instance();
}


void EccMultiplyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:EccMultiplyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hdpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  input_pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  algorithm_ = 0;
  _internal_metadata_.Clear();
}

bool EccMultiplyRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EccMultiplyRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string hdPath = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hdpath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hdpath().data(), static_cast<int>(this->hdpath().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "EccMultiplyRequest.hdPath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .EccAlgorithm algorithm = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_algorithm(static_cast< ::EccAlgorithm >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes input_pubkey = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_input_pubkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EccMultiplyRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EccMultiplyRequest)
  return false;
#undef DO_
}

void EccMultiplyRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EccMultiplyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hdPath = 1;
  if (this->hdpath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hdpath().data(), static_cast<int>(this->hdpath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "EccMultiplyRequest.hdPath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->hdpath(), output);
  }

  // .EccAlgorithm algorithm = 2;
  if (this->algorithm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->algorithm(), output);
  }

  // bytes input_pubkey = 3;
  if (this->input_pubkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->input_pubkey(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:EccMultiplyRequest)
}

::google::protobuf::uint8* EccMultiplyRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:EccMultiplyRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hdPath = 1;
  if (this->hdpath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hdpath().data(), static_cast<int>(this->hdpath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "EccMultiplyRequest.hdPath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hdpath(), target);
  }

  // .EccAlgorithm algorithm = 2;
  if (this->algorithm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->algorithm(), target);
  }

  // bytes input_pubkey = 3;
  if (this->input_pubkey().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->input_pubkey(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EccMultiplyRequest)
  return target;
}

size_t EccMultiplyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EccMultiplyRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string hdPath = 1;
  if (this->hdpath().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hdpath());
  }

  // bytes input_pubkey = 3;
  if (this->input_pubkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->input_pubkey());
  }

  // .EccAlgorithm algorithm = 2;
  if (this->algorithm() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->algorithm());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EccMultiplyRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EccMultiplyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EccMultiplyRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EccMultiplyRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EccMultiplyRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EccMultiplyRequest)
    MergeFrom(*source);
  }
}

void EccMultiplyRequest::MergeFrom(const EccMultiplyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EccMultiplyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hdpath().size() > 0) {

    hdpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hdpath_);
  }
  if (from.input_pubkey().size() > 0) {

    input_pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_pubkey_);
  }
  if (from.algorithm() != 0) {
    set_algorithm(from.algorithm());
  }
}

void EccMultiplyRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EccMultiplyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EccMultiplyRequest::CopyFrom(const EccMultiplyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EccMultiplyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EccMultiplyRequest::IsInitialized() const {
  return true;
}

void EccMultiplyRequest::Swap(EccMultiplyRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EccMultiplyRequest::InternalSwap(EccMultiplyRequest* other) {
  using std::swap;
  hdpath_.Swap(&other->hdpath_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  input_pubkey_.Swap(&other->input_pubkey_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(algorithm_, other->algorithm_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EccMultiplyRequest::GetMetadata() const {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EccMultiplyReply::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EccMultiplyReply::kHdPathFieldNumber;
const int EccMultiplyReply::kAlgorithmFieldNumber;
const int EccMultiplyReply::kInputPubkeyFieldNumber;
const int EccMultiplyReply::kDevPubkeyFieldNumber;
const int EccMultiplyReply::kResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EccMultiplyReply::EccMultiplyReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_EccMultiplyReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:EccMultiplyReply)
}
EccMultiplyReply::EccMultiplyReply(const EccMultiplyReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hdpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.hdpath().size() > 0) {
    hdpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hdpath_);
  }
  input_pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.input_pubkey().size() > 0) {
    input_pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_pubkey_);
  }
  dev_pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.dev_pubkey().size() > 0) {
    dev_pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dev_pubkey_);
  }
  result_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.result().size() > 0) {
    result_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.result_);
  }
  algorithm_ = from.algorithm_;
  // @@protoc_insertion_point(copy_constructor:EccMultiplyReply)
}

void EccMultiplyReply::SharedCtor() {
  hdpath_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  input_pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dev_pubkey_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  algorithm_ = 0;
}

EccMultiplyReply::~EccMultiplyReply() {
  // @@protoc_insertion_point(destructor:EccMultiplyReply)
  SharedDtor();
}

void EccMultiplyReply::SharedDtor() {
  hdpath_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  input_pubkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dev_pubkey_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EccMultiplyReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EccMultiplyReply::descriptor() {
  ::protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EccMultiplyReply& EccMultiplyReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_EccMultiplyReply.base);
  return *internal_default_instance();
}


void EccMultiplyReply::Clear() {
// @@protoc_insertion_point(message_clear_start:EccMultiplyReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hdpath_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  input_pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dev_pubkey_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  result_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  algorithm_ = 0;
  _internal_metadata_.Clear();
}

bool EccMultiplyReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EccMultiplyReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string hdPath = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_hdpath()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->hdpath().data(), static_cast<int>(this->hdpath().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "EccMultiplyReply.hdPath"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .EccAlgorithm algorithm = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_algorithm(static_cast< ::EccAlgorithm >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes input_pubkey = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_input_pubkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes dev_pubkey = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_dev_pubkey()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes result = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:EccMultiplyReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EccMultiplyReply)
  return false;
#undef DO_
}

void EccMultiplyReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EccMultiplyReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hdPath = 1;
  if (this->hdpath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hdpath().data(), static_cast<int>(this->hdpath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "EccMultiplyReply.hdPath");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->hdpath(), output);
  }

  // .EccAlgorithm algorithm = 2;
  if (this->algorithm() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->algorithm(), output);
  }

  // bytes input_pubkey = 3;
  if (this->input_pubkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->input_pubkey(), output);
  }

  // bytes dev_pubkey = 4;
  if (this->dev_pubkey().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->dev_pubkey(), output);
  }

  // bytes result = 5;
  if (this->result().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->result(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:EccMultiplyReply)
}

::google::protobuf::uint8* EccMultiplyReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:EccMultiplyReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hdPath = 1;
  if (this->hdpath().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->hdpath().data(), static_cast<int>(this->hdpath().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "EccMultiplyReply.hdPath");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->hdpath(), target);
  }

  // .EccAlgorithm algorithm = 2;
  if (this->algorithm() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->algorithm(), target);
  }

  // bytes input_pubkey = 3;
  if (this->input_pubkey().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->input_pubkey(), target);
  }

  // bytes dev_pubkey = 4;
  if (this->dev_pubkey().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->dev_pubkey(), target);
  }

  // bytes result = 5;
  if (this->result().size() > 0) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->result(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EccMultiplyReply)
  return target;
}

size_t EccMultiplyReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EccMultiplyReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string hdPath = 1;
  if (this->hdpath().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->hdpath());
  }

  // bytes input_pubkey = 3;
  if (this->input_pubkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->input_pubkey());
  }

  // bytes dev_pubkey = 4;
  if (this->dev_pubkey().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->dev_pubkey());
  }

  // bytes result = 5;
  if (this->result().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->result());
  }

  // .EccAlgorithm algorithm = 2;
  if (this->algorithm() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->algorithm());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EccMultiplyReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EccMultiplyReply)
  GOOGLE_DCHECK_NE(&from, this);
  const EccMultiplyReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EccMultiplyReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EccMultiplyReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EccMultiplyReply)
    MergeFrom(*source);
  }
}

void EccMultiplyReply::MergeFrom(const EccMultiplyReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EccMultiplyReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hdpath().size() > 0) {

    hdpath_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.hdpath_);
  }
  if (from.input_pubkey().size() > 0) {

    input_pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.input_pubkey_);
  }
  if (from.dev_pubkey().size() > 0) {

    dev_pubkey_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.dev_pubkey_);
  }
  if (from.result().size() > 0) {

    result_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.result_);
  }
  if (from.algorithm() != 0) {
    set_algorithm(from.algorithm());
  }
}

void EccMultiplyReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EccMultiplyReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EccMultiplyReply::CopyFrom(const EccMultiplyReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EccMultiplyReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EccMultiplyReply::IsInitialized() const {
  return true;
}

void EccMultiplyReply::Swap(EccMultiplyReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EccMultiplyReply::InternalSwap(EccMultiplyReply* other) {
  using std::swap;
  hdpath_.Swap(&other->hdpath_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  input_pubkey_.Swap(&other->input_pubkey_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  dev_pubkey_.Swap(&other->dev_pubkey_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  result_.Swap(&other->result_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(algorithm_, other->algorithm_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EccMultiplyReply::GetMetadata() const {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void EraseDataRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EraseDataRequest::EraseDataRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_messages_2eproto::scc_info_EraseDataRequest.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:EraseDataRequest)
}
EraseDataRequest::EraseDataRequest(const EraseDataRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:EraseDataRequest)
}

void EraseDataRequest::SharedCtor() {
}

EraseDataRequest::~EraseDataRequest() {
  // @@protoc_insertion_point(destructor:EraseDataRequest)
  SharedDtor();
}

void EraseDataRequest::SharedDtor() {
}

void EraseDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* EraseDataRequest::descriptor() {
  ::protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EraseDataRequest& EraseDataRequest::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_messages_2eproto::scc_info_EraseDataRequest.base);
  return *internal_default_instance();
}


void EraseDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:EraseDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

bool EraseDataRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:EraseDataRequest)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:EraseDataRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:EraseDataRequest)
  return false;
#undef DO_
}

void EraseDataRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:EraseDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:EraseDataRequest)
}

::google::protobuf::uint8* EraseDataRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:EraseDataRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EraseDataRequest)
  return target;
}

size_t EraseDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EraseDataRequest)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EraseDataRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EraseDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EraseDataRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EraseDataRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EraseDataRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EraseDataRequest)
    MergeFrom(*source);
  }
}

void EraseDataRequest::MergeFrom(const EraseDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EraseDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void EraseDataRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EraseDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EraseDataRequest::CopyFrom(const EraseDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EraseDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EraseDataRequest::IsInitialized() const {
  return true;
}

void EraseDataRequest::Swap(EraseDataRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EraseDataRequest::InternalSwap(EraseDataRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata EraseDataRequest::GetMetadata() const {
  protobuf_messages_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_messages_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::RequestRejected* Arena::CreateMaybeMessage< ::RequestRejected >(Arena* arena) {
  return Arena::CreateInternal< ::RequestRejected >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GenericConfirmReply* Arena::CreateMaybeMessage< ::GenericConfirmReply >(Arena* arena) {
  return Arena::CreateInternal< ::GenericConfirmReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GetModeAndVersionRequest* Arena::CreateMaybeMessage< ::GetModeAndVersionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GetModeAndVersionRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::GetModeAndVersionReply* Arena::CreateMaybeMessage< ::GetModeAndVersionReply >(Arena* arena) {
  return Arena::CreateInternal< ::GetModeAndVersionReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::UpgradeStartRequest* Arena::CreateMaybeMessage< ::UpgradeStartRequest >(Arena* arena) {
  return Arena::CreateInternal< ::UpgradeStartRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::SendUpgradeFirmware* Arena::CreateMaybeMessage< ::SendUpgradeFirmware >(Arena* arena) {
  return Arena::CreateInternal< ::SendUpgradeFirmware >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::WriteSerialNo* Arena::CreateMaybeMessage< ::WriteSerialNo >(Arena* arena) {
  return Arena::CreateInternal< ::WriteSerialNo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::WriteSerialNoReply* Arena::CreateMaybeMessage< ::WriteSerialNoReply >(Arena* arena) {
  return Arena::CreateInternal< ::WriteSerialNoReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::LockSerialNo* Arena::CreateMaybeMessage< ::LockSerialNo >(Arena* arena) {
  return Arena::CreateInternal< ::LockSerialNo >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::lockSerialNoReply* Arena::CreateMaybeMessage< ::lockSerialNoReply >(Arena* arena) {
  return Arena::CreateInternal< ::lockSerialNoReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::EccSignOptions* Arena::CreateMaybeMessage< ::EccSignOptions >(Arena* arena) {
  return Arena::CreateInternal< ::EccSignOptions >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::EccSignRequest* Arena::CreateMaybeMessage< ::EccSignRequest >(Arena* arena) {
  return Arena::CreateInternal< ::EccSignRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::EccSignResult* Arena::CreateMaybeMessage< ::EccSignResult >(Arena* arena) {
  return Arena::CreateInternal< ::EccSignResult >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::EccGetPublicKeyRequest* Arena::CreateMaybeMessage< ::EccGetPublicKeyRequest >(Arena* arena) {
  return Arena::CreateInternal< ::EccGetPublicKeyRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::EccGetPublicKeyReply* Arena::CreateMaybeMessage< ::EccGetPublicKeyReply >(Arena* arena) {
  return Arena::CreateInternal< ::EccGetPublicKeyReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::EccMultiplyRequest* Arena::CreateMaybeMessage< ::EccMultiplyRequest >(Arena* arena) {
  return Arena::CreateInternal< ::EccMultiplyRequest >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::EccMultiplyReply* Arena::CreateMaybeMessage< ::EccMultiplyReply >(Arena* arena) {
  return Arena::CreateInternal< ::EccMultiplyReply >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::EraseDataRequest* Arena::CreateMaybeMessage< ::EraseDataRequest >(Arena* arena) {
  return Arena::CreateInternal< ::EraseDataRequest >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
