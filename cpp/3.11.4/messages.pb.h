// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_messages_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_messages_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_messages_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[20]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2eproto;
class EccGetExtendedPublicKeyReply;
class EccGetExtendedPublicKeyReplyDefaultTypeInternal;
extern EccGetExtendedPublicKeyReplyDefaultTypeInternal _EccGetExtendedPublicKeyReply_default_instance_;
class EccGetExtendedPublicKeyRequest;
class EccGetExtendedPublicKeyRequestDefaultTypeInternal;
extern EccGetExtendedPublicKeyRequestDefaultTypeInternal _EccGetExtendedPublicKeyRequest_default_instance_;
class EccGetPublicKeyReply;
class EccGetPublicKeyReplyDefaultTypeInternal;
extern EccGetPublicKeyReplyDefaultTypeInternal _EccGetPublicKeyReply_default_instance_;
class EccGetPublicKeyRequest;
class EccGetPublicKeyRequestDefaultTypeInternal;
extern EccGetPublicKeyRequestDefaultTypeInternal _EccGetPublicKeyRequest_default_instance_;
class EccMultiplyReply;
class EccMultiplyReplyDefaultTypeInternal;
extern EccMultiplyReplyDefaultTypeInternal _EccMultiplyReply_default_instance_;
class EccMultiplyRequest;
class EccMultiplyRequestDefaultTypeInternal;
extern EccMultiplyRequestDefaultTypeInternal _EccMultiplyRequest_default_instance_;
class EccSignOptions;
class EccSignOptionsDefaultTypeInternal;
extern EccSignOptionsDefaultTypeInternal _EccSignOptions_default_instance_;
class EccSignRequest;
class EccSignRequestDefaultTypeInternal;
extern EccSignRequestDefaultTypeInternal _EccSignRequest_default_instance_;
class EccSignResult;
class EccSignResultDefaultTypeInternal;
extern EccSignResultDefaultTypeInternal _EccSignResult_default_instance_;
class EraseDataRequest;
class EraseDataRequestDefaultTypeInternal;
extern EraseDataRequestDefaultTypeInternal _EraseDataRequest_default_instance_;
class GenericConfirmReply;
class GenericConfirmReplyDefaultTypeInternal;
extern GenericConfirmReplyDefaultTypeInternal _GenericConfirmReply_default_instance_;
class GetModeAndVersionReply;
class GetModeAndVersionReplyDefaultTypeInternal;
extern GetModeAndVersionReplyDefaultTypeInternal _GetModeAndVersionReply_default_instance_;
class GetModeAndVersionRequest;
class GetModeAndVersionRequestDefaultTypeInternal;
extern GetModeAndVersionRequestDefaultTypeInternal _GetModeAndVersionRequest_default_instance_;
class LockSerialNo;
class LockSerialNoDefaultTypeInternal;
extern LockSerialNoDefaultTypeInternal _LockSerialNo_default_instance_;
class RequestRejected;
class RequestRejectedDefaultTypeInternal;
extern RequestRejectedDefaultTypeInternal _RequestRejected_default_instance_;
class SendUpgradeFirmware;
class SendUpgradeFirmwareDefaultTypeInternal;
extern SendUpgradeFirmwareDefaultTypeInternal _SendUpgradeFirmware_default_instance_;
class UpgradeStartRequest;
class UpgradeStartRequestDefaultTypeInternal;
extern UpgradeStartRequestDefaultTypeInternal _UpgradeStartRequest_default_instance_;
class WriteSerialNo;
class WriteSerialNoDefaultTypeInternal;
extern WriteSerialNoDefaultTypeInternal _WriteSerialNo_default_instance_;
class WriteSerialNoReply;
class WriteSerialNoReplyDefaultTypeInternal;
extern WriteSerialNoReplyDefaultTypeInternal _WriteSerialNoReply_default_instance_;
class lockSerialNoReply;
class lockSerialNoReplyDefaultTypeInternal;
extern lockSerialNoReplyDefaultTypeInternal _lockSerialNoReply_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::EccGetExtendedPublicKeyReply* Arena::CreateMaybeMessage<::EccGetExtendedPublicKeyReply>(Arena*);
template<> ::EccGetExtendedPublicKeyRequest* Arena::CreateMaybeMessage<::EccGetExtendedPublicKeyRequest>(Arena*);
template<> ::EccGetPublicKeyReply* Arena::CreateMaybeMessage<::EccGetPublicKeyReply>(Arena*);
template<> ::EccGetPublicKeyRequest* Arena::CreateMaybeMessage<::EccGetPublicKeyRequest>(Arena*);
template<> ::EccMultiplyReply* Arena::CreateMaybeMessage<::EccMultiplyReply>(Arena*);
template<> ::EccMultiplyRequest* Arena::CreateMaybeMessage<::EccMultiplyRequest>(Arena*);
template<> ::EccSignOptions* Arena::CreateMaybeMessage<::EccSignOptions>(Arena*);
template<> ::EccSignRequest* Arena::CreateMaybeMessage<::EccSignRequest>(Arena*);
template<> ::EccSignResult* Arena::CreateMaybeMessage<::EccSignResult>(Arena*);
template<> ::EraseDataRequest* Arena::CreateMaybeMessage<::EraseDataRequest>(Arena*);
template<> ::GenericConfirmReply* Arena::CreateMaybeMessage<::GenericConfirmReply>(Arena*);
template<> ::GetModeAndVersionReply* Arena::CreateMaybeMessage<::GetModeAndVersionReply>(Arena*);
template<> ::GetModeAndVersionRequest* Arena::CreateMaybeMessage<::GetModeAndVersionRequest>(Arena*);
template<> ::LockSerialNo* Arena::CreateMaybeMessage<::LockSerialNo>(Arena*);
template<> ::RequestRejected* Arena::CreateMaybeMessage<::RequestRejected>(Arena*);
template<> ::SendUpgradeFirmware* Arena::CreateMaybeMessage<::SendUpgradeFirmware>(Arena*);
template<> ::UpgradeStartRequest* Arena::CreateMaybeMessage<::UpgradeStartRequest>(Arena*);
template<> ::WriteSerialNo* Arena::CreateMaybeMessage<::WriteSerialNo>(Arena*);
template<> ::WriteSerialNoReply* Arena::CreateMaybeMessage<::WriteSerialNoReply>(Arena*);
template<> ::lockSerialNoReply* Arena::CreateMaybeMessage<::lockSerialNoReply>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum DeviceMode : int {
  MODE_BOOTLOADER = 0,
  MODE_APP = 1,
  DeviceMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  DeviceMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool DeviceMode_IsValid(int value);
constexpr DeviceMode DeviceMode_MIN = MODE_BOOTLOADER;
constexpr DeviceMode DeviceMode_MAX = MODE_APP;
constexpr int DeviceMode_ARRAYSIZE = DeviceMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DeviceMode_descriptor();
template<typename T>
inline const std::string& DeviceMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DeviceMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DeviceMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DeviceMode_descriptor(), enum_t_value);
}
inline bool DeviceMode_Parse(
    const std::string& name, DeviceMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DeviceMode>(
    DeviceMode_descriptor(), name, value);
}
enum LockState : int {
  UNKNOWN = 0,
  UNLOCKED = 1,
  LOCKED = 2,
  LockState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LockState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LockState_IsValid(int value);
constexpr LockState LockState_MIN = UNKNOWN;
constexpr LockState LockState_MAX = LOCKED;
constexpr int LockState_ARRAYSIZE = LockState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LockState_descriptor();
template<typename T>
inline const std::string& LockState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LockState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LockState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LockState_descriptor(), enum_t_value);
}
inline bool LockState_Parse(
    const std::string& name, LockState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LockState>(
    LockState_descriptor(), name, value);
}
enum EccAlgorithm : int {
  SECP256K1 = 0,
  EccAlgorithm_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EccAlgorithm_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EccAlgorithm_IsValid(int value);
constexpr EccAlgorithm EccAlgorithm_MIN = SECP256K1;
constexpr EccAlgorithm EccAlgorithm_MAX = SECP256K1;
constexpr int EccAlgorithm_ARRAYSIZE = EccAlgorithm_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EccAlgorithm_descriptor();
template<typename T>
inline const std::string& EccAlgorithm_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EccAlgorithm>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EccAlgorithm_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EccAlgorithm_descriptor(), enum_t_value);
}
inline bool EccAlgorithm_Parse(
    const std::string& name, EccAlgorithm* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EccAlgorithm>(
    EccAlgorithm_descriptor(), name, value);
}
// ===================================================================

class RequestRejected :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RequestRejected) */ {
 public:
  RequestRejected();
  virtual ~RequestRejected();

  RequestRejected(const RequestRejected& from);
  RequestRejected(RequestRejected&& from) noexcept
    : RequestRejected() {
    *this = ::std::move(from);
  }

  inline RequestRejected& operator=(const RequestRejected& from) {
    CopyFrom(from);
    return *this;
  }
  inline RequestRejected& operator=(RequestRejected&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RequestRejected& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RequestRejected* internal_default_instance() {
    return reinterpret_cast<const RequestRejected*>(
               &_RequestRejected_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RequestRejected& a, RequestRejected& b) {
    a.Swap(&b);
  }
  inline void Swap(RequestRejected* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RequestRejected* New() const final {
    return CreateMaybeMessage<RequestRejected>(nullptr);
  }

  RequestRejected* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RequestRejected>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RequestRejected& from);
  void MergeFrom(const RequestRejected& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RequestRejected* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RequestRejected";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kErrMessageFieldNumber = 3,
    kRequestIdFieldNumber = 1,
    kErrCodeFieldNumber = 2,
  };
  // string errMessage = 3;
  void clear_errmessage();
  const std::string& errmessage() const;
  void set_errmessage(const std::string& value);
  void set_errmessage(std::string&& value);
  void set_errmessage(const char* value);
  void set_errmessage(const char* value, size_t size);
  std::string* mutable_errmessage();
  std::string* release_errmessage();
  void set_allocated_errmessage(std::string* errmessage);
  private:
  const std::string& _internal_errmessage() const;
  void _internal_set_errmessage(const std::string& value);
  std::string* _internal_mutable_errmessage();
  public:

  // uint32 requestId = 1;
  void clear_requestid();
  ::PROTOBUF_NAMESPACE_ID::uint32 requestid() const;
  void set_requestid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_requestid() const;
  void _internal_set_requestid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // int32 errCode = 2;
  void clear_errcode();
  ::PROTOBUF_NAMESPACE_ID::int32 errcode() const;
  void set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_errcode() const;
  void _internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:RequestRejected)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr errmessage_;
  ::PROTOBUF_NAMESPACE_ID::uint32 requestid_;
  ::PROTOBUF_NAMESPACE_ID::int32 errcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class GenericConfirmReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GenericConfirmReply) */ {
 public:
  GenericConfirmReply();
  virtual ~GenericConfirmReply();

  GenericConfirmReply(const GenericConfirmReply& from);
  GenericConfirmReply(GenericConfirmReply&& from) noexcept
    : GenericConfirmReply() {
    *this = ::std::move(from);
  }

  inline GenericConfirmReply& operator=(const GenericConfirmReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GenericConfirmReply& operator=(GenericConfirmReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GenericConfirmReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GenericConfirmReply* internal_default_instance() {
    return reinterpret_cast<const GenericConfirmReply*>(
               &_GenericConfirmReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(GenericConfirmReply& a, GenericConfirmReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GenericConfirmReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GenericConfirmReply* New() const final {
    return CreateMaybeMessage<GenericConfirmReply>(nullptr);
  }

  GenericConfirmReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GenericConfirmReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GenericConfirmReply& from);
  void MergeFrom(const GenericConfirmReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GenericConfirmReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GenericConfirmReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:GenericConfirmReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class GetModeAndVersionRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetModeAndVersionRequest) */ {
 public:
  GetModeAndVersionRequest();
  virtual ~GetModeAndVersionRequest();

  GetModeAndVersionRequest(const GetModeAndVersionRequest& from);
  GetModeAndVersionRequest(GetModeAndVersionRequest&& from) noexcept
    : GetModeAndVersionRequest() {
    *this = ::std::move(from);
  }

  inline GetModeAndVersionRequest& operator=(const GetModeAndVersionRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetModeAndVersionRequest& operator=(GetModeAndVersionRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetModeAndVersionRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetModeAndVersionRequest* internal_default_instance() {
    return reinterpret_cast<const GetModeAndVersionRequest*>(
               &_GetModeAndVersionRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(GetModeAndVersionRequest& a, GetModeAndVersionRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(GetModeAndVersionRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetModeAndVersionRequest* New() const final {
    return CreateMaybeMessage<GetModeAndVersionRequest>(nullptr);
  }

  GetModeAndVersionRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetModeAndVersionRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetModeAndVersionRequest& from);
  void MergeFrom(const GetModeAndVersionRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetModeAndVersionRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetModeAndVersionRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:GetModeAndVersionRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class GetModeAndVersionReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:GetModeAndVersionReply) */ {
 public:
  GetModeAndVersionReply();
  virtual ~GetModeAndVersionReply();

  GetModeAndVersionReply(const GetModeAndVersionReply& from);
  GetModeAndVersionReply(GetModeAndVersionReply&& from) noexcept
    : GetModeAndVersionReply() {
    *this = ::std::move(from);
  }

  inline GetModeAndVersionReply& operator=(const GetModeAndVersionReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetModeAndVersionReply& operator=(GetModeAndVersionReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GetModeAndVersionReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GetModeAndVersionReply* internal_default_instance() {
    return reinterpret_cast<const GetModeAndVersionReply*>(
               &_GetModeAndVersionReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(GetModeAndVersionReply& a, GetModeAndVersionReply& b) {
    a.Swap(&b);
  }
  inline void Swap(GetModeAndVersionReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GetModeAndVersionReply* New() const final {
    return CreateMaybeMessage<GetModeAndVersionReply>(nullptr);
  }

  GetModeAndVersionReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GetModeAndVersionReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GetModeAndVersionReply& from);
  void MergeFrom(const GetModeAndVersionReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GetModeAndVersionReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "GetModeAndVersionReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirmwareVersionFieldNumber = 2,
    kDeviceSerialNoFieldNumber = 3,
    kModeFieldNumber = 1,
    kIsLockedFieldNumber = 4,
  };
  // string firmwareVersion = 2;
  void clear_firmwareversion();
  const std::string& firmwareversion() const;
  void set_firmwareversion(const std::string& value);
  void set_firmwareversion(std::string&& value);
  void set_firmwareversion(const char* value);
  void set_firmwareversion(const char* value, size_t size);
  std::string* mutable_firmwareversion();
  std::string* release_firmwareversion();
  void set_allocated_firmwareversion(std::string* firmwareversion);
  private:
  const std::string& _internal_firmwareversion() const;
  void _internal_set_firmwareversion(const std::string& value);
  std::string* _internal_mutable_firmwareversion();
  public:

  // string deviceSerialNo = 3;
  void clear_deviceserialno();
  const std::string& deviceserialno() const;
  void set_deviceserialno(const std::string& value);
  void set_deviceserialno(std::string&& value);
  void set_deviceserialno(const char* value);
  void set_deviceserialno(const char* value, size_t size);
  std::string* mutable_deviceserialno();
  std::string* release_deviceserialno();
  void set_allocated_deviceserialno(std::string* deviceserialno);
  private:
  const std::string& _internal_deviceserialno() const;
  void _internal_set_deviceserialno(const std::string& value);
  std::string* _internal_mutable_deviceserialno();
  public:

  // .DeviceMode mode = 1;
  void clear_mode();
  ::DeviceMode mode() const;
  void set_mode(::DeviceMode value);
  private:
  ::DeviceMode _internal_mode() const;
  void _internal_set_mode(::DeviceMode value);
  public:

  // .LockState isLocked = 4;
  void clear_islocked();
  ::LockState islocked() const;
  void set_islocked(::LockState value);
  private:
  ::LockState _internal_islocked() const;
  void _internal_set_islocked(::LockState value);
  public:

  // @@protoc_insertion_point(class_scope:GetModeAndVersionReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr firmwareversion_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceserialno_;
  int mode_;
  int islocked_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class UpgradeStartRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:UpgradeStartRequest) */ {
 public:
  UpgradeStartRequest();
  virtual ~UpgradeStartRequest();

  UpgradeStartRequest(const UpgradeStartRequest& from);
  UpgradeStartRequest(UpgradeStartRequest&& from) noexcept
    : UpgradeStartRequest() {
    *this = ::std::move(from);
  }

  inline UpgradeStartRequest& operator=(const UpgradeStartRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpgradeStartRequest& operator=(UpgradeStartRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpgradeStartRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpgradeStartRequest* internal_default_instance() {
    return reinterpret_cast<const UpgradeStartRequest*>(
               &_UpgradeStartRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(UpgradeStartRequest& a, UpgradeStartRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(UpgradeStartRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpgradeStartRequest* New() const final {
    return CreateMaybeMessage<UpgradeStartRequest>(nullptr);
  }

  UpgradeStartRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpgradeStartRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpgradeStartRequest& from);
  void MergeFrom(const UpgradeStartRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpgradeStartRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "UpgradeStartRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirmwareVersionFieldNumber = 1,
    kSha256HashFieldNumber = 2,
  };
  // string firmwareVersion = 1;
  void clear_firmwareversion();
  const std::string& firmwareversion() const;
  void set_firmwareversion(const std::string& value);
  void set_firmwareversion(std::string&& value);
  void set_firmwareversion(const char* value);
  void set_firmwareversion(const char* value, size_t size);
  std::string* mutable_firmwareversion();
  std::string* release_firmwareversion();
  void set_allocated_firmwareversion(std::string* firmwareversion);
  private:
  const std::string& _internal_firmwareversion() const;
  void _internal_set_firmwareversion(const std::string& value);
  std::string* _internal_mutable_firmwareversion();
  public:

  // bytes sha256hash = 2;
  void clear_sha256hash();
  const std::string& sha256hash() const;
  void set_sha256hash(const std::string& value);
  void set_sha256hash(std::string&& value);
  void set_sha256hash(const char* value);
  void set_sha256hash(const void* value, size_t size);
  std::string* mutable_sha256hash();
  std::string* release_sha256hash();
  void set_allocated_sha256hash(std::string* sha256hash);
  private:
  const std::string& _internal_sha256hash() const;
  void _internal_set_sha256hash(const std::string& value);
  std::string* _internal_mutable_sha256hash();
  public:

  // @@protoc_insertion_point(class_scope:UpgradeStartRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr firmwareversion_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sha256hash_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class SendUpgradeFirmware :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SendUpgradeFirmware) */ {
 public:
  SendUpgradeFirmware();
  virtual ~SendUpgradeFirmware();

  SendUpgradeFirmware(const SendUpgradeFirmware& from);
  SendUpgradeFirmware(SendUpgradeFirmware&& from) noexcept
    : SendUpgradeFirmware() {
    *this = ::std::move(from);
  }

  inline SendUpgradeFirmware& operator=(const SendUpgradeFirmware& from) {
    CopyFrom(from);
    return *this;
  }
  inline SendUpgradeFirmware& operator=(SendUpgradeFirmware&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SendUpgradeFirmware& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SendUpgradeFirmware* internal_default_instance() {
    return reinterpret_cast<const SendUpgradeFirmware*>(
               &_SendUpgradeFirmware_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SendUpgradeFirmware& a, SendUpgradeFirmware& b) {
    a.Swap(&b);
  }
  inline void Swap(SendUpgradeFirmware* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SendUpgradeFirmware* New() const final {
    return CreateMaybeMessage<SendUpgradeFirmware>(nullptr);
  }

  SendUpgradeFirmware* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SendUpgradeFirmware>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SendUpgradeFirmware& from);
  void MergeFrom(const SendUpgradeFirmware& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SendUpgradeFirmware* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SendUpgradeFirmware";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFirmwareVersionFieldNumber = 1,
    kSha256HashFieldNumber = 2,
    kSignatureFieldNumber = 3,
    kFirmwareFieldNumber = 4,
  };
  // string firmwareVersion = 1;
  void clear_firmwareversion();
  const std::string& firmwareversion() const;
  void set_firmwareversion(const std::string& value);
  void set_firmwareversion(std::string&& value);
  void set_firmwareversion(const char* value);
  void set_firmwareversion(const char* value, size_t size);
  std::string* mutable_firmwareversion();
  std::string* release_firmwareversion();
  void set_allocated_firmwareversion(std::string* firmwareversion);
  private:
  const std::string& _internal_firmwareversion() const;
  void _internal_set_firmwareversion(const std::string& value);
  std::string* _internal_mutable_firmwareversion();
  public:

  // bytes sha256hash = 2;
  void clear_sha256hash();
  const std::string& sha256hash() const;
  void set_sha256hash(const std::string& value);
  void set_sha256hash(std::string&& value);
  void set_sha256hash(const char* value);
  void set_sha256hash(const void* value, size_t size);
  std::string* mutable_sha256hash();
  std::string* release_sha256hash();
  void set_allocated_sha256hash(std::string* sha256hash);
  private:
  const std::string& _internal_sha256hash() const;
  void _internal_set_sha256hash(const std::string& value);
  std::string* _internal_mutable_sha256hash();
  public:

  // bytes signature = 3;
  void clear_signature();
  const std::string& signature() const;
  void set_signature(const std::string& value);
  void set_signature(std::string&& value);
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  std::string* mutable_signature();
  std::string* release_signature();
  void set_allocated_signature(std::string* signature);
  private:
  const std::string& _internal_signature() const;
  void _internal_set_signature(const std::string& value);
  std::string* _internal_mutable_signature();
  public:

  // bytes firmware = 4;
  void clear_firmware();
  const std::string& firmware() const;
  void set_firmware(const std::string& value);
  void set_firmware(std::string&& value);
  void set_firmware(const char* value);
  void set_firmware(const void* value, size_t size);
  std::string* mutable_firmware();
  std::string* release_firmware();
  void set_allocated_firmware(std::string* firmware);
  private:
  const std::string& _internal_firmware() const;
  void _internal_set_firmware(const std::string& value);
  std::string* _internal_mutable_firmware();
  public:

  // @@protoc_insertion_point(class_scope:SendUpgradeFirmware)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr firmwareversion_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sha256hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr signature_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr firmware_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class WriteSerialNo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WriteSerialNo) */ {
 public:
  WriteSerialNo();
  virtual ~WriteSerialNo();

  WriteSerialNo(const WriteSerialNo& from);
  WriteSerialNo(WriteSerialNo&& from) noexcept
    : WriteSerialNo() {
    *this = ::std::move(from);
  }

  inline WriteSerialNo& operator=(const WriteSerialNo& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteSerialNo& operator=(WriteSerialNo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WriteSerialNo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WriteSerialNo* internal_default_instance() {
    return reinterpret_cast<const WriteSerialNo*>(
               &_WriteSerialNo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(WriteSerialNo& a, WriteSerialNo& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteSerialNo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriteSerialNo* New() const final {
    return CreateMaybeMessage<WriteSerialNo>(nullptr);
  }

  WriteSerialNo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriteSerialNo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WriteSerialNo& from);
  void MergeFrom(const WriteSerialNo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteSerialNo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WriteSerialNo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceSerialNoFieldNumber = 1,
  };
  // string deviceSerialNo = 1;
  void clear_deviceserialno();
  const std::string& deviceserialno() const;
  void set_deviceserialno(const std::string& value);
  void set_deviceserialno(std::string&& value);
  void set_deviceserialno(const char* value);
  void set_deviceserialno(const char* value, size_t size);
  std::string* mutable_deviceserialno();
  std::string* release_deviceserialno();
  void set_allocated_deviceserialno(std::string* deviceserialno);
  private:
  const std::string& _internal_deviceserialno() const;
  void _internal_set_deviceserialno(const std::string& value);
  std::string* _internal_mutable_deviceserialno();
  public:

  // @@protoc_insertion_point(class_scope:WriteSerialNo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceserialno_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class WriteSerialNoReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:WriteSerialNoReply) */ {
 public:
  WriteSerialNoReply();
  virtual ~WriteSerialNoReply();

  WriteSerialNoReply(const WriteSerialNoReply& from);
  WriteSerialNoReply(WriteSerialNoReply&& from) noexcept
    : WriteSerialNoReply() {
    *this = ::std::move(from);
  }

  inline WriteSerialNoReply& operator=(const WriteSerialNoReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline WriteSerialNoReply& operator=(WriteSerialNoReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WriteSerialNoReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WriteSerialNoReply* internal_default_instance() {
    return reinterpret_cast<const WriteSerialNoReply*>(
               &_WriteSerialNoReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(WriteSerialNoReply& a, WriteSerialNoReply& b) {
    a.Swap(&b);
  }
  inline void Swap(WriteSerialNoReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WriteSerialNoReply* New() const final {
    return CreateMaybeMessage<WriteSerialNoReply>(nullptr);
  }

  WriteSerialNoReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WriteSerialNoReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WriteSerialNoReply& from);
  void MergeFrom(const WriteSerialNoReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WriteSerialNoReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "WriteSerialNoReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceSerialNoFieldNumber = 2,
    kWriteSuccessFieldNumber = 1,
  };
  // string deviceSerialNo = 2;
  void clear_deviceserialno();
  const std::string& deviceserialno() const;
  void set_deviceserialno(const std::string& value);
  void set_deviceserialno(std::string&& value);
  void set_deviceserialno(const char* value);
  void set_deviceserialno(const char* value, size_t size);
  std::string* mutable_deviceserialno();
  std::string* release_deviceserialno();
  void set_allocated_deviceserialno(std::string* deviceserialno);
  private:
  const std::string& _internal_deviceserialno() const;
  void _internal_set_deviceserialno(const std::string& value);
  std::string* _internal_mutable_deviceserialno();
  public:

  // bool writeSuccess = 1;
  void clear_writesuccess();
  bool writesuccess() const;
  void set_writesuccess(bool value);
  private:
  bool _internal_writesuccess() const;
  void _internal_set_writesuccess(bool value);
  public:

  // @@protoc_insertion_point(class_scope:WriteSerialNoReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceserialno_;
  bool writesuccess_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class LockSerialNo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LockSerialNo) */ {
 public:
  LockSerialNo();
  virtual ~LockSerialNo();

  LockSerialNo(const LockSerialNo& from);
  LockSerialNo(LockSerialNo&& from) noexcept
    : LockSerialNo() {
    *this = ::std::move(from);
  }

  inline LockSerialNo& operator=(const LockSerialNo& from) {
    CopyFrom(from);
    return *this;
  }
  inline LockSerialNo& operator=(LockSerialNo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LockSerialNo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LockSerialNo* internal_default_instance() {
    return reinterpret_cast<const LockSerialNo*>(
               &_LockSerialNo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(LockSerialNo& a, LockSerialNo& b) {
    a.Swap(&b);
  }
  inline void Swap(LockSerialNo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LockSerialNo* New() const final {
    return CreateMaybeMessage<LockSerialNo>(nullptr);
  }

  LockSerialNo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LockSerialNo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LockSerialNo& from);
  void MergeFrom(const LockSerialNo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LockSerialNo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LockSerialNo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:LockSerialNo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class lockSerialNoReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:lockSerialNoReply) */ {
 public:
  lockSerialNoReply();
  virtual ~lockSerialNoReply();

  lockSerialNoReply(const lockSerialNoReply& from);
  lockSerialNoReply(lockSerialNoReply&& from) noexcept
    : lockSerialNoReply() {
    *this = ::std::move(from);
  }

  inline lockSerialNoReply& operator=(const lockSerialNoReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline lockSerialNoReply& operator=(lockSerialNoReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const lockSerialNoReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const lockSerialNoReply* internal_default_instance() {
    return reinterpret_cast<const lockSerialNoReply*>(
               &_lockSerialNoReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(lockSerialNoReply& a, lockSerialNoReply& b) {
    a.Swap(&b);
  }
  inline void Swap(lockSerialNoReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline lockSerialNoReply* New() const final {
    return CreateMaybeMessage<lockSerialNoReply>(nullptr);
  }

  lockSerialNoReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<lockSerialNoReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const lockSerialNoReply& from);
  void MergeFrom(const lockSerialNoReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(lockSerialNoReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "lockSerialNoReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceSerialNoFieldNumber = 2,
    kLockSuccessFieldNumber = 1,
  };
  // string deviceSerialNo = 2;
  void clear_deviceserialno();
  const std::string& deviceserialno() const;
  void set_deviceserialno(const std::string& value);
  void set_deviceserialno(std::string&& value);
  void set_deviceserialno(const char* value);
  void set_deviceserialno(const char* value, size_t size);
  std::string* mutable_deviceserialno();
  std::string* release_deviceserialno();
  void set_allocated_deviceserialno(std::string* deviceserialno);
  private:
  const std::string& _internal_deviceserialno() const;
  void _internal_set_deviceserialno(const std::string& value);
  std::string* _internal_mutable_deviceserialno();
  public:

  // bool lockSuccess = 1;
  void clear_locksuccess();
  bool locksuccess() const;
  void set_locksuccess(bool value);
  private:
  bool _internal_locksuccess() const;
  void _internal_set_locksuccess(bool value);
  public:

  // @@protoc_insertion_point(class_scope:lockSerialNoReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr deviceserialno_;
  bool locksuccess_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class EccSignOptions :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EccSignOptions) */ {
 public:
  EccSignOptions();
  virtual ~EccSignOptions();

  EccSignOptions(const EccSignOptions& from);
  EccSignOptions(EccSignOptions&& from) noexcept
    : EccSignOptions() {
    *this = ::std::move(from);
  }

  inline EccSignOptions& operator=(const EccSignOptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline EccSignOptions& operator=(EccSignOptions&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EccSignOptions& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EccSignOptions* internal_default_instance() {
    return reinterpret_cast<const EccSignOptions*>(
               &_EccSignOptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(EccSignOptions& a, EccSignOptions& b) {
    a.Swap(&b);
  }
  inline void Swap(EccSignOptions* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EccSignOptions* New() const final {
    return CreateMaybeMessage<EccSignOptions>(nullptr);
  }

  EccSignOptions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EccSignOptions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EccSignOptions& from);
  void MergeFrom(const EccSignOptions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EccSignOptions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EccSignOptions";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRfc6979FieldNumber = 1,
    kGrapheneCanonizeFieldNumber = 2,
  };
  // bool rfc6979 = 1;
  void clear_rfc6979();
  bool rfc6979() const;
  void set_rfc6979(bool value);
  private:
  bool _internal_rfc6979() const;
  void _internal_set_rfc6979(bool value);
  public:

  // bool graphene_canonize = 2;
  void clear_graphene_canonize();
  bool graphene_canonize() const;
  void set_graphene_canonize(bool value);
  private:
  bool _internal_graphene_canonize() const;
  void _internal_set_graphene_canonize(bool value);
  public:

  // @@protoc_insertion_point(class_scope:EccSignOptions)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  bool rfc6979_;
  bool graphene_canonize_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class EccSignRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EccSignRequest) */ {
 public:
  EccSignRequest();
  virtual ~EccSignRequest();

  EccSignRequest(const EccSignRequest& from);
  EccSignRequest(EccSignRequest&& from) noexcept
    : EccSignRequest() {
    *this = ::std::move(from);
  }

  inline EccSignRequest& operator=(const EccSignRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EccSignRequest& operator=(EccSignRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EccSignRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EccSignRequest* internal_default_instance() {
    return reinterpret_cast<const EccSignRequest*>(
               &_EccSignRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(EccSignRequest& a, EccSignRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EccSignRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EccSignRequest* New() const final {
    return CreateMaybeMessage<EccSignRequest>(nullptr);
  }

  EccSignRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EccSignRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EccSignRequest& from);
  void MergeFrom(const EccSignRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EccSignRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EccSignRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHdPathFieldNumber = 1,
    kHashFieldNumber = 2,
    kOptionsFieldNumber = 4,
    kAlgorithmFieldNumber = 3,
  };
  // string hdPath = 1;
  void clear_hdpath();
  const std::string& hdpath() const;
  void set_hdpath(const std::string& value);
  void set_hdpath(std::string&& value);
  void set_hdpath(const char* value);
  void set_hdpath(const char* value, size_t size);
  std::string* mutable_hdpath();
  std::string* release_hdpath();
  void set_allocated_hdpath(std::string* hdpath);
  private:
  const std::string& _internal_hdpath() const;
  void _internal_set_hdpath(const std::string& value);
  std::string* _internal_mutable_hdpath();
  public:

  // bytes hash = 2;
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // .EccSignOptions options = 4;
  bool has_options() const;
  private:
  bool _internal_has_options() const;
  public:
  void clear_options();
  const ::EccSignOptions& options() const;
  ::EccSignOptions* release_options();
  ::EccSignOptions* mutable_options();
  void set_allocated_options(::EccSignOptions* options);
  private:
  const ::EccSignOptions& _internal_options() const;
  ::EccSignOptions* _internal_mutable_options();
  public:

  // .EccAlgorithm algorithm = 3;
  void clear_algorithm();
  ::EccAlgorithm algorithm() const;
  void set_algorithm(::EccAlgorithm value);
  private:
  ::EccAlgorithm _internal_algorithm() const;
  void _internal_set_algorithm(::EccAlgorithm value);
  public:

  // @@protoc_insertion_point(class_scope:EccSignRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hdpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::EccSignOptions* options_;
  int algorithm_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class EccSignResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EccSignResult) */ {
 public:
  EccSignResult();
  virtual ~EccSignResult();

  EccSignResult(const EccSignResult& from);
  EccSignResult(EccSignResult&& from) noexcept
    : EccSignResult() {
    *this = ::std::move(from);
  }

  inline EccSignResult& operator=(const EccSignResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline EccSignResult& operator=(EccSignResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EccSignResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EccSignResult* internal_default_instance() {
    return reinterpret_cast<const EccSignResult*>(
               &_EccSignResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(EccSignResult& a, EccSignResult& b) {
    a.Swap(&b);
  }
  inline void Swap(EccSignResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EccSignResult* New() const final {
    return CreateMaybeMessage<EccSignResult>(nullptr);
  }

  EccSignResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EccSignResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EccSignResult& from);
  void MergeFrom(const EccSignResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EccSignResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EccSignResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHdPathFieldNumber = 1,
    kPubkeyFieldNumber = 2,
    kHashFieldNumber = 3,
    kRFieldNumber = 4,
    kSFieldNumber = 5,
    kRecoverParamFieldNumber = 6,
  };
  // string hdPath = 1;
  void clear_hdpath();
  const std::string& hdpath() const;
  void set_hdpath(const std::string& value);
  void set_hdpath(std::string&& value);
  void set_hdpath(const char* value);
  void set_hdpath(const char* value, size_t size);
  std::string* mutable_hdpath();
  std::string* release_hdpath();
  void set_allocated_hdpath(std::string* hdpath);
  private:
  const std::string& _internal_hdpath() const;
  void _internal_set_hdpath(const std::string& value);
  std::string* _internal_mutable_hdpath();
  public:

  // bytes pubkey = 2;
  void clear_pubkey();
  const std::string& pubkey() const;
  void set_pubkey(const std::string& value);
  void set_pubkey(std::string&& value);
  void set_pubkey(const char* value);
  void set_pubkey(const void* value, size_t size);
  std::string* mutable_pubkey();
  std::string* release_pubkey();
  void set_allocated_pubkey(std::string* pubkey);
  private:
  const std::string& _internal_pubkey() const;
  void _internal_set_pubkey(const std::string& value);
  std::string* _internal_mutable_pubkey();
  public:

  // bytes hash = 3;
  void clear_hash();
  const std::string& hash() const;
  void set_hash(const std::string& value);
  void set_hash(std::string&& value);
  void set_hash(const char* value);
  void set_hash(const void* value, size_t size);
  std::string* mutable_hash();
  std::string* release_hash();
  void set_allocated_hash(std::string* hash);
  private:
  const std::string& _internal_hash() const;
  void _internal_set_hash(const std::string& value);
  std::string* _internal_mutable_hash();
  public:

  // bytes R = 4;
  void clear_r();
  const std::string& r() const;
  void set_r(const std::string& value);
  void set_r(std::string&& value);
  void set_r(const char* value);
  void set_r(const void* value, size_t size);
  std::string* mutable_r();
  std::string* release_r();
  void set_allocated_r(std::string* r);
  private:
  const std::string& _internal_r() const;
  void _internal_set_r(const std::string& value);
  std::string* _internal_mutable_r();
  public:

  // bytes S = 5;
  void clear_s();
  const std::string& s() const;
  void set_s(const std::string& value);
  void set_s(std::string&& value);
  void set_s(const char* value);
  void set_s(const void* value, size_t size);
  std::string* mutable_s();
  std::string* release_s();
  void set_allocated_s(std::string* s);
  private:
  const std::string& _internal_s() const;
  void _internal_set_s(const std::string& value);
  std::string* _internal_mutable_s();
  public:

  // uint32 recover_param = 6;
  void clear_recover_param();
  ::PROTOBUF_NAMESPACE_ID::uint32 recover_param() const;
  void set_recover_param(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_recover_param() const;
  void _internal_set_recover_param(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:EccSignResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hdpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pubkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hash_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr r_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr s_;
  ::PROTOBUF_NAMESPACE_ID::uint32 recover_param_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class EccGetPublicKeyRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EccGetPublicKeyRequest) */ {
 public:
  EccGetPublicKeyRequest();
  virtual ~EccGetPublicKeyRequest();

  EccGetPublicKeyRequest(const EccGetPublicKeyRequest& from);
  EccGetPublicKeyRequest(EccGetPublicKeyRequest&& from) noexcept
    : EccGetPublicKeyRequest() {
    *this = ::std::move(from);
  }

  inline EccGetPublicKeyRequest& operator=(const EccGetPublicKeyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EccGetPublicKeyRequest& operator=(EccGetPublicKeyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EccGetPublicKeyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EccGetPublicKeyRequest* internal_default_instance() {
    return reinterpret_cast<const EccGetPublicKeyRequest*>(
               &_EccGetPublicKeyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(EccGetPublicKeyRequest& a, EccGetPublicKeyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EccGetPublicKeyRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EccGetPublicKeyRequest* New() const final {
    return CreateMaybeMessage<EccGetPublicKeyRequest>(nullptr);
  }

  EccGetPublicKeyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EccGetPublicKeyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EccGetPublicKeyRequest& from);
  void MergeFrom(const EccGetPublicKeyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EccGetPublicKeyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EccGetPublicKeyRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHdPathFieldNumber = 1,
    kAlgorithmFieldNumber = 2,
  };
  // string hdPath = 1;
  void clear_hdpath();
  const std::string& hdpath() const;
  void set_hdpath(const std::string& value);
  void set_hdpath(std::string&& value);
  void set_hdpath(const char* value);
  void set_hdpath(const char* value, size_t size);
  std::string* mutable_hdpath();
  std::string* release_hdpath();
  void set_allocated_hdpath(std::string* hdpath);
  private:
  const std::string& _internal_hdpath() const;
  void _internal_set_hdpath(const std::string& value);
  std::string* _internal_mutable_hdpath();
  public:

  // .EccAlgorithm algorithm = 2;
  void clear_algorithm();
  ::EccAlgorithm algorithm() const;
  void set_algorithm(::EccAlgorithm value);
  private:
  ::EccAlgorithm _internal_algorithm() const;
  void _internal_set_algorithm(::EccAlgorithm value);
  public:

  // @@protoc_insertion_point(class_scope:EccGetPublicKeyRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hdpath_;
  int algorithm_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class EccGetPublicKeyReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EccGetPublicKeyReply) */ {
 public:
  EccGetPublicKeyReply();
  virtual ~EccGetPublicKeyReply();

  EccGetPublicKeyReply(const EccGetPublicKeyReply& from);
  EccGetPublicKeyReply(EccGetPublicKeyReply&& from) noexcept
    : EccGetPublicKeyReply() {
    *this = ::std::move(from);
  }

  inline EccGetPublicKeyReply& operator=(const EccGetPublicKeyReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline EccGetPublicKeyReply& operator=(EccGetPublicKeyReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EccGetPublicKeyReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EccGetPublicKeyReply* internal_default_instance() {
    return reinterpret_cast<const EccGetPublicKeyReply*>(
               &_EccGetPublicKeyReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(EccGetPublicKeyReply& a, EccGetPublicKeyReply& b) {
    a.Swap(&b);
  }
  inline void Swap(EccGetPublicKeyReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EccGetPublicKeyReply* New() const final {
    return CreateMaybeMessage<EccGetPublicKeyReply>(nullptr);
  }

  EccGetPublicKeyReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EccGetPublicKeyReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EccGetPublicKeyReply& from);
  void MergeFrom(const EccGetPublicKeyReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EccGetPublicKeyReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EccGetPublicKeyReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHdPathFieldNumber = 1,
    kPubkeyFieldNumber = 3,
    kAlgorithmFieldNumber = 2,
  };
  // string hdPath = 1;
  void clear_hdpath();
  const std::string& hdpath() const;
  void set_hdpath(const std::string& value);
  void set_hdpath(std::string&& value);
  void set_hdpath(const char* value);
  void set_hdpath(const char* value, size_t size);
  std::string* mutable_hdpath();
  std::string* release_hdpath();
  void set_allocated_hdpath(std::string* hdpath);
  private:
  const std::string& _internal_hdpath() const;
  void _internal_set_hdpath(const std::string& value);
  std::string* _internal_mutable_hdpath();
  public:

  // bytes pubkey = 3;
  void clear_pubkey();
  const std::string& pubkey() const;
  void set_pubkey(const std::string& value);
  void set_pubkey(std::string&& value);
  void set_pubkey(const char* value);
  void set_pubkey(const void* value, size_t size);
  std::string* mutable_pubkey();
  std::string* release_pubkey();
  void set_allocated_pubkey(std::string* pubkey);
  private:
  const std::string& _internal_pubkey() const;
  void _internal_set_pubkey(const std::string& value);
  std::string* _internal_mutable_pubkey();
  public:

  // .EccAlgorithm algorithm = 2;
  void clear_algorithm();
  ::EccAlgorithm algorithm() const;
  void set_algorithm(::EccAlgorithm value);
  private:
  ::EccAlgorithm _internal_algorithm() const;
  void _internal_set_algorithm(::EccAlgorithm value);
  public:

  // @@protoc_insertion_point(class_scope:EccGetPublicKeyReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hdpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pubkey_;
  int algorithm_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class EccGetExtendedPublicKeyRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EccGetExtendedPublicKeyRequest) */ {
 public:
  EccGetExtendedPublicKeyRequest();
  virtual ~EccGetExtendedPublicKeyRequest();

  EccGetExtendedPublicKeyRequest(const EccGetExtendedPublicKeyRequest& from);
  EccGetExtendedPublicKeyRequest(EccGetExtendedPublicKeyRequest&& from) noexcept
    : EccGetExtendedPublicKeyRequest() {
    *this = ::std::move(from);
  }

  inline EccGetExtendedPublicKeyRequest& operator=(const EccGetExtendedPublicKeyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EccGetExtendedPublicKeyRequest& operator=(EccGetExtendedPublicKeyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EccGetExtendedPublicKeyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EccGetExtendedPublicKeyRequest* internal_default_instance() {
    return reinterpret_cast<const EccGetExtendedPublicKeyRequest*>(
               &_EccGetExtendedPublicKeyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(EccGetExtendedPublicKeyRequest& a, EccGetExtendedPublicKeyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EccGetExtendedPublicKeyRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EccGetExtendedPublicKeyRequest* New() const final {
    return CreateMaybeMessage<EccGetExtendedPublicKeyRequest>(nullptr);
  }

  EccGetExtendedPublicKeyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EccGetExtendedPublicKeyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EccGetExtendedPublicKeyRequest& from);
  void MergeFrom(const EccGetExtendedPublicKeyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EccGetExtendedPublicKeyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EccGetExtendedPublicKeyRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHdPathFieldNumber = 1,
    kAlgorithmFieldNumber = 2,
  };
  // string hdPath = 1;
  void clear_hdpath();
  const std::string& hdpath() const;
  void set_hdpath(const std::string& value);
  void set_hdpath(std::string&& value);
  void set_hdpath(const char* value);
  void set_hdpath(const char* value, size_t size);
  std::string* mutable_hdpath();
  std::string* release_hdpath();
  void set_allocated_hdpath(std::string* hdpath);
  private:
  const std::string& _internal_hdpath() const;
  void _internal_set_hdpath(const std::string& value);
  std::string* _internal_mutable_hdpath();
  public:

  // .EccAlgorithm algorithm = 2;
  void clear_algorithm();
  ::EccAlgorithm algorithm() const;
  void set_algorithm(::EccAlgorithm value);
  private:
  ::EccAlgorithm _internal_algorithm() const;
  void _internal_set_algorithm(::EccAlgorithm value);
  public:

  // @@protoc_insertion_point(class_scope:EccGetExtendedPublicKeyRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hdpath_;
  int algorithm_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class EccGetExtendedPublicKeyReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EccGetExtendedPublicKeyReply) */ {
 public:
  EccGetExtendedPublicKeyReply();
  virtual ~EccGetExtendedPublicKeyReply();

  EccGetExtendedPublicKeyReply(const EccGetExtendedPublicKeyReply& from);
  EccGetExtendedPublicKeyReply(EccGetExtendedPublicKeyReply&& from) noexcept
    : EccGetExtendedPublicKeyReply() {
    *this = ::std::move(from);
  }

  inline EccGetExtendedPublicKeyReply& operator=(const EccGetExtendedPublicKeyReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline EccGetExtendedPublicKeyReply& operator=(EccGetExtendedPublicKeyReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EccGetExtendedPublicKeyReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EccGetExtendedPublicKeyReply* internal_default_instance() {
    return reinterpret_cast<const EccGetExtendedPublicKeyReply*>(
               &_EccGetExtendedPublicKeyReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(EccGetExtendedPublicKeyReply& a, EccGetExtendedPublicKeyReply& b) {
    a.Swap(&b);
  }
  inline void Swap(EccGetExtendedPublicKeyReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EccGetExtendedPublicKeyReply* New() const final {
    return CreateMaybeMessage<EccGetExtendedPublicKeyReply>(nullptr);
  }

  EccGetExtendedPublicKeyReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EccGetExtendedPublicKeyReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EccGetExtendedPublicKeyReply& from);
  void MergeFrom(const EccGetExtendedPublicKeyReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EccGetExtendedPublicKeyReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EccGetExtendedPublicKeyReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHdPathFieldNumber = 1,
    kPubkeyFieldNumber = 3,
    kChainCodeFieldNumber = 4,
    kAlgorithmFieldNumber = 2,
  };
  // string hdPath = 1;
  void clear_hdpath();
  const std::string& hdpath() const;
  void set_hdpath(const std::string& value);
  void set_hdpath(std::string&& value);
  void set_hdpath(const char* value);
  void set_hdpath(const char* value, size_t size);
  std::string* mutable_hdpath();
  std::string* release_hdpath();
  void set_allocated_hdpath(std::string* hdpath);
  private:
  const std::string& _internal_hdpath() const;
  void _internal_set_hdpath(const std::string& value);
  std::string* _internal_mutable_hdpath();
  public:

  // bytes pubkey = 3;
  void clear_pubkey();
  const std::string& pubkey() const;
  void set_pubkey(const std::string& value);
  void set_pubkey(std::string&& value);
  void set_pubkey(const char* value);
  void set_pubkey(const void* value, size_t size);
  std::string* mutable_pubkey();
  std::string* release_pubkey();
  void set_allocated_pubkey(std::string* pubkey);
  private:
  const std::string& _internal_pubkey() const;
  void _internal_set_pubkey(const std::string& value);
  std::string* _internal_mutable_pubkey();
  public:

  // bytes chainCode = 4;
  void clear_chaincode();
  const std::string& chaincode() const;
  void set_chaincode(const std::string& value);
  void set_chaincode(std::string&& value);
  void set_chaincode(const char* value);
  void set_chaincode(const void* value, size_t size);
  std::string* mutable_chaincode();
  std::string* release_chaincode();
  void set_allocated_chaincode(std::string* chaincode);
  private:
  const std::string& _internal_chaincode() const;
  void _internal_set_chaincode(const std::string& value);
  std::string* _internal_mutable_chaincode();
  public:

  // .EccAlgorithm algorithm = 2;
  void clear_algorithm();
  ::EccAlgorithm algorithm() const;
  void set_algorithm(::EccAlgorithm value);
  private:
  ::EccAlgorithm _internal_algorithm() const;
  void _internal_set_algorithm(::EccAlgorithm value);
  public:

  // @@protoc_insertion_point(class_scope:EccGetExtendedPublicKeyReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hdpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pubkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chaincode_;
  int algorithm_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class EccMultiplyRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EccMultiplyRequest) */ {
 public:
  EccMultiplyRequest();
  virtual ~EccMultiplyRequest();

  EccMultiplyRequest(const EccMultiplyRequest& from);
  EccMultiplyRequest(EccMultiplyRequest&& from) noexcept
    : EccMultiplyRequest() {
    *this = ::std::move(from);
  }

  inline EccMultiplyRequest& operator=(const EccMultiplyRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EccMultiplyRequest& operator=(EccMultiplyRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EccMultiplyRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EccMultiplyRequest* internal_default_instance() {
    return reinterpret_cast<const EccMultiplyRequest*>(
               &_EccMultiplyRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(EccMultiplyRequest& a, EccMultiplyRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EccMultiplyRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EccMultiplyRequest* New() const final {
    return CreateMaybeMessage<EccMultiplyRequest>(nullptr);
  }

  EccMultiplyRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EccMultiplyRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EccMultiplyRequest& from);
  void MergeFrom(const EccMultiplyRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EccMultiplyRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EccMultiplyRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHdPathFieldNumber = 1,
    kInputPubkeyFieldNumber = 3,
    kAlgorithmFieldNumber = 2,
  };
  // string hdPath = 1;
  void clear_hdpath();
  const std::string& hdpath() const;
  void set_hdpath(const std::string& value);
  void set_hdpath(std::string&& value);
  void set_hdpath(const char* value);
  void set_hdpath(const char* value, size_t size);
  std::string* mutable_hdpath();
  std::string* release_hdpath();
  void set_allocated_hdpath(std::string* hdpath);
  private:
  const std::string& _internal_hdpath() const;
  void _internal_set_hdpath(const std::string& value);
  std::string* _internal_mutable_hdpath();
  public:

  // bytes input_pubkey = 3;
  void clear_input_pubkey();
  const std::string& input_pubkey() const;
  void set_input_pubkey(const std::string& value);
  void set_input_pubkey(std::string&& value);
  void set_input_pubkey(const char* value);
  void set_input_pubkey(const void* value, size_t size);
  std::string* mutable_input_pubkey();
  std::string* release_input_pubkey();
  void set_allocated_input_pubkey(std::string* input_pubkey);
  private:
  const std::string& _internal_input_pubkey() const;
  void _internal_set_input_pubkey(const std::string& value);
  std::string* _internal_mutable_input_pubkey();
  public:

  // .EccAlgorithm algorithm = 2;
  void clear_algorithm();
  ::EccAlgorithm algorithm() const;
  void set_algorithm(::EccAlgorithm value);
  private:
  ::EccAlgorithm _internal_algorithm() const;
  void _internal_set_algorithm(::EccAlgorithm value);
  public:

  // @@protoc_insertion_point(class_scope:EccMultiplyRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hdpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_pubkey_;
  int algorithm_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class EccMultiplyReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EccMultiplyReply) */ {
 public:
  EccMultiplyReply();
  virtual ~EccMultiplyReply();

  EccMultiplyReply(const EccMultiplyReply& from);
  EccMultiplyReply(EccMultiplyReply&& from) noexcept
    : EccMultiplyReply() {
    *this = ::std::move(from);
  }

  inline EccMultiplyReply& operator=(const EccMultiplyReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline EccMultiplyReply& operator=(EccMultiplyReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EccMultiplyReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EccMultiplyReply* internal_default_instance() {
    return reinterpret_cast<const EccMultiplyReply*>(
               &_EccMultiplyReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(EccMultiplyReply& a, EccMultiplyReply& b) {
    a.Swap(&b);
  }
  inline void Swap(EccMultiplyReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EccMultiplyReply* New() const final {
    return CreateMaybeMessage<EccMultiplyReply>(nullptr);
  }

  EccMultiplyReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EccMultiplyReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EccMultiplyReply& from);
  void MergeFrom(const EccMultiplyReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EccMultiplyReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EccMultiplyReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHdPathFieldNumber = 1,
    kInputPubkeyFieldNumber = 3,
    kDevPubkeyFieldNumber = 4,
    kResultFieldNumber = 5,
    kAlgorithmFieldNumber = 2,
  };
  // string hdPath = 1;
  void clear_hdpath();
  const std::string& hdpath() const;
  void set_hdpath(const std::string& value);
  void set_hdpath(std::string&& value);
  void set_hdpath(const char* value);
  void set_hdpath(const char* value, size_t size);
  std::string* mutable_hdpath();
  std::string* release_hdpath();
  void set_allocated_hdpath(std::string* hdpath);
  private:
  const std::string& _internal_hdpath() const;
  void _internal_set_hdpath(const std::string& value);
  std::string* _internal_mutable_hdpath();
  public:

  // bytes input_pubkey = 3;
  void clear_input_pubkey();
  const std::string& input_pubkey() const;
  void set_input_pubkey(const std::string& value);
  void set_input_pubkey(std::string&& value);
  void set_input_pubkey(const char* value);
  void set_input_pubkey(const void* value, size_t size);
  std::string* mutable_input_pubkey();
  std::string* release_input_pubkey();
  void set_allocated_input_pubkey(std::string* input_pubkey);
  private:
  const std::string& _internal_input_pubkey() const;
  void _internal_set_input_pubkey(const std::string& value);
  std::string* _internal_mutable_input_pubkey();
  public:

  // bytes dev_pubkey = 4;
  void clear_dev_pubkey();
  const std::string& dev_pubkey() const;
  void set_dev_pubkey(const std::string& value);
  void set_dev_pubkey(std::string&& value);
  void set_dev_pubkey(const char* value);
  void set_dev_pubkey(const void* value, size_t size);
  std::string* mutable_dev_pubkey();
  std::string* release_dev_pubkey();
  void set_allocated_dev_pubkey(std::string* dev_pubkey);
  private:
  const std::string& _internal_dev_pubkey() const;
  void _internal_set_dev_pubkey(const std::string& value);
  std::string* _internal_mutable_dev_pubkey();
  public:

  // bytes result = 5;
  void clear_result();
  const std::string& result() const;
  void set_result(const std::string& value);
  void set_result(std::string&& value);
  void set_result(const char* value);
  void set_result(const void* value, size_t size);
  std::string* mutable_result();
  std::string* release_result();
  void set_allocated_result(std::string* result);
  private:
  const std::string& _internal_result() const;
  void _internal_set_result(const std::string& value);
  std::string* _internal_mutable_result();
  public:

  // .EccAlgorithm algorithm = 2;
  void clear_algorithm();
  ::EccAlgorithm algorithm() const;
  void set_algorithm(::EccAlgorithm value);
  private:
  ::EccAlgorithm _internal_algorithm() const;
  void _internal_set_algorithm(::EccAlgorithm value);
  public:

  // @@protoc_insertion_point(class_scope:EccMultiplyReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr hdpath_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr input_pubkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dev_pubkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_;
  int algorithm_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// -------------------------------------------------------------------

class EraseDataRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:EraseDataRequest) */ {
 public:
  EraseDataRequest();
  virtual ~EraseDataRequest();

  EraseDataRequest(const EraseDataRequest& from);
  EraseDataRequest(EraseDataRequest&& from) noexcept
    : EraseDataRequest() {
    *this = ::std::move(from);
  }

  inline EraseDataRequest& operator=(const EraseDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline EraseDataRequest& operator=(EraseDataRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EraseDataRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EraseDataRequest* internal_default_instance() {
    return reinterpret_cast<const EraseDataRequest*>(
               &_EraseDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(EraseDataRequest& a, EraseDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(EraseDataRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline EraseDataRequest* New() const final {
    return CreateMaybeMessage<EraseDataRequest>(nullptr);
  }

  EraseDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EraseDataRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EraseDataRequest& from);
  void MergeFrom(const EraseDataRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EraseDataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "EraseDataRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_messages_2eproto);
    return ::descriptor_table_messages_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:EraseDataRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_messages_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RequestRejected

// uint32 requestId = 1;
inline void RequestRejected::clear_requestid() {
  requestid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestRejected::_internal_requestid() const {
  return requestid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RequestRejected::requestid() const {
  // @@protoc_insertion_point(field_get:RequestRejected.requestId)
  return _internal_requestid();
}
inline void RequestRejected::_internal_set_requestid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  requestid_ = value;
}
inline void RequestRejected::set_requestid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_requestid(value);
  // @@protoc_insertion_point(field_set:RequestRejected.requestId)
}

// int32 errCode = 2;
inline void RequestRejected::clear_errcode() {
  errcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestRejected::_internal_errcode() const {
  return errcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RequestRejected::errcode() const {
  // @@protoc_insertion_point(field_get:RequestRejected.errCode)
  return _internal_errcode();
}
inline void RequestRejected::_internal_set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  errcode_ = value;
}
inline void RequestRejected::set_errcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_errcode(value);
  // @@protoc_insertion_point(field_set:RequestRejected.errCode)
}

// string errMessage = 3;
inline void RequestRejected::clear_errmessage() {
  errmessage_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& RequestRejected::errmessage() const {
  // @@protoc_insertion_point(field_get:RequestRejected.errMessage)
  return _internal_errmessage();
}
inline void RequestRejected::set_errmessage(const std::string& value) {
  _internal_set_errmessage(value);
  // @@protoc_insertion_point(field_set:RequestRejected.errMessage)
}
inline std::string* RequestRejected::mutable_errmessage() {
  // @@protoc_insertion_point(field_mutable:RequestRejected.errMessage)
  return _internal_mutable_errmessage();
}
inline const std::string& RequestRejected::_internal_errmessage() const {
  return errmessage_.GetNoArena();
}
inline void RequestRejected::_internal_set_errmessage(const std::string& value) {
  
  errmessage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void RequestRejected::set_errmessage(std::string&& value) {
  
  errmessage_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:RequestRejected.errMessage)
}
inline void RequestRejected::set_errmessage(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  errmessage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:RequestRejected.errMessage)
}
inline void RequestRejected::set_errmessage(const char* value, size_t size) {
  
  errmessage_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:RequestRejected.errMessage)
}
inline std::string* RequestRejected::_internal_mutable_errmessage() {
  
  return errmessage_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* RequestRejected::release_errmessage() {
  // @@protoc_insertion_point(field_release:RequestRejected.errMessage)
  
  return errmessage_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void RequestRejected::set_allocated_errmessage(std::string* errmessage) {
  if (errmessage != nullptr) {
    
  } else {
    
  }
  errmessage_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), errmessage);
  // @@protoc_insertion_point(field_set_allocated:RequestRejected.errMessage)
}

// -------------------------------------------------------------------

// GenericConfirmReply

// -------------------------------------------------------------------

// GetModeAndVersionRequest

// -------------------------------------------------------------------

// GetModeAndVersionReply

// .DeviceMode mode = 1;
inline void GetModeAndVersionReply::clear_mode() {
  mode_ = 0;
}
inline ::DeviceMode GetModeAndVersionReply::_internal_mode() const {
  return static_cast< ::DeviceMode >(mode_);
}
inline ::DeviceMode GetModeAndVersionReply::mode() const {
  // @@protoc_insertion_point(field_get:GetModeAndVersionReply.mode)
  return _internal_mode();
}
inline void GetModeAndVersionReply::_internal_set_mode(::DeviceMode value) {
  
  mode_ = value;
}
inline void GetModeAndVersionReply::set_mode(::DeviceMode value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:GetModeAndVersionReply.mode)
}

// string firmwareVersion = 2;
inline void GetModeAndVersionReply::clear_firmwareversion() {
  firmwareversion_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetModeAndVersionReply::firmwareversion() const {
  // @@protoc_insertion_point(field_get:GetModeAndVersionReply.firmwareVersion)
  return _internal_firmwareversion();
}
inline void GetModeAndVersionReply::set_firmwareversion(const std::string& value) {
  _internal_set_firmwareversion(value);
  // @@protoc_insertion_point(field_set:GetModeAndVersionReply.firmwareVersion)
}
inline std::string* GetModeAndVersionReply::mutable_firmwareversion() {
  // @@protoc_insertion_point(field_mutable:GetModeAndVersionReply.firmwareVersion)
  return _internal_mutable_firmwareversion();
}
inline const std::string& GetModeAndVersionReply::_internal_firmwareversion() const {
  return firmwareversion_.GetNoArena();
}
inline void GetModeAndVersionReply::_internal_set_firmwareversion(const std::string& value) {
  
  firmwareversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetModeAndVersionReply::set_firmwareversion(std::string&& value) {
  
  firmwareversion_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetModeAndVersionReply.firmwareVersion)
}
inline void GetModeAndVersionReply::set_firmwareversion(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  firmwareversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetModeAndVersionReply.firmwareVersion)
}
inline void GetModeAndVersionReply::set_firmwareversion(const char* value, size_t size) {
  
  firmwareversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetModeAndVersionReply.firmwareVersion)
}
inline std::string* GetModeAndVersionReply::_internal_mutable_firmwareversion() {
  
  return firmwareversion_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetModeAndVersionReply::release_firmwareversion() {
  // @@protoc_insertion_point(field_release:GetModeAndVersionReply.firmwareVersion)
  
  return firmwareversion_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetModeAndVersionReply::set_allocated_firmwareversion(std::string* firmwareversion) {
  if (firmwareversion != nullptr) {
    
  } else {
    
  }
  firmwareversion_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), firmwareversion);
  // @@protoc_insertion_point(field_set_allocated:GetModeAndVersionReply.firmwareVersion)
}

// string deviceSerialNo = 3;
inline void GetModeAndVersionReply::clear_deviceserialno() {
  deviceserialno_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& GetModeAndVersionReply::deviceserialno() const {
  // @@protoc_insertion_point(field_get:GetModeAndVersionReply.deviceSerialNo)
  return _internal_deviceserialno();
}
inline void GetModeAndVersionReply::set_deviceserialno(const std::string& value) {
  _internal_set_deviceserialno(value);
  // @@protoc_insertion_point(field_set:GetModeAndVersionReply.deviceSerialNo)
}
inline std::string* GetModeAndVersionReply::mutable_deviceserialno() {
  // @@protoc_insertion_point(field_mutable:GetModeAndVersionReply.deviceSerialNo)
  return _internal_mutable_deviceserialno();
}
inline const std::string& GetModeAndVersionReply::_internal_deviceserialno() const {
  return deviceserialno_.GetNoArena();
}
inline void GetModeAndVersionReply::_internal_set_deviceserialno(const std::string& value) {
  
  deviceserialno_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void GetModeAndVersionReply::set_deviceserialno(std::string&& value) {
  
  deviceserialno_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:GetModeAndVersionReply.deviceSerialNo)
}
inline void GetModeAndVersionReply::set_deviceserialno(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deviceserialno_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:GetModeAndVersionReply.deviceSerialNo)
}
inline void GetModeAndVersionReply::set_deviceserialno(const char* value, size_t size) {
  
  deviceserialno_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:GetModeAndVersionReply.deviceSerialNo)
}
inline std::string* GetModeAndVersionReply::_internal_mutable_deviceserialno() {
  
  return deviceserialno_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* GetModeAndVersionReply::release_deviceserialno() {
  // @@protoc_insertion_point(field_release:GetModeAndVersionReply.deviceSerialNo)
  
  return deviceserialno_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void GetModeAndVersionReply::set_allocated_deviceserialno(std::string* deviceserialno) {
  if (deviceserialno != nullptr) {
    
  } else {
    
  }
  deviceserialno_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deviceserialno);
  // @@protoc_insertion_point(field_set_allocated:GetModeAndVersionReply.deviceSerialNo)
}

// .LockState isLocked = 4;
inline void GetModeAndVersionReply::clear_islocked() {
  islocked_ = 0;
}
inline ::LockState GetModeAndVersionReply::_internal_islocked() const {
  return static_cast< ::LockState >(islocked_);
}
inline ::LockState GetModeAndVersionReply::islocked() const {
  // @@protoc_insertion_point(field_get:GetModeAndVersionReply.isLocked)
  return _internal_islocked();
}
inline void GetModeAndVersionReply::_internal_set_islocked(::LockState value) {
  
  islocked_ = value;
}
inline void GetModeAndVersionReply::set_islocked(::LockState value) {
  _internal_set_islocked(value);
  // @@protoc_insertion_point(field_set:GetModeAndVersionReply.isLocked)
}

// -------------------------------------------------------------------

// UpgradeStartRequest

// string firmwareVersion = 1;
inline void UpgradeStartRequest::clear_firmwareversion() {
  firmwareversion_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UpgradeStartRequest::firmwareversion() const {
  // @@protoc_insertion_point(field_get:UpgradeStartRequest.firmwareVersion)
  return _internal_firmwareversion();
}
inline void UpgradeStartRequest::set_firmwareversion(const std::string& value) {
  _internal_set_firmwareversion(value);
  // @@protoc_insertion_point(field_set:UpgradeStartRequest.firmwareVersion)
}
inline std::string* UpgradeStartRequest::mutable_firmwareversion() {
  // @@protoc_insertion_point(field_mutable:UpgradeStartRequest.firmwareVersion)
  return _internal_mutable_firmwareversion();
}
inline const std::string& UpgradeStartRequest::_internal_firmwareversion() const {
  return firmwareversion_.GetNoArena();
}
inline void UpgradeStartRequest::_internal_set_firmwareversion(const std::string& value) {
  
  firmwareversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UpgradeStartRequest::set_firmwareversion(std::string&& value) {
  
  firmwareversion_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UpgradeStartRequest.firmwareVersion)
}
inline void UpgradeStartRequest::set_firmwareversion(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  firmwareversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UpgradeStartRequest.firmwareVersion)
}
inline void UpgradeStartRequest::set_firmwareversion(const char* value, size_t size) {
  
  firmwareversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UpgradeStartRequest.firmwareVersion)
}
inline std::string* UpgradeStartRequest::_internal_mutable_firmwareversion() {
  
  return firmwareversion_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpgradeStartRequest::release_firmwareversion() {
  // @@protoc_insertion_point(field_release:UpgradeStartRequest.firmwareVersion)
  
  return firmwareversion_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpgradeStartRequest::set_allocated_firmwareversion(std::string* firmwareversion) {
  if (firmwareversion != nullptr) {
    
  } else {
    
  }
  firmwareversion_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), firmwareversion);
  // @@protoc_insertion_point(field_set_allocated:UpgradeStartRequest.firmwareVersion)
}

// bytes sha256hash = 2;
inline void UpgradeStartRequest::clear_sha256hash() {
  sha256hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& UpgradeStartRequest::sha256hash() const {
  // @@protoc_insertion_point(field_get:UpgradeStartRequest.sha256hash)
  return _internal_sha256hash();
}
inline void UpgradeStartRequest::set_sha256hash(const std::string& value) {
  _internal_set_sha256hash(value);
  // @@protoc_insertion_point(field_set:UpgradeStartRequest.sha256hash)
}
inline std::string* UpgradeStartRequest::mutable_sha256hash() {
  // @@protoc_insertion_point(field_mutable:UpgradeStartRequest.sha256hash)
  return _internal_mutable_sha256hash();
}
inline const std::string& UpgradeStartRequest::_internal_sha256hash() const {
  return sha256hash_.GetNoArena();
}
inline void UpgradeStartRequest::_internal_set_sha256hash(const std::string& value) {
  
  sha256hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void UpgradeStartRequest::set_sha256hash(std::string&& value) {
  
  sha256hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:UpgradeStartRequest.sha256hash)
}
inline void UpgradeStartRequest::set_sha256hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sha256hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:UpgradeStartRequest.sha256hash)
}
inline void UpgradeStartRequest::set_sha256hash(const void* value, size_t size) {
  
  sha256hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:UpgradeStartRequest.sha256hash)
}
inline std::string* UpgradeStartRequest::_internal_mutable_sha256hash() {
  
  return sha256hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* UpgradeStartRequest::release_sha256hash() {
  // @@protoc_insertion_point(field_release:UpgradeStartRequest.sha256hash)
  
  return sha256hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void UpgradeStartRequest::set_allocated_sha256hash(std::string* sha256hash) {
  if (sha256hash != nullptr) {
    
  } else {
    
  }
  sha256hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sha256hash);
  // @@protoc_insertion_point(field_set_allocated:UpgradeStartRequest.sha256hash)
}

// -------------------------------------------------------------------

// SendUpgradeFirmware

// string firmwareVersion = 1;
inline void SendUpgradeFirmware::clear_firmwareversion() {
  firmwareversion_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SendUpgradeFirmware::firmwareversion() const {
  // @@protoc_insertion_point(field_get:SendUpgradeFirmware.firmwareVersion)
  return _internal_firmwareversion();
}
inline void SendUpgradeFirmware::set_firmwareversion(const std::string& value) {
  _internal_set_firmwareversion(value);
  // @@protoc_insertion_point(field_set:SendUpgradeFirmware.firmwareVersion)
}
inline std::string* SendUpgradeFirmware::mutable_firmwareversion() {
  // @@protoc_insertion_point(field_mutable:SendUpgradeFirmware.firmwareVersion)
  return _internal_mutable_firmwareversion();
}
inline const std::string& SendUpgradeFirmware::_internal_firmwareversion() const {
  return firmwareversion_.GetNoArena();
}
inline void SendUpgradeFirmware::_internal_set_firmwareversion(const std::string& value) {
  
  firmwareversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SendUpgradeFirmware::set_firmwareversion(std::string&& value) {
  
  firmwareversion_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SendUpgradeFirmware.firmwareVersion)
}
inline void SendUpgradeFirmware::set_firmwareversion(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  firmwareversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SendUpgradeFirmware.firmwareVersion)
}
inline void SendUpgradeFirmware::set_firmwareversion(const char* value, size_t size) {
  
  firmwareversion_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SendUpgradeFirmware.firmwareVersion)
}
inline std::string* SendUpgradeFirmware::_internal_mutable_firmwareversion() {
  
  return firmwareversion_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SendUpgradeFirmware::release_firmwareversion() {
  // @@protoc_insertion_point(field_release:SendUpgradeFirmware.firmwareVersion)
  
  return firmwareversion_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SendUpgradeFirmware::set_allocated_firmwareversion(std::string* firmwareversion) {
  if (firmwareversion != nullptr) {
    
  } else {
    
  }
  firmwareversion_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), firmwareversion);
  // @@protoc_insertion_point(field_set_allocated:SendUpgradeFirmware.firmwareVersion)
}

// bytes sha256hash = 2;
inline void SendUpgradeFirmware::clear_sha256hash() {
  sha256hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SendUpgradeFirmware::sha256hash() const {
  // @@protoc_insertion_point(field_get:SendUpgradeFirmware.sha256hash)
  return _internal_sha256hash();
}
inline void SendUpgradeFirmware::set_sha256hash(const std::string& value) {
  _internal_set_sha256hash(value);
  // @@protoc_insertion_point(field_set:SendUpgradeFirmware.sha256hash)
}
inline std::string* SendUpgradeFirmware::mutable_sha256hash() {
  // @@protoc_insertion_point(field_mutable:SendUpgradeFirmware.sha256hash)
  return _internal_mutable_sha256hash();
}
inline const std::string& SendUpgradeFirmware::_internal_sha256hash() const {
  return sha256hash_.GetNoArena();
}
inline void SendUpgradeFirmware::_internal_set_sha256hash(const std::string& value) {
  
  sha256hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SendUpgradeFirmware::set_sha256hash(std::string&& value) {
  
  sha256hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SendUpgradeFirmware.sha256hash)
}
inline void SendUpgradeFirmware::set_sha256hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  sha256hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SendUpgradeFirmware.sha256hash)
}
inline void SendUpgradeFirmware::set_sha256hash(const void* value, size_t size) {
  
  sha256hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SendUpgradeFirmware.sha256hash)
}
inline std::string* SendUpgradeFirmware::_internal_mutable_sha256hash() {
  
  return sha256hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SendUpgradeFirmware::release_sha256hash() {
  // @@protoc_insertion_point(field_release:SendUpgradeFirmware.sha256hash)
  
  return sha256hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SendUpgradeFirmware::set_allocated_sha256hash(std::string* sha256hash) {
  if (sha256hash != nullptr) {
    
  } else {
    
  }
  sha256hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sha256hash);
  // @@protoc_insertion_point(field_set_allocated:SendUpgradeFirmware.sha256hash)
}

// bytes signature = 3;
inline void SendUpgradeFirmware::clear_signature() {
  signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SendUpgradeFirmware::signature() const {
  // @@protoc_insertion_point(field_get:SendUpgradeFirmware.signature)
  return _internal_signature();
}
inline void SendUpgradeFirmware::set_signature(const std::string& value) {
  _internal_set_signature(value);
  // @@protoc_insertion_point(field_set:SendUpgradeFirmware.signature)
}
inline std::string* SendUpgradeFirmware::mutable_signature() {
  // @@protoc_insertion_point(field_mutable:SendUpgradeFirmware.signature)
  return _internal_mutable_signature();
}
inline const std::string& SendUpgradeFirmware::_internal_signature() const {
  return signature_.GetNoArena();
}
inline void SendUpgradeFirmware::_internal_set_signature(const std::string& value) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SendUpgradeFirmware::set_signature(std::string&& value) {
  
  signature_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SendUpgradeFirmware.signature)
}
inline void SendUpgradeFirmware::set_signature(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SendUpgradeFirmware.signature)
}
inline void SendUpgradeFirmware::set_signature(const void* value, size_t size) {
  
  signature_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SendUpgradeFirmware.signature)
}
inline std::string* SendUpgradeFirmware::_internal_mutable_signature() {
  
  return signature_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SendUpgradeFirmware::release_signature() {
  // @@protoc_insertion_point(field_release:SendUpgradeFirmware.signature)
  
  return signature_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SendUpgradeFirmware::set_allocated_signature(std::string* signature) {
  if (signature != nullptr) {
    
  } else {
    
  }
  signature_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:SendUpgradeFirmware.signature)
}

// bytes firmware = 4;
inline void SendUpgradeFirmware::clear_firmware() {
  firmware_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& SendUpgradeFirmware::firmware() const {
  // @@protoc_insertion_point(field_get:SendUpgradeFirmware.firmware)
  return _internal_firmware();
}
inline void SendUpgradeFirmware::set_firmware(const std::string& value) {
  _internal_set_firmware(value);
  // @@protoc_insertion_point(field_set:SendUpgradeFirmware.firmware)
}
inline std::string* SendUpgradeFirmware::mutable_firmware() {
  // @@protoc_insertion_point(field_mutable:SendUpgradeFirmware.firmware)
  return _internal_mutable_firmware();
}
inline const std::string& SendUpgradeFirmware::_internal_firmware() const {
  return firmware_.GetNoArena();
}
inline void SendUpgradeFirmware::_internal_set_firmware(const std::string& value) {
  
  firmware_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void SendUpgradeFirmware::set_firmware(std::string&& value) {
  
  firmware_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:SendUpgradeFirmware.firmware)
}
inline void SendUpgradeFirmware::set_firmware(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  firmware_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:SendUpgradeFirmware.firmware)
}
inline void SendUpgradeFirmware::set_firmware(const void* value, size_t size) {
  
  firmware_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:SendUpgradeFirmware.firmware)
}
inline std::string* SendUpgradeFirmware::_internal_mutable_firmware() {
  
  return firmware_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* SendUpgradeFirmware::release_firmware() {
  // @@protoc_insertion_point(field_release:SendUpgradeFirmware.firmware)
  
  return firmware_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void SendUpgradeFirmware::set_allocated_firmware(std::string* firmware) {
  if (firmware != nullptr) {
    
  } else {
    
  }
  firmware_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), firmware);
  // @@protoc_insertion_point(field_set_allocated:SendUpgradeFirmware.firmware)
}

// -------------------------------------------------------------------

// WriteSerialNo

// string deviceSerialNo = 1;
inline void WriteSerialNo::clear_deviceserialno() {
  deviceserialno_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WriteSerialNo::deviceserialno() const {
  // @@protoc_insertion_point(field_get:WriteSerialNo.deviceSerialNo)
  return _internal_deviceserialno();
}
inline void WriteSerialNo::set_deviceserialno(const std::string& value) {
  _internal_set_deviceserialno(value);
  // @@protoc_insertion_point(field_set:WriteSerialNo.deviceSerialNo)
}
inline std::string* WriteSerialNo::mutable_deviceserialno() {
  // @@protoc_insertion_point(field_mutable:WriteSerialNo.deviceSerialNo)
  return _internal_mutable_deviceserialno();
}
inline const std::string& WriteSerialNo::_internal_deviceserialno() const {
  return deviceserialno_.GetNoArena();
}
inline void WriteSerialNo::_internal_set_deviceserialno(const std::string& value) {
  
  deviceserialno_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WriteSerialNo::set_deviceserialno(std::string&& value) {
  
  deviceserialno_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:WriteSerialNo.deviceSerialNo)
}
inline void WriteSerialNo::set_deviceserialno(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deviceserialno_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WriteSerialNo.deviceSerialNo)
}
inline void WriteSerialNo::set_deviceserialno(const char* value, size_t size) {
  
  deviceserialno_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WriteSerialNo.deviceSerialNo)
}
inline std::string* WriteSerialNo::_internal_mutable_deviceserialno() {
  
  return deviceserialno_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WriteSerialNo::release_deviceserialno() {
  // @@protoc_insertion_point(field_release:WriteSerialNo.deviceSerialNo)
  
  return deviceserialno_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WriteSerialNo::set_allocated_deviceserialno(std::string* deviceserialno) {
  if (deviceserialno != nullptr) {
    
  } else {
    
  }
  deviceserialno_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deviceserialno);
  // @@protoc_insertion_point(field_set_allocated:WriteSerialNo.deviceSerialNo)
}

// -------------------------------------------------------------------

// WriteSerialNoReply

// bool writeSuccess = 1;
inline void WriteSerialNoReply::clear_writesuccess() {
  writesuccess_ = false;
}
inline bool WriteSerialNoReply::_internal_writesuccess() const {
  return writesuccess_;
}
inline bool WriteSerialNoReply::writesuccess() const {
  // @@protoc_insertion_point(field_get:WriteSerialNoReply.writeSuccess)
  return _internal_writesuccess();
}
inline void WriteSerialNoReply::_internal_set_writesuccess(bool value) {
  
  writesuccess_ = value;
}
inline void WriteSerialNoReply::set_writesuccess(bool value) {
  _internal_set_writesuccess(value);
  // @@protoc_insertion_point(field_set:WriteSerialNoReply.writeSuccess)
}

// string deviceSerialNo = 2;
inline void WriteSerialNoReply::clear_deviceserialno() {
  deviceserialno_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& WriteSerialNoReply::deviceserialno() const {
  // @@protoc_insertion_point(field_get:WriteSerialNoReply.deviceSerialNo)
  return _internal_deviceserialno();
}
inline void WriteSerialNoReply::set_deviceserialno(const std::string& value) {
  _internal_set_deviceserialno(value);
  // @@protoc_insertion_point(field_set:WriteSerialNoReply.deviceSerialNo)
}
inline std::string* WriteSerialNoReply::mutable_deviceserialno() {
  // @@protoc_insertion_point(field_mutable:WriteSerialNoReply.deviceSerialNo)
  return _internal_mutable_deviceserialno();
}
inline const std::string& WriteSerialNoReply::_internal_deviceserialno() const {
  return deviceserialno_.GetNoArena();
}
inline void WriteSerialNoReply::_internal_set_deviceserialno(const std::string& value) {
  
  deviceserialno_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void WriteSerialNoReply::set_deviceserialno(std::string&& value) {
  
  deviceserialno_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:WriteSerialNoReply.deviceSerialNo)
}
inline void WriteSerialNoReply::set_deviceserialno(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deviceserialno_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:WriteSerialNoReply.deviceSerialNo)
}
inline void WriteSerialNoReply::set_deviceserialno(const char* value, size_t size) {
  
  deviceserialno_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:WriteSerialNoReply.deviceSerialNo)
}
inline std::string* WriteSerialNoReply::_internal_mutable_deviceserialno() {
  
  return deviceserialno_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* WriteSerialNoReply::release_deviceserialno() {
  // @@protoc_insertion_point(field_release:WriteSerialNoReply.deviceSerialNo)
  
  return deviceserialno_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void WriteSerialNoReply::set_allocated_deviceserialno(std::string* deviceserialno) {
  if (deviceserialno != nullptr) {
    
  } else {
    
  }
  deviceserialno_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deviceserialno);
  // @@protoc_insertion_point(field_set_allocated:WriteSerialNoReply.deviceSerialNo)
}

// -------------------------------------------------------------------

// LockSerialNo

// -------------------------------------------------------------------

// lockSerialNoReply

// bool lockSuccess = 1;
inline void lockSerialNoReply::clear_locksuccess() {
  locksuccess_ = false;
}
inline bool lockSerialNoReply::_internal_locksuccess() const {
  return locksuccess_;
}
inline bool lockSerialNoReply::locksuccess() const {
  // @@protoc_insertion_point(field_get:lockSerialNoReply.lockSuccess)
  return _internal_locksuccess();
}
inline void lockSerialNoReply::_internal_set_locksuccess(bool value) {
  
  locksuccess_ = value;
}
inline void lockSerialNoReply::set_locksuccess(bool value) {
  _internal_set_locksuccess(value);
  // @@protoc_insertion_point(field_set:lockSerialNoReply.lockSuccess)
}

// string deviceSerialNo = 2;
inline void lockSerialNoReply::clear_deviceserialno() {
  deviceserialno_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& lockSerialNoReply::deviceserialno() const {
  // @@protoc_insertion_point(field_get:lockSerialNoReply.deviceSerialNo)
  return _internal_deviceserialno();
}
inline void lockSerialNoReply::set_deviceserialno(const std::string& value) {
  _internal_set_deviceserialno(value);
  // @@protoc_insertion_point(field_set:lockSerialNoReply.deviceSerialNo)
}
inline std::string* lockSerialNoReply::mutable_deviceserialno() {
  // @@protoc_insertion_point(field_mutable:lockSerialNoReply.deviceSerialNo)
  return _internal_mutable_deviceserialno();
}
inline const std::string& lockSerialNoReply::_internal_deviceserialno() const {
  return deviceserialno_.GetNoArena();
}
inline void lockSerialNoReply::_internal_set_deviceserialno(const std::string& value) {
  
  deviceserialno_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void lockSerialNoReply::set_deviceserialno(std::string&& value) {
  
  deviceserialno_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:lockSerialNoReply.deviceSerialNo)
}
inline void lockSerialNoReply::set_deviceserialno(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  deviceserialno_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:lockSerialNoReply.deviceSerialNo)
}
inline void lockSerialNoReply::set_deviceserialno(const char* value, size_t size) {
  
  deviceserialno_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:lockSerialNoReply.deviceSerialNo)
}
inline std::string* lockSerialNoReply::_internal_mutable_deviceserialno() {
  
  return deviceserialno_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* lockSerialNoReply::release_deviceserialno() {
  // @@protoc_insertion_point(field_release:lockSerialNoReply.deviceSerialNo)
  
  return deviceserialno_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void lockSerialNoReply::set_allocated_deviceserialno(std::string* deviceserialno) {
  if (deviceserialno != nullptr) {
    
  } else {
    
  }
  deviceserialno_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), deviceserialno);
  // @@protoc_insertion_point(field_set_allocated:lockSerialNoReply.deviceSerialNo)
}

// -------------------------------------------------------------------

// EccSignOptions

// bool rfc6979 = 1;
inline void EccSignOptions::clear_rfc6979() {
  rfc6979_ = false;
}
inline bool EccSignOptions::_internal_rfc6979() const {
  return rfc6979_;
}
inline bool EccSignOptions::rfc6979() const {
  // @@protoc_insertion_point(field_get:EccSignOptions.rfc6979)
  return _internal_rfc6979();
}
inline void EccSignOptions::_internal_set_rfc6979(bool value) {
  
  rfc6979_ = value;
}
inline void EccSignOptions::set_rfc6979(bool value) {
  _internal_set_rfc6979(value);
  // @@protoc_insertion_point(field_set:EccSignOptions.rfc6979)
}

// bool graphene_canonize = 2;
inline void EccSignOptions::clear_graphene_canonize() {
  graphene_canonize_ = false;
}
inline bool EccSignOptions::_internal_graphene_canonize() const {
  return graphene_canonize_;
}
inline bool EccSignOptions::graphene_canonize() const {
  // @@protoc_insertion_point(field_get:EccSignOptions.graphene_canonize)
  return _internal_graphene_canonize();
}
inline void EccSignOptions::_internal_set_graphene_canonize(bool value) {
  
  graphene_canonize_ = value;
}
inline void EccSignOptions::set_graphene_canonize(bool value) {
  _internal_set_graphene_canonize(value);
  // @@protoc_insertion_point(field_set:EccSignOptions.graphene_canonize)
}

// -------------------------------------------------------------------

// EccSignRequest

// string hdPath = 1;
inline void EccSignRequest::clear_hdpath() {
  hdpath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EccSignRequest::hdpath() const {
  // @@protoc_insertion_point(field_get:EccSignRequest.hdPath)
  return _internal_hdpath();
}
inline void EccSignRequest::set_hdpath(const std::string& value) {
  _internal_set_hdpath(value);
  // @@protoc_insertion_point(field_set:EccSignRequest.hdPath)
}
inline std::string* EccSignRequest::mutable_hdpath() {
  // @@protoc_insertion_point(field_mutable:EccSignRequest.hdPath)
  return _internal_mutable_hdpath();
}
inline const std::string& EccSignRequest::_internal_hdpath() const {
  return hdpath_.GetNoArena();
}
inline void EccSignRequest::_internal_set_hdpath(const std::string& value) {
  
  hdpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EccSignRequest::set_hdpath(std::string&& value) {
  
  hdpath_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:EccSignRequest.hdPath)
}
inline void EccSignRequest::set_hdpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hdpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EccSignRequest.hdPath)
}
inline void EccSignRequest::set_hdpath(const char* value, size_t size) {
  
  hdpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EccSignRequest.hdPath)
}
inline std::string* EccSignRequest::_internal_mutable_hdpath() {
  
  return hdpath_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EccSignRequest::release_hdpath() {
  // @@protoc_insertion_point(field_release:EccSignRequest.hdPath)
  
  return hdpath_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EccSignRequest::set_allocated_hdpath(std::string* hdpath) {
  if (hdpath != nullptr) {
    
  } else {
    
  }
  hdpath_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hdpath);
  // @@protoc_insertion_point(field_set_allocated:EccSignRequest.hdPath)
}

// bytes hash = 2;
inline void EccSignRequest::clear_hash() {
  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EccSignRequest::hash() const {
  // @@protoc_insertion_point(field_get:EccSignRequest.hash)
  return _internal_hash();
}
inline void EccSignRequest::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:EccSignRequest.hash)
}
inline std::string* EccSignRequest::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:EccSignRequest.hash)
  return _internal_mutable_hash();
}
inline const std::string& EccSignRequest::_internal_hash() const {
  return hash_.GetNoArena();
}
inline void EccSignRequest::_internal_set_hash(const std::string& value) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EccSignRequest::set_hash(std::string&& value) {
  
  hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:EccSignRequest.hash)
}
inline void EccSignRequest::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EccSignRequest.hash)
}
inline void EccSignRequest::set_hash(const void* value, size_t size) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EccSignRequest.hash)
}
inline std::string* EccSignRequest::_internal_mutable_hash() {
  
  return hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EccSignRequest::release_hash() {
  // @@protoc_insertion_point(field_release:EccSignRequest.hash)
  
  return hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EccSignRequest::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:EccSignRequest.hash)
}

// .EccAlgorithm algorithm = 3;
inline void EccSignRequest::clear_algorithm() {
  algorithm_ = 0;
}
inline ::EccAlgorithm EccSignRequest::_internal_algorithm() const {
  return static_cast< ::EccAlgorithm >(algorithm_);
}
inline ::EccAlgorithm EccSignRequest::algorithm() const {
  // @@protoc_insertion_point(field_get:EccSignRequest.algorithm)
  return _internal_algorithm();
}
inline void EccSignRequest::_internal_set_algorithm(::EccAlgorithm value) {
  
  algorithm_ = value;
}
inline void EccSignRequest::set_algorithm(::EccAlgorithm value) {
  _internal_set_algorithm(value);
  // @@protoc_insertion_point(field_set:EccSignRequest.algorithm)
}

// .EccSignOptions options = 4;
inline bool EccSignRequest::_internal_has_options() const {
  return this != internal_default_instance() && options_ != nullptr;
}
inline bool EccSignRequest::has_options() const {
  return _internal_has_options();
}
inline void EccSignRequest::clear_options() {
  if (GetArenaNoVirtual() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
}
inline const ::EccSignOptions& EccSignRequest::_internal_options() const {
  const ::EccSignOptions* p = options_;
  return p != nullptr ? *p : *reinterpret_cast<const ::EccSignOptions*>(
      &::_EccSignOptions_default_instance_);
}
inline const ::EccSignOptions& EccSignRequest::options() const {
  // @@protoc_insertion_point(field_get:EccSignRequest.options)
  return _internal_options();
}
inline ::EccSignOptions* EccSignRequest::release_options() {
  // @@protoc_insertion_point(field_release:EccSignRequest.options)
  
  ::EccSignOptions* temp = options_;
  options_ = nullptr;
  return temp;
}
inline ::EccSignOptions* EccSignRequest::_internal_mutable_options() {
  
  if (options_ == nullptr) {
    auto* p = CreateMaybeMessage<::EccSignOptions>(GetArenaNoVirtual());
    options_ = p;
  }
  return options_;
}
inline ::EccSignOptions* EccSignRequest::mutable_options() {
  // @@protoc_insertion_point(field_mutable:EccSignRequest.options)
  return _internal_mutable_options();
}
inline void EccSignRequest::set_allocated_options(::EccSignOptions* options) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete options_;
  }
  if (options) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      options = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, options, submessage_arena);
    }
    
  } else {
    
  }
  options_ = options;
  // @@protoc_insertion_point(field_set_allocated:EccSignRequest.options)
}

// -------------------------------------------------------------------

// EccSignResult

// string hdPath = 1;
inline void EccSignResult::clear_hdpath() {
  hdpath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EccSignResult::hdpath() const {
  // @@protoc_insertion_point(field_get:EccSignResult.hdPath)
  return _internal_hdpath();
}
inline void EccSignResult::set_hdpath(const std::string& value) {
  _internal_set_hdpath(value);
  // @@protoc_insertion_point(field_set:EccSignResult.hdPath)
}
inline std::string* EccSignResult::mutable_hdpath() {
  // @@protoc_insertion_point(field_mutable:EccSignResult.hdPath)
  return _internal_mutable_hdpath();
}
inline const std::string& EccSignResult::_internal_hdpath() const {
  return hdpath_.GetNoArena();
}
inline void EccSignResult::_internal_set_hdpath(const std::string& value) {
  
  hdpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EccSignResult::set_hdpath(std::string&& value) {
  
  hdpath_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:EccSignResult.hdPath)
}
inline void EccSignResult::set_hdpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hdpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EccSignResult.hdPath)
}
inline void EccSignResult::set_hdpath(const char* value, size_t size) {
  
  hdpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EccSignResult.hdPath)
}
inline std::string* EccSignResult::_internal_mutable_hdpath() {
  
  return hdpath_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EccSignResult::release_hdpath() {
  // @@protoc_insertion_point(field_release:EccSignResult.hdPath)
  
  return hdpath_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EccSignResult::set_allocated_hdpath(std::string* hdpath) {
  if (hdpath != nullptr) {
    
  } else {
    
  }
  hdpath_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hdpath);
  // @@protoc_insertion_point(field_set_allocated:EccSignResult.hdPath)
}

// bytes pubkey = 2;
inline void EccSignResult::clear_pubkey() {
  pubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EccSignResult::pubkey() const {
  // @@protoc_insertion_point(field_get:EccSignResult.pubkey)
  return _internal_pubkey();
}
inline void EccSignResult::set_pubkey(const std::string& value) {
  _internal_set_pubkey(value);
  // @@protoc_insertion_point(field_set:EccSignResult.pubkey)
}
inline std::string* EccSignResult::mutable_pubkey() {
  // @@protoc_insertion_point(field_mutable:EccSignResult.pubkey)
  return _internal_mutable_pubkey();
}
inline const std::string& EccSignResult::_internal_pubkey() const {
  return pubkey_.GetNoArena();
}
inline void EccSignResult::_internal_set_pubkey(const std::string& value) {
  
  pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EccSignResult::set_pubkey(std::string&& value) {
  
  pubkey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:EccSignResult.pubkey)
}
inline void EccSignResult::set_pubkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EccSignResult.pubkey)
}
inline void EccSignResult::set_pubkey(const void* value, size_t size) {
  
  pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EccSignResult.pubkey)
}
inline std::string* EccSignResult::_internal_mutable_pubkey() {
  
  return pubkey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EccSignResult::release_pubkey() {
  // @@protoc_insertion_point(field_release:EccSignResult.pubkey)
  
  return pubkey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EccSignResult::set_allocated_pubkey(std::string* pubkey) {
  if (pubkey != nullptr) {
    
  } else {
    
  }
  pubkey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pubkey);
  // @@protoc_insertion_point(field_set_allocated:EccSignResult.pubkey)
}

// bytes hash = 3;
inline void EccSignResult::clear_hash() {
  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EccSignResult::hash() const {
  // @@protoc_insertion_point(field_get:EccSignResult.hash)
  return _internal_hash();
}
inline void EccSignResult::set_hash(const std::string& value) {
  _internal_set_hash(value);
  // @@protoc_insertion_point(field_set:EccSignResult.hash)
}
inline std::string* EccSignResult::mutable_hash() {
  // @@protoc_insertion_point(field_mutable:EccSignResult.hash)
  return _internal_mutable_hash();
}
inline const std::string& EccSignResult::_internal_hash() const {
  return hash_.GetNoArena();
}
inline void EccSignResult::_internal_set_hash(const std::string& value) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EccSignResult::set_hash(std::string&& value) {
  
  hash_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:EccSignResult.hash)
}
inline void EccSignResult::set_hash(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EccSignResult.hash)
}
inline void EccSignResult::set_hash(const void* value, size_t size) {
  
  hash_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EccSignResult.hash)
}
inline std::string* EccSignResult::_internal_mutable_hash() {
  
  return hash_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EccSignResult::release_hash() {
  // @@protoc_insertion_point(field_release:EccSignResult.hash)
  
  return hash_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EccSignResult::set_allocated_hash(std::string* hash) {
  if (hash != nullptr) {
    
  } else {
    
  }
  hash_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hash);
  // @@protoc_insertion_point(field_set_allocated:EccSignResult.hash)
}

// bytes R = 4;
inline void EccSignResult::clear_r() {
  r_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EccSignResult::r() const {
  // @@protoc_insertion_point(field_get:EccSignResult.R)
  return _internal_r();
}
inline void EccSignResult::set_r(const std::string& value) {
  _internal_set_r(value);
  // @@protoc_insertion_point(field_set:EccSignResult.R)
}
inline std::string* EccSignResult::mutable_r() {
  // @@protoc_insertion_point(field_mutable:EccSignResult.R)
  return _internal_mutable_r();
}
inline const std::string& EccSignResult::_internal_r() const {
  return r_.GetNoArena();
}
inline void EccSignResult::_internal_set_r(const std::string& value) {
  
  r_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EccSignResult::set_r(std::string&& value) {
  
  r_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:EccSignResult.R)
}
inline void EccSignResult::set_r(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  r_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EccSignResult.R)
}
inline void EccSignResult::set_r(const void* value, size_t size) {
  
  r_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EccSignResult.R)
}
inline std::string* EccSignResult::_internal_mutable_r() {
  
  return r_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EccSignResult::release_r() {
  // @@protoc_insertion_point(field_release:EccSignResult.R)
  
  return r_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EccSignResult::set_allocated_r(std::string* r) {
  if (r != nullptr) {
    
  } else {
    
  }
  r_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), r);
  // @@protoc_insertion_point(field_set_allocated:EccSignResult.R)
}

// bytes S = 5;
inline void EccSignResult::clear_s() {
  s_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EccSignResult::s() const {
  // @@protoc_insertion_point(field_get:EccSignResult.S)
  return _internal_s();
}
inline void EccSignResult::set_s(const std::string& value) {
  _internal_set_s(value);
  // @@protoc_insertion_point(field_set:EccSignResult.S)
}
inline std::string* EccSignResult::mutable_s() {
  // @@protoc_insertion_point(field_mutable:EccSignResult.S)
  return _internal_mutable_s();
}
inline const std::string& EccSignResult::_internal_s() const {
  return s_.GetNoArena();
}
inline void EccSignResult::_internal_set_s(const std::string& value) {
  
  s_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EccSignResult::set_s(std::string&& value) {
  
  s_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:EccSignResult.S)
}
inline void EccSignResult::set_s(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  s_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EccSignResult.S)
}
inline void EccSignResult::set_s(const void* value, size_t size) {
  
  s_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EccSignResult.S)
}
inline std::string* EccSignResult::_internal_mutable_s() {
  
  return s_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EccSignResult::release_s() {
  // @@protoc_insertion_point(field_release:EccSignResult.S)
  
  return s_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EccSignResult::set_allocated_s(std::string* s) {
  if (s != nullptr) {
    
  } else {
    
  }
  s_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), s);
  // @@protoc_insertion_point(field_set_allocated:EccSignResult.S)
}

// uint32 recover_param = 6;
inline void EccSignResult::clear_recover_param() {
  recover_param_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EccSignResult::_internal_recover_param() const {
  return recover_param_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 EccSignResult::recover_param() const {
  // @@protoc_insertion_point(field_get:EccSignResult.recover_param)
  return _internal_recover_param();
}
inline void EccSignResult::_internal_set_recover_param(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  recover_param_ = value;
}
inline void EccSignResult::set_recover_param(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_recover_param(value);
  // @@protoc_insertion_point(field_set:EccSignResult.recover_param)
}

// -------------------------------------------------------------------

// EccGetPublicKeyRequest

// string hdPath = 1;
inline void EccGetPublicKeyRequest::clear_hdpath() {
  hdpath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EccGetPublicKeyRequest::hdpath() const {
  // @@protoc_insertion_point(field_get:EccGetPublicKeyRequest.hdPath)
  return _internal_hdpath();
}
inline void EccGetPublicKeyRequest::set_hdpath(const std::string& value) {
  _internal_set_hdpath(value);
  // @@protoc_insertion_point(field_set:EccGetPublicKeyRequest.hdPath)
}
inline std::string* EccGetPublicKeyRequest::mutable_hdpath() {
  // @@protoc_insertion_point(field_mutable:EccGetPublicKeyRequest.hdPath)
  return _internal_mutable_hdpath();
}
inline const std::string& EccGetPublicKeyRequest::_internal_hdpath() const {
  return hdpath_.GetNoArena();
}
inline void EccGetPublicKeyRequest::_internal_set_hdpath(const std::string& value) {
  
  hdpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EccGetPublicKeyRequest::set_hdpath(std::string&& value) {
  
  hdpath_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:EccGetPublicKeyRequest.hdPath)
}
inline void EccGetPublicKeyRequest::set_hdpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hdpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EccGetPublicKeyRequest.hdPath)
}
inline void EccGetPublicKeyRequest::set_hdpath(const char* value, size_t size) {
  
  hdpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EccGetPublicKeyRequest.hdPath)
}
inline std::string* EccGetPublicKeyRequest::_internal_mutable_hdpath() {
  
  return hdpath_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EccGetPublicKeyRequest::release_hdpath() {
  // @@protoc_insertion_point(field_release:EccGetPublicKeyRequest.hdPath)
  
  return hdpath_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EccGetPublicKeyRequest::set_allocated_hdpath(std::string* hdpath) {
  if (hdpath != nullptr) {
    
  } else {
    
  }
  hdpath_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hdpath);
  // @@protoc_insertion_point(field_set_allocated:EccGetPublicKeyRequest.hdPath)
}

// .EccAlgorithm algorithm = 2;
inline void EccGetPublicKeyRequest::clear_algorithm() {
  algorithm_ = 0;
}
inline ::EccAlgorithm EccGetPublicKeyRequest::_internal_algorithm() const {
  return static_cast< ::EccAlgorithm >(algorithm_);
}
inline ::EccAlgorithm EccGetPublicKeyRequest::algorithm() const {
  // @@protoc_insertion_point(field_get:EccGetPublicKeyRequest.algorithm)
  return _internal_algorithm();
}
inline void EccGetPublicKeyRequest::_internal_set_algorithm(::EccAlgorithm value) {
  
  algorithm_ = value;
}
inline void EccGetPublicKeyRequest::set_algorithm(::EccAlgorithm value) {
  _internal_set_algorithm(value);
  // @@protoc_insertion_point(field_set:EccGetPublicKeyRequest.algorithm)
}

// -------------------------------------------------------------------

// EccGetPublicKeyReply

// string hdPath = 1;
inline void EccGetPublicKeyReply::clear_hdpath() {
  hdpath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EccGetPublicKeyReply::hdpath() const {
  // @@protoc_insertion_point(field_get:EccGetPublicKeyReply.hdPath)
  return _internal_hdpath();
}
inline void EccGetPublicKeyReply::set_hdpath(const std::string& value) {
  _internal_set_hdpath(value);
  // @@protoc_insertion_point(field_set:EccGetPublicKeyReply.hdPath)
}
inline std::string* EccGetPublicKeyReply::mutable_hdpath() {
  // @@protoc_insertion_point(field_mutable:EccGetPublicKeyReply.hdPath)
  return _internal_mutable_hdpath();
}
inline const std::string& EccGetPublicKeyReply::_internal_hdpath() const {
  return hdpath_.GetNoArena();
}
inline void EccGetPublicKeyReply::_internal_set_hdpath(const std::string& value) {
  
  hdpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EccGetPublicKeyReply::set_hdpath(std::string&& value) {
  
  hdpath_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:EccGetPublicKeyReply.hdPath)
}
inline void EccGetPublicKeyReply::set_hdpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hdpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EccGetPublicKeyReply.hdPath)
}
inline void EccGetPublicKeyReply::set_hdpath(const char* value, size_t size) {
  
  hdpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EccGetPublicKeyReply.hdPath)
}
inline std::string* EccGetPublicKeyReply::_internal_mutable_hdpath() {
  
  return hdpath_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EccGetPublicKeyReply::release_hdpath() {
  // @@protoc_insertion_point(field_release:EccGetPublicKeyReply.hdPath)
  
  return hdpath_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EccGetPublicKeyReply::set_allocated_hdpath(std::string* hdpath) {
  if (hdpath != nullptr) {
    
  } else {
    
  }
  hdpath_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hdpath);
  // @@protoc_insertion_point(field_set_allocated:EccGetPublicKeyReply.hdPath)
}

// .EccAlgorithm algorithm = 2;
inline void EccGetPublicKeyReply::clear_algorithm() {
  algorithm_ = 0;
}
inline ::EccAlgorithm EccGetPublicKeyReply::_internal_algorithm() const {
  return static_cast< ::EccAlgorithm >(algorithm_);
}
inline ::EccAlgorithm EccGetPublicKeyReply::algorithm() const {
  // @@protoc_insertion_point(field_get:EccGetPublicKeyReply.algorithm)
  return _internal_algorithm();
}
inline void EccGetPublicKeyReply::_internal_set_algorithm(::EccAlgorithm value) {
  
  algorithm_ = value;
}
inline void EccGetPublicKeyReply::set_algorithm(::EccAlgorithm value) {
  _internal_set_algorithm(value);
  // @@protoc_insertion_point(field_set:EccGetPublicKeyReply.algorithm)
}

// bytes pubkey = 3;
inline void EccGetPublicKeyReply::clear_pubkey() {
  pubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EccGetPublicKeyReply::pubkey() const {
  // @@protoc_insertion_point(field_get:EccGetPublicKeyReply.pubkey)
  return _internal_pubkey();
}
inline void EccGetPublicKeyReply::set_pubkey(const std::string& value) {
  _internal_set_pubkey(value);
  // @@protoc_insertion_point(field_set:EccGetPublicKeyReply.pubkey)
}
inline std::string* EccGetPublicKeyReply::mutable_pubkey() {
  // @@protoc_insertion_point(field_mutable:EccGetPublicKeyReply.pubkey)
  return _internal_mutable_pubkey();
}
inline const std::string& EccGetPublicKeyReply::_internal_pubkey() const {
  return pubkey_.GetNoArena();
}
inline void EccGetPublicKeyReply::_internal_set_pubkey(const std::string& value) {
  
  pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EccGetPublicKeyReply::set_pubkey(std::string&& value) {
  
  pubkey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:EccGetPublicKeyReply.pubkey)
}
inline void EccGetPublicKeyReply::set_pubkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EccGetPublicKeyReply.pubkey)
}
inline void EccGetPublicKeyReply::set_pubkey(const void* value, size_t size) {
  
  pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EccGetPublicKeyReply.pubkey)
}
inline std::string* EccGetPublicKeyReply::_internal_mutable_pubkey() {
  
  return pubkey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EccGetPublicKeyReply::release_pubkey() {
  // @@protoc_insertion_point(field_release:EccGetPublicKeyReply.pubkey)
  
  return pubkey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EccGetPublicKeyReply::set_allocated_pubkey(std::string* pubkey) {
  if (pubkey != nullptr) {
    
  } else {
    
  }
  pubkey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pubkey);
  // @@protoc_insertion_point(field_set_allocated:EccGetPublicKeyReply.pubkey)
}

// -------------------------------------------------------------------

// EccGetExtendedPublicKeyRequest

// string hdPath = 1;
inline void EccGetExtendedPublicKeyRequest::clear_hdpath() {
  hdpath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EccGetExtendedPublicKeyRequest::hdpath() const {
  // @@protoc_insertion_point(field_get:EccGetExtendedPublicKeyRequest.hdPath)
  return _internal_hdpath();
}
inline void EccGetExtendedPublicKeyRequest::set_hdpath(const std::string& value) {
  _internal_set_hdpath(value);
  // @@protoc_insertion_point(field_set:EccGetExtendedPublicKeyRequest.hdPath)
}
inline std::string* EccGetExtendedPublicKeyRequest::mutable_hdpath() {
  // @@protoc_insertion_point(field_mutable:EccGetExtendedPublicKeyRequest.hdPath)
  return _internal_mutable_hdpath();
}
inline const std::string& EccGetExtendedPublicKeyRequest::_internal_hdpath() const {
  return hdpath_.GetNoArena();
}
inline void EccGetExtendedPublicKeyRequest::_internal_set_hdpath(const std::string& value) {
  
  hdpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EccGetExtendedPublicKeyRequest::set_hdpath(std::string&& value) {
  
  hdpath_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:EccGetExtendedPublicKeyRequest.hdPath)
}
inline void EccGetExtendedPublicKeyRequest::set_hdpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hdpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EccGetExtendedPublicKeyRequest.hdPath)
}
inline void EccGetExtendedPublicKeyRequest::set_hdpath(const char* value, size_t size) {
  
  hdpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EccGetExtendedPublicKeyRequest.hdPath)
}
inline std::string* EccGetExtendedPublicKeyRequest::_internal_mutable_hdpath() {
  
  return hdpath_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EccGetExtendedPublicKeyRequest::release_hdpath() {
  // @@protoc_insertion_point(field_release:EccGetExtendedPublicKeyRequest.hdPath)
  
  return hdpath_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EccGetExtendedPublicKeyRequest::set_allocated_hdpath(std::string* hdpath) {
  if (hdpath != nullptr) {
    
  } else {
    
  }
  hdpath_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hdpath);
  // @@protoc_insertion_point(field_set_allocated:EccGetExtendedPublicKeyRequest.hdPath)
}

// .EccAlgorithm algorithm = 2;
inline void EccGetExtendedPublicKeyRequest::clear_algorithm() {
  algorithm_ = 0;
}
inline ::EccAlgorithm EccGetExtendedPublicKeyRequest::_internal_algorithm() const {
  return static_cast< ::EccAlgorithm >(algorithm_);
}
inline ::EccAlgorithm EccGetExtendedPublicKeyRequest::algorithm() const {
  // @@protoc_insertion_point(field_get:EccGetExtendedPublicKeyRequest.algorithm)
  return _internal_algorithm();
}
inline void EccGetExtendedPublicKeyRequest::_internal_set_algorithm(::EccAlgorithm value) {
  
  algorithm_ = value;
}
inline void EccGetExtendedPublicKeyRequest::set_algorithm(::EccAlgorithm value) {
  _internal_set_algorithm(value);
  // @@protoc_insertion_point(field_set:EccGetExtendedPublicKeyRequest.algorithm)
}

// -------------------------------------------------------------------

// EccGetExtendedPublicKeyReply

// string hdPath = 1;
inline void EccGetExtendedPublicKeyReply::clear_hdpath() {
  hdpath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EccGetExtendedPublicKeyReply::hdpath() const {
  // @@protoc_insertion_point(field_get:EccGetExtendedPublicKeyReply.hdPath)
  return _internal_hdpath();
}
inline void EccGetExtendedPublicKeyReply::set_hdpath(const std::string& value) {
  _internal_set_hdpath(value);
  // @@protoc_insertion_point(field_set:EccGetExtendedPublicKeyReply.hdPath)
}
inline std::string* EccGetExtendedPublicKeyReply::mutable_hdpath() {
  // @@protoc_insertion_point(field_mutable:EccGetExtendedPublicKeyReply.hdPath)
  return _internal_mutable_hdpath();
}
inline const std::string& EccGetExtendedPublicKeyReply::_internal_hdpath() const {
  return hdpath_.GetNoArena();
}
inline void EccGetExtendedPublicKeyReply::_internal_set_hdpath(const std::string& value) {
  
  hdpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EccGetExtendedPublicKeyReply::set_hdpath(std::string&& value) {
  
  hdpath_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:EccGetExtendedPublicKeyReply.hdPath)
}
inline void EccGetExtendedPublicKeyReply::set_hdpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hdpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EccGetExtendedPublicKeyReply.hdPath)
}
inline void EccGetExtendedPublicKeyReply::set_hdpath(const char* value, size_t size) {
  
  hdpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EccGetExtendedPublicKeyReply.hdPath)
}
inline std::string* EccGetExtendedPublicKeyReply::_internal_mutable_hdpath() {
  
  return hdpath_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EccGetExtendedPublicKeyReply::release_hdpath() {
  // @@protoc_insertion_point(field_release:EccGetExtendedPublicKeyReply.hdPath)
  
  return hdpath_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EccGetExtendedPublicKeyReply::set_allocated_hdpath(std::string* hdpath) {
  if (hdpath != nullptr) {
    
  } else {
    
  }
  hdpath_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hdpath);
  // @@protoc_insertion_point(field_set_allocated:EccGetExtendedPublicKeyReply.hdPath)
}

// .EccAlgorithm algorithm = 2;
inline void EccGetExtendedPublicKeyReply::clear_algorithm() {
  algorithm_ = 0;
}
inline ::EccAlgorithm EccGetExtendedPublicKeyReply::_internal_algorithm() const {
  return static_cast< ::EccAlgorithm >(algorithm_);
}
inline ::EccAlgorithm EccGetExtendedPublicKeyReply::algorithm() const {
  // @@protoc_insertion_point(field_get:EccGetExtendedPublicKeyReply.algorithm)
  return _internal_algorithm();
}
inline void EccGetExtendedPublicKeyReply::_internal_set_algorithm(::EccAlgorithm value) {
  
  algorithm_ = value;
}
inline void EccGetExtendedPublicKeyReply::set_algorithm(::EccAlgorithm value) {
  _internal_set_algorithm(value);
  // @@protoc_insertion_point(field_set:EccGetExtendedPublicKeyReply.algorithm)
}

// bytes pubkey = 3;
inline void EccGetExtendedPublicKeyReply::clear_pubkey() {
  pubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EccGetExtendedPublicKeyReply::pubkey() const {
  // @@protoc_insertion_point(field_get:EccGetExtendedPublicKeyReply.pubkey)
  return _internal_pubkey();
}
inline void EccGetExtendedPublicKeyReply::set_pubkey(const std::string& value) {
  _internal_set_pubkey(value);
  // @@protoc_insertion_point(field_set:EccGetExtendedPublicKeyReply.pubkey)
}
inline std::string* EccGetExtendedPublicKeyReply::mutable_pubkey() {
  // @@protoc_insertion_point(field_mutable:EccGetExtendedPublicKeyReply.pubkey)
  return _internal_mutable_pubkey();
}
inline const std::string& EccGetExtendedPublicKeyReply::_internal_pubkey() const {
  return pubkey_.GetNoArena();
}
inline void EccGetExtendedPublicKeyReply::_internal_set_pubkey(const std::string& value) {
  
  pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EccGetExtendedPublicKeyReply::set_pubkey(std::string&& value) {
  
  pubkey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:EccGetExtendedPublicKeyReply.pubkey)
}
inline void EccGetExtendedPublicKeyReply::set_pubkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EccGetExtendedPublicKeyReply.pubkey)
}
inline void EccGetExtendedPublicKeyReply::set_pubkey(const void* value, size_t size) {
  
  pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EccGetExtendedPublicKeyReply.pubkey)
}
inline std::string* EccGetExtendedPublicKeyReply::_internal_mutable_pubkey() {
  
  return pubkey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EccGetExtendedPublicKeyReply::release_pubkey() {
  // @@protoc_insertion_point(field_release:EccGetExtendedPublicKeyReply.pubkey)
  
  return pubkey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EccGetExtendedPublicKeyReply::set_allocated_pubkey(std::string* pubkey) {
  if (pubkey != nullptr) {
    
  } else {
    
  }
  pubkey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pubkey);
  // @@protoc_insertion_point(field_set_allocated:EccGetExtendedPublicKeyReply.pubkey)
}

// bytes chainCode = 4;
inline void EccGetExtendedPublicKeyReply::clear_chaincode() {
  chaincode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EccGetExtendedPublicKeyReply::chaincode() const {
  // @@protoc_insertion_point(field_get:EccGetExtendedPublicKeyReply.chainCode)
  return _internal_chaincode();
}
inline void EccGetExtendedPublicKeyReply::set_chaincode(const std::string& value) {
  _internal_set_chaincode(value);
  // @@protoc_insertion_point(field_set:EccGetExtendedPublicKeyReply.chainCode)
}
inline std::string* EccGetExtendedPublicKeyReply::mutable_chaincode() {
  // @@protoc_insertion_point(field_mutable:EccGetExtendedPublicKeyReply.chainCode)
  return _internal_mutable_chaincode();
}
inline const std::string& EccGetExtendedPublicKeyReply::_internal_chaincode() const {
  return chaincode_.GetNoArena();
}
inline void EccGetExtendedPublicKeyReply::_internal_set_chaincode(const std::string& value) {
  
  chaincode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EccGetExtendedPublicKeyReply::set_chaincode(std::string&& value) {
  
  chaincode_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:EccGetExtendedPublicKeyReply.chainCode)
}
inline void EccGetExtendedPublicKeyReply::set_chaincode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  chaincode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EccGetExtendedPublicKeyReply.chainCode)
}
inline void EccGetExtendedPublicKeyReply::set_chaincode(const void* value, size_t size) {
  
  chaincode_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EccGetExtendedPublicKeyReply.chainCode)
}
inline std::string* EccGetExtendedPublicKeyReply::_internal_mutable_chaincode() {
  
  return chaincode_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EccGetExtendedPublicKeyReply::release_chaincode() {
  // @@protoc_insertion_point(field_release:EccGetExtendedPublicKeyReply.chainCode)
  
  return chaincode_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EccGetExtendedPublicKeyReply::set_allocated_chaincode(std::string* chaincode) {
  if (chaincode != nullptr) {
    
  } else {
    
  }
  chaincode_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chaincode);
  // @@protoc_insertion_point(field_set_allocated:EccGetExtendedPublicKeyReply.chainCode)
}

// -------------------------------------------------------------------

// EccMultiplyRequest

// string hdPath = 1;
inline void EccMultiplyRequest::clear_hdpath() {
  hdpath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EccMultiplyRequest::hdpath() const {
  // @@protoc_insertion_point(field_get:EccMultiplyRequest.hdPath)
  return _internal_hdpath();
}
inline void EccMultiplyRequest::set_hdpath(const std::string& value) {
  _internal_set_hdpath(value);
  // @@protoc_insertion_point(field_set:EccMultiplyRequest.hdPath)
}
inline std::string* EccMultiplyRequest::mutable_hdpath() {
  // @@protoc_insertion_point(field_mutable:EccMultiplyRequest.hdPath)
  return _internal_mutable_hdpath();
}
inline const std::string& EccMultiplyRequest::_internal_hdpath() const {
  return hdpath_.GetNoArena();
}
inline void EccMultiplyRequest::_internal_set_hdpath(const std::string& value) {
  
  hdpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EccMultiplyRequest::set_hdpath(std::string&& value) {
  
  hdpath_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:EccMultiplyRequest.hdPath)
}
inline void EccMultiplyRequest::set_hdpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hdpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EccMultiplyRequest.hdPath)
}
inline void EccMultiplyRequest::set_hdpath(const char* value, size_t size) {
  
  hdpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EccMultiplyRequest.hdPath)
}
inline std::string* EccMultiplyRequest::_internal_mutable_hdpath() {
  
  return hdpath_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EccMultiplyRequest::release_hdpath() {
  // @@protoc_insertion_point(field_release:EccMultiplyRequest.hdPath)
  
  return hdpath_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EccMultiplyRequest::set_allocated_hdpath(std::string* hdpath) {
  if (hdpath != nullptr) {
    
  } else {
    
  }
  hdpath_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hdpath);
  // @@protoc_insertion_point(field_set_allocated:EccMultiplyRequest.hdPath)
}

// .EccAlgorithm algorithm = 2;
inline void EccMultiplyRequest::clear_algorithm() {
  algorithm_ = 0;
}
inline ::EccAlgorithm EccMultiplyRequest::_internal_algorithm() const {
  return static_cast< ::EccAlgorithm >(algorithm_);
}
inline ::EccAlgorithm EccMultiplyRequest::algorithm() const {
  // @@protoc_insertion_point(field_get:EccMultiplyRequest.algorithm)
  return _internal_algorithm();
}
inline void EccMultiplyRequest::_internal_set_algorithm(::EccAlgorithm value) {
  
  algorithm_ = value;
}
inline void EccMultiplyRequest::set_algorithm(::EccAlgorithm value) {
  _internal_set_algorithm(value);
  // @@protoc_insertion_point(field_set:EccMultiplyRequest.algorithm)
}

// bytes input_pubkey = 3;
inline void EccMultiplyRequest::clear_input_pubkey() {
  input_pubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EccMultiplyRequest::input_pubkey() const {
  // @@protoc_insertion_point(field_get:EccMultiplyRequest.input_pubkey)
  return _internal_input_pubkey();
}
inline void EccMultiplyRequest::set_input_pubkey(const std::string& value) {
  _internal_set_input_pubkey(value);
  // @@protoc_insertion_point(field_set:EccMultiplyRequest.input_pubkey)
}
inline std::string* EccMultiplyRequest::mutable_input_pubkey() {
  // @@protoc_insertion_point(field_mutable:EccMultiplyRequest.input_pubkey)
  return _internal_mutable_input_pubkey();
}
inline const std::string& EccMultiplyRequest::_internal_input_pubkey() const {
  return input_pubkey_.GetNoArena();
}
inline void EccMultiplyRequest::_internal_set_input_pubkey(const std::string& value) {
  
  input_pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EccMultiplyRequest::set_input_pubkey(std::string&& value) {
  
  input_pubkey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:EccMultiplyRequest.input_pubkey)
}
inline void EccMultiplyRequest::set_input_pubkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  input_pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EccMultiplyRequest.input_pubkey)
}
inline void EccMultiplyRequest::set_input_pubkey(const void* value, size_t size) {
  
  input_pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EccMultiplyRequest.input_pubkey)
}
inline std::string* EccMultiplyRequest::_internal_mutable_input_pubkey() {
  
  return input_pubkey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EccMultiplyRequest::release_input_pubkey() {
  // @@protoc_insertion_point(field_release:EccMultiplyRequest.input_pubkey)
  
  return input_pubkey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EccMultiplyRequest::set_allocated_input_pubkey(std::string* input_pubkey) {
  if (input_pubkey != nullptr) {
    
  } else {
    
  }
  input_pubkey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input_pubkey);
  // @@protoc_insertion_point(field_set_allocated:EccMultiplyRequest.input_pubkey)
}

// -------------------------------------------------------------------

// EccMultiplyReply

// string hdPath = 1;
inline void EccMultiplyReply::clear_hdpath() {
  hdpath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EccMultiplyReply::hdpath() const {
  // @@protoc_insertion_point(field_get:EccMultiplyReply.hdPath)
  return _internal_hdpath();
}
inline void EccMultiplyReply::set_hdpath(const std::string& value) {
  _internal_set_hdpath(value);
  // @@protoc_insertion_point(field_set:EccMultiplyReply.hdPath)
}
inline std::string* EccMultiplyReply::mutable_hdpath() {
  // @@protoc_insertion_point(field_mutable:EccMultiplyReply.hdPath)
  return _internal_mutable_hdpath();
}
inline const std::string& EccMultiplyReply::_internal_hdpath() const {
  return hdpath_.GetNoArena();
}
inline void EccMultiplyReply::_internal_set_hdpath(const std::string& value) {
  
  hdpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EccMultiplyReply::set_hdpath(std::string&& value) {
  
  hdpath_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:EccMultiplyReply.hdPath)
}
inline void EccMultiplyReply::set_hdpath(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  hdpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EccMultiplyReply.hdPath)
}
inline void EccMultiplyReply::set_hdpath(const char* value, size_t size) {
  
  hdpath_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EccMultiplyReply.hdPath)
}
inline std::string* EccMultiplyReply::_internal_mutable_hdpath() {
  
  return hdpath_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EccMultiplyReply::release_hdpath() {
  // @@protoc_insertion_point(field_release:EccMultiplyReply.hdPath)
  
  return hdpath_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EccMultiplyReply::set_allocated_hdpath(std::string* hdpath) {
  if (hdpath != nullptr) {
    
  } else {
    
  }
  hdpath_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), hdpath);
  // @@protoc_insertion_point(field_set_allocated:EccMultiplyReply.hdPath)
}

// .EccAlgorithm algorithm = 2;
inline void EccMultiplyReply::clear_algorithm() {
  algorithm_ = 0;
}
inline ::EccAlgorithm EccMultiplyReply::_internal_algorithm() const {
  return static_cast< ::EccAlgorithm >(algorithm_);
}
inline ::EccAlgorithm EccMultiplyReply::algorithm() const {
  // @@protoc_insertion_point(field_get:EccMultiplyReply.algorithm)
  return _internal_algorithm();
}
inline void EccMultiplyReply::_internal_set_algorithm(::EccAlgorithm value) {
  
  algorithm_ = value;
}
inline void EccMultiplyReply::set_algorithm(::EccAlgorithm value) {
  _internal_set_algorithm(value);
  // @@protoc_insertion_point(field_set:EccMultiplyReply.algorithm)
}

// bytes input_pubkey = 3;
inline void EccMultiplyReply::clear_input_pubkey() {
  input_pubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EccMultiplyReply::input_pubkey() const {
  // @@protoc_insertion_point(field_get:EccMultiplyReply.input_pubkey)
  return _internal_input_pubkey();
}
inline void EccMultiplyReply::set_input_pubkey(const std::string& value) {
  _internal_set_input_pubkey(value);
  // @@protoc_insertion_point(field_set:EccMultiplyReply.input_pubkey)
}
inline std::string* EccMultiplyReply::mutable_input_pubkey() {
  // @@protoc_insertion_point(field_mutable:EccMultiplyReply.input_pubkey)
  return _internal_mutable_input_pubkey();
}
inline const std::string& EccMultiplyReply::_internal_input_pubkey() const {
  return input_pubkey_.GetNoArena();
}
inline void EccMultiplyReply::_internal_set_input_pubkey(const std::string& value) {
  
  input_pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EccMultiplyReply::set_input_pubkey(std::string&& value) {
  
  input_pubkey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:EccMultiplyReply.input_pubkey)
}
inline void EccMultiplyReply::set_input_pubkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  input_pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EccMultiplyReply.input_pubkey)
}
inline void EccMultiplyReply::set_input_pubkey(const void* value, size_t size) {
  
  input_pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EccMultiplyReply.input_pubkey)
}
inline std::string* EccMultiplyReply::_internal_mutable_input_pubkey() {
  
  return input_pubkey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EccMultiplyReply::release_input_pubkey() {
  // @@protoc_insertion_point(field_release:EccMultiplyReply.input_pubkey)
  
  return input_pubkey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EccMultiplyReply::set_allocated_input_pubkey(std::string* input_pubkey) {
  if (input_pubkey != nullptr) {
    
  } else {
    
  }
  input_pubkey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), input_pubkey);
  // @@protoc_insertion_point(field_set_allocated:EccMultiplyReply.input_pubkey)
}

// bytes dev_pubkey = 4;
inline void EccMultiplyReply::clear_dev_pubkey() {
  dev_pubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EccMultiplyReply::dev_pubkey() const {
  // @@protoc_insertion_point(field_get:EccMultiplyReply.dev_pubkey)
  return _internal_dev_pubkey();
}
inline void EccMultiplyReply::set_dev_pubkey(const std::string& value) {
  _internal_set_dev_pubkey(value);
  // @@protoc_insertion_point(field_set:EccMultiplyReply.dev_pubkey)
}
inline std::string* EccMultiplyReply::mutable_dev_pubkey() {
  // @@protoc_insertion_point(field_mutable:EccMultiplyReply.dev_pubkey)
  return _internal_mutable_dev_pubkey();
}
inline const std::string& EccMultiplyReply::_internal_dev_pubkey() const {
  return dev_pubkey_.GetNoArena();
}
inline void EccMultiplyReply::_internal_set_dev_pubkey(const std::string& value) {
  
  dev_pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EccMultiplyReply::set_dev_pubkey(std::string&& value) {
  
  dev_pubkey_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:EccMultiplyReply.dev_pubkey)
}
inline void EccMultiplyReply::set_dev_pubkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  dev_pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EccMultiplyReply.dev_pubkey)
}
inline void EccMultiplyReply::set_dev_pubkey(const void* value, size_t size) {
  
  dev_pubkey_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EccMultiplyReply.dev_pubkey)
}
inline std::string* EccMultiplyReply::_internal_mutable_dev_pubkey() {
  
  return dev_pubkey_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EccMultiplyReply::release_dev_pubkey() {
  // @@protoc_insertion_point(field_release:EccMultiplyReply.dev_pubkey)
  
  return dev_pubkey_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EccMultiplyReply::set_allocated_dev_pubkey(std::string* dev_pubkey) {
  if (dev_pubkey != nullptr) {
    
  } else {
    
  }
  dev_pubkey_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dev_pubkey);
  // @@protoc_insertion_point(field_set_allocated:EccMultiplyReply.dev_pubkey)
}

// bytes result = 5;
inline void EccMultiplyReply::clear_result() {
  result_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EccMultiplyReply::result() const {
  // @@protoc_insertion_point(field_get:EccMultiplyReply.result)
  return _internal_result();
}
inline void EccMultiplyReply::set_result(const std::string& value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:EccMultiplyReply.result)
}
inline std::string* EccMultiplyReply::mutable_result() {
  // @@protoc_insertion_point(field_mutable:EccMultiplyReply.result)
  return _internal_mutable_result();
}
inline const std::string& EccMultiplyReply::_internal_result() const {
  return result_.GetNoArena();
}
inline void EccMultiplyReply::_internal_set_result(const std::string& value) {
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void EccMultiplyReply::set_result(std::string&& value) {
  
  result_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:EccMultiplyReply.result)
}
inline void EccMultiplyReply::set_result(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:EccMultiplyReply.result)
}
inline void EccMultiplyReply::set_result(const void* value, size_t size) {
  
  result_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:EccMultiplyReply.result)
}
inline std::string* EccMultiplyReply::_internal_mutable_result() {
  
  return result_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EccMultiplyReply::release_result() {
  // @@protoc_insertion_point(field_release:EccMultiplyReply.result)
  
  return result_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EccMultiplyReply::set_allocated_result(std::string* result) {
  if (result != nullptr) {
    
  } else {
    
  }
  result_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result);
  // @@protoc_insertion_point(field_set_allocated:EccMultiplyReply.result)
}

// -------------------------------------------------------------------

// EraseDataRequest

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::DeviceMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::DeviceMode>() {
  return ::DeviceMode_descriptor();
}
template <> struct is_proto_enum< ::LockState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LockState>() {
  return ::LockState_descriptor();
}
template <> struct is_proto_enum< ::EccAlgorithm> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EccAlgorithm>() {
  return ::EccAlgorithm_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_messages_2eproto
