// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: messages.proto

#include "messages.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_messages_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EccSignOptions_messages_2eproto;
class RequestRejectedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RequestRejected> _instance;
} _RequestRejected_default_instance_;
class GenericConfirmReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GenericConfirmReply> _instance;
} _GenericConfirmReply_default_instance_;
class GetModeAndVersionRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetModeAndVersionRequest> _instance;
} _GetModeAndVersionRequest_default_instance_;
class GetModeAndVersionReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GetModeAndVersionReply> _instance;
} _GetModeAndVersionReply_default_instance_;
class UpgradeStartRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpgradeStartRequest> _instance;
} _UpgradeStartRequest_default_instance_;
class SendUpgradeFirmwareDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendUpgradeFirmware> _instance;
} _SendUpgradeFirmware_default_instance_;
class WriteSerialNoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WriteSerialNo> _instance;
} _WriteSerialNo_default_instance_;
class WriteSerialNoReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WriteSerialNoReply> _instance;
} _WriteSerialNoReply_default_instance_;
class LockSerialNoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LockSerialNo> _instance;
} _LockSerialNo_default_instance_;
class lockSerialNoReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<lockSerialNoReply> _instance;
} _lockSerialNoReply_default_instance_;
class EccSignOptionsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EccSignOptions> _instance;
} _EccSignOptions_default_instance_;
class EccSignRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EccSignRequest> _instance;
} _EccSignRequest_default_instance_;
class EccSignResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EccSignResult> _instance;
} _EccSignResult_default_instance_;
class EccGetPublicKeyRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EccGetPublicKeyRequest> _instance;
} _EccGetPublicKeyRequest_default_instance_;
class EccGetPublicKeyReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EccGetPublicKeyReply> _instance;
} _EccGetPublicKeyReply_default_instance_;
class EccGetExtendedPublicKeyRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EccGetExtendedPublicKeyRequest> _instance;
} _EccGetExtendedPublicKeyRequest_default_instance_;
class EccGetExtendedPublicKeyReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EccGetExtendedPublicKeyReply> _instance;
} _EccGetExtendedPublicKeyReply_default_instance_;
class EccMultiplyRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EccMultiplyRequest> _instance;
} _EccMultiplyRequest_default_instance_;
class EccMultiplyReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EccMultiplyReply> _instance;
} _EccMultiplyReply_default_instance_;
class EraseDataRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<EraseDataRequest> _instance;
} _EraseDataRequest_default_instance_;
static void InitDefaultsscc_info_EccGetExtendedPublicKeyReply_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EccGetExtendedPublicKeyReply_default_instance_;
    new (ptr) ::EccGetExtendedPublicKeyReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EccGetExtendedPublicKeyReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EccGetExtendedPublicKeyReply_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EccGetExtendedPublicKeyReply_messages_2eproto}, {}};

static void InitDefaultsscc_info_EccGetExtendedPublicKeyRequest_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EccGetExtendedPublicKeyRequest_default_instance_;
    new (ptr) ::EccGetExtendedPublicKeyRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EccGetExtendedPublicKeyRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EccGetExtendedPublicKeyRequest_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EccGetExtendedPublicKeyRequest_messages_2eproto}, {}};

static void InitDefaultsscc_info_EccGetPublicKeyReply_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EccGetPublicKeyReply_default_instance_;
    new (ptr) ::EccGetPublicKeyReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EccGetPublicKeyReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EccGetPublicKeyReply_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EccGetPublicKeyReply_messages_2eproto}, {}};

static void InitDefaultsscc_info_EccGetPublicKeyRequest_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EccGetPublicKeyRequest_default_instance_;
    new (ptr) ::EccGetPublicKeyRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EccGetPublicKeyRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EccGetPublicKeyRequest_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EccGetPublicKeyRequest_messages_2eproto}, {}};

static void InitDefaultsscc_info_EccMultiplyReply_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EccMultiplyReply_default_instance_;
    new (ptr) ::EccMultiplyReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EccMultiplyReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EccMultiplyReply_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EccMultiplyReply_messages_2eproto}, {}};

static void InitDefaultsscc_info_EccMultiplyRequest_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EccMultiplyRequest_default_instance_;
    new (ptr) ::EccMultiplyRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EccMultiplyRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EccMultiplyRequest_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EccMultiplyRequest_messages_2eproto}, {}};

static void InitDefaultsscc_info_EccSignOptions_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EccSignOptions_default_instance_;
    new (ptr) ::EccSignOptions();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EccSignOptions::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EccSignOptions_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EccSignOptions_messages_2eproto}, {}};

static void InitDefaultsscc_info_EccSignRequest_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EccSignRequest_default_instance_;
    new (ptr) ::EccSignRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EccSignRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_EccSignRequest_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_EccSignRequest_messages_2eproto}, {
      &scc_info_EccSignOptions_messages_2eproto.base,}};

static void InitDefaultsscc_info_EccSignResult_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EccSignResult_default_instance_;
    new (ptr) ::EccSignResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EccSignResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EccSignResult_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EccSignResult_messages_2eproto}, {}};

static void InitDefaultsscc_info_EraseDataRequest_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_EraseDataRequest_default_instance_;
    new (ptr) ::EraseDataRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::EraseDataRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_EraseDataRequest_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_EraseDataRequest_messages_2eproto}, {}};

static void InitDefaultsscc_info_GenericConfirmReply_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GenericConfirmReply_default_instance_;
    new (ptr) ::GenericConfirmReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GenericConfirmReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GenericConfirmReply_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GenericConfirmReply_messages_2eproto}, {}};

static void InitDefaultsscc_info_GetModeAndVersionReply_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GetModeAndVersionReply_default_instance_;
    new (ptr) ::GetModeAndVersionReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GetModeAndVersionReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetModeAndVersionReply_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetModeAndVersionReply_messages_2eproto}, {}};

static void InitDefaultsscc_info_GetModeAndVersionRequest_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_GetModeAndVersionRequest_default_instance_;
    new (ptr) ::GetModeAndVersionRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::GetModeAndVersionRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GetModeAndVersionRequest_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GetModeAndVersionRequest_messages_2eproto}, {}};

static void InitDefaultsscc_info_LockSerialNo_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_LockSerialNo_default_instance_;
    new (ptr) ::LockSerialNo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::LockSerialNo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LockSerialNo_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LockSerialNo_messages_2eproto}, {}};

static void InitDefaultsscc_info_RequestRejected_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_RequestRejected_default_instance_;
    new (ptr) ::RequestRejected();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::RequestRejected::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RequestRejected_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RequestRejected_messages_2eproto}, {}};

static void InitDefaultsscc_info_SendUpgradeFirmware_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SendUpgradeFirmware_default_instance_;
    new (ptr) ::SendUpgradeFirmware();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SendUpgradeFirmware::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SendUpgradeFirmware_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SendUpgradeFirmware_messages_2eproto}, {}};

static void InitDefaultsscc_info_UpgradeStartRequest_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_UpgradeStartRequest_default_instance_;
    new (ptr) ::UpgradeStartRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::UpgradeStartRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpgradeStartRequest_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpgradeStartRequest_messages_2eproto}, {}};

static void InitDefaultsscc_info_WriteSerialNo_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_WriteSerialNo_default_instance_;
    new (ptr) ::WriteSerialNo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::WriteSerialNo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WriteSerialNo_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WriteSerialNo_messages_2eproto}, {}};

static void InitDefaultsscc_info_WriteSerialNoReply_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_WriteSerialNoReply_default_instance_;
    new (ptr) ::WriteSerialNoReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::WriteSerialNoReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WriteSerialNoReply_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WriteSerialNoReply_messages_2eproto}, {}};

static void InitDefaultsscc_info_lockSerialNoReply_messages_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_lockSerialNoReply_default_instance_;
    new (ptr) ::lockSerialNoReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::lockSerialNoReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_lockSerialNoReply_messages_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_lockSerialNoReply_messages_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_messages_2eproto[20];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_messages_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_messages_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_messages_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::RequestRejected, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::RequestRejected, requestid_),
  PROTOBUF_FIELD_OFFSET(::RequestRejected, errcode_),
  PROTOBUF_FIELD_OFFSET(::RequestRejected, errmessage_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GenericConfirmReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GetModeAndVersionRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::GetModeAndVersionReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::GetModeAndVersionReply, mode_),
  PROTOBUF_FIELD_OFFSET(::GetModeAndVersionReply, firmwareversion_),
  PROTOBUF_FIELD_OFFSET(::GetModeAndVersionReply, deviceserialno_),
  PROTOBUF_FIELD_OFFSET(::GetModeAndVersionReply, islocked_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::UpgradeStartRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::UpgradeStartRequest, firmwareversion_),
  PROTOBUF_FIELD_OFFSET(::UpgradeStartRequest, sha256hash_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SendUpgradeFirmware, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SendUpgradeFirmware, firmwareversion_),
  PROTOBUF_FIELD_OFFSET(::SendUpgradeFirmware, sha256hash_),
  PROTOBUF_FIELD_OFFSET(::SendUpgradeFirmware, signature_),
  PROTOBUF_FIELD_OFFSET(::SendUpgradeFirmware, firmware_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::WriteSerialNo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::WriteSerialNo, deviceserialno_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::WriteSerialNoReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::WriteSerialNoReply, writesuccess_),
  PROTOBUF_FIELD_OFFSET(::WriteSerialNoReply, deviceserialno_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::LockSerialNo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::lockSerialNoReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::lockSerialNoReply, locksuccess_),
  PROTOBUF_FIELD_OFFSET(::lockSerialNoReply, deviceserialno_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EccSignOptions, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::EccSignOptions, rfc6979_),
  PROTOBUF_FIELD_OFFSET(::EccSignOptions, graphene_canonize_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EccSignRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::EccSignRequest, hdpath_),
  PROTOBUF_FIELD_OFFSET(::EccSignRequest, hash_),
  PROTOBUF_FIELD_OFFSET(::EccSignRequest, algorithm_),
  PROTOBUF_FIELD_OFFSET(::EccSignRequest, options_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EccSignResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::EccSignResult, hdpath_),
  PROTOBUF_FIELD_OFFSET(::EccSignResult, pubkey_),
  PROTOBUF_FIELD_OFFSET(::EccSignResult, hash_),
  PROTOBUF_FIELD_OFFSET(::EccSignResult, r_),
  PROTOBUF_FIELD_OFFSET(::EccSignResult, s_),
  PROTOBUF_FIELD_OFFSET(::EccSignResult, recover_param_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EccGetPublicKeyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::EccGetPublicKeyRequest, hdpath_),
  PROTOBUF_FIELD_OFFSET(::EccGetPublicKeyRequest, algorithm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EccGetPublicKeyReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::EccGetPublicKeyReply, hdpath_),
  PROTOBUF_FIELD_OFFSET(::EccGetPublicKeyReply, algorithm_),
  PROTOBUF_FIELD_OFFSET(::EccGetPublicKeyReply, pubkey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EccGetExtendedPublicKeyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::EccGetExtendedPublicKeyRequest, hdpath_),
  PROTOBUF_FIELD_OFFSET(::EccGetExtendedPublicKeyRequest, algorithm_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EccGetExtendedPublicKeyReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::EccGetExtendedPublicKeyReply, hdpath_),
  PROTOBUF_FIELD_OFFSET(::EccGetExtendedPublicKeyReply, algorithm_),
  PROTOBUF_FIELD_OFFSET(::EccGetExtendedPublicKeyReply, pubkey_),
  PROTOBUF_FIELD_OFFSET(::EccGetExtendedPublicKeyReply, chaincode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EccMultiplyRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::EccMultiplyRequest, hdpath_),
  PROTOBUF_FIELD_OFFSET(::EccMultiplyRequest, algorithm_),
  PROTOBUF_FIELD_OFFSET(::EccMultiplyRequest, input_pubkey_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EccMultiplyReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::EccMultiplyReply, hdpath_),
  PROTOBUF_FIELD_OFFSET(::EccMultiplyReply, algorithm_),
  PROTOBUF_FIELD_OFFSET(::EccMultiplyReply, input_pubkey_),
  PROTOBUF_FIELD_OFFSET(::EccMultiplyReply, dev_pubkey_),
  PROTOBUF_FIELD_OFFSET(::EccMultiplyReply, result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::EraseDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::RequestRejected)},
  { 8, -1, sizeof(::GenericConfirmReply)},
  { 13, -1, sizeof(::GetModeAndVersionRequest)},
  { 18, -1, sizeof(::GetModeAndVersionReply)},
  { 27, -1, sizeof(::UpgradeStartRequest)},
  { 34, -1, sizeof(::SendUpgradeFirmware)},
  { 43, -1, sizeof(::WriteSerialNo)},
  { 49, -1, sizeof(::WriteSerialNoReply)},
  { 56, -1, sizeof(::LockSerialNo)},
  { 61, -1, sizeof(::lockSerialNoReply)},
  { 68, -1, sizeof(::EccSignOptions)},
  { 75, -1, sizeof(::EccSignRequest)},
  { 84, -1, sizeof(::EccSignResult)},
  { 95, -1, sizeof(::EccGetPublicKeyRequest)},
  { 102, -1, sizeof(::EccGetPublicKeyReply)},
  { 110, -1, sizeof(::EccGetExtendedPublicKeyRequest)},
  { 117, -1, sizeof(::EccGetExtendedPublicKeyReply)},
  { 126, -1, sizeof(::EccMultiplyRequest)},
  { 134, -1, sizeof(::EccMultiplyReply)},
  { 144, -1, sizeof(::EraseDataRequest)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_RequestRejected_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GenericConfirmReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GetModeAndVersionRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_GetModeAndVersionReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_UpgradeStartRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SendUpgradeFirmware_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_WriteSerialNo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_WriteSerialNoReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_LockSerialNo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_lockSerialNoReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_EccSignOptions_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_EccSignRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_EccSignResult_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_EccGetPublicKeyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_EccGetPublicKeyReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_EccGetExtendedPublicKeyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_EccGetExtendedPublicKeyReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_EccMultiplyRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_EccMultiplyReply_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_EraseDataRequest_default_instance_),
};

const char descriptor_table_protodef_messages_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016messages.proto\"I\n\017RequestRejected\022\021\n\tr"
  "equestId\030\001 \001(\r\022\017\n\007errCode\030\002 \001(\005\022\022\n\nerrMe"
  "ssage\030\003 \001(\t\"\025\n\023GenericConfirmReply\"\032\n\030Ge"
  "tModeAndVersionRequest\"\202\001\n\026GetModeAndVer"
  "sionReply\022\031\n\004mode\030\001 \001(\0162\013.DeviceMode\022\027\n\017"
  "firmwareVersion\030\002 \001(\t\022\026\n\016deviceSerialNo\030"
  "\003 \001(\t\022\034\n\010isLocked\030\004 \001(\0162\n.LockState\"B\n\023U"
  "pgradeStartRequest\022\027\n\017firmwareVersion\030\001 "
  "\001(\t\022\022\n\nsha256hash\030\002 \001(\014\"g\n\023SendUpgradeFi"
  "rmware\022\027\n\017firmwareVersion\030\001 \001(\t\022\022\n\nsha25"
  "6hash\030\002 \001(\014\022\021\n\tsignature\030\003 \001(\014\022\020\n\010firmwa"
  "re\030\004 \001(\014\"\'\n\rWriteSerialNo\022\026\n\016deviceSeria"
  "lNo\030\001 \001(\t\"B\n\022WriteSerialNoReply\022\024\n\014write"
  "Success\030\001 \001(\010\022\026\n\016deviceSerialNo\030\002 \001(\t\"\016\n"
  "\014LockSerialNo\"@\n\021lockSerialNoReply\022\023\n\013lo"
  "ckSuccess\030\001 \001(\010\022\026\n\016deviceSerialNo\030\002 \001(\t\""
  "<\n\016EccSignOptions\022\017\n\007rfc6979\030\001 \001(\010\022\031\n\021gr"
  "aphene_canonize\030\002 \001(\010\"r\n\016EccSignRequest\022"
  "\016\n\006hdPath\030\001 \001(\t\022\014\n\004hash\030\002 \001(\014\022 \n\talgorit"
  "hm\030\003 \001(\0162\r.EccAlgorithm\022 \n\007options\030\004 \001(\013"
  "2\017.EccSignOptions\"j\n\rEccSignResult\022\016\n\006hd"
  "Path\030\001 \001(\t\022\016\n\006pubkey\030\002 \001(\014\022\014\n\004hash\030\003 \001(\014"
  "\022\t\n\001R\030\004 \001(\014\022\t\n\001S\030\005 \001(\014\022\025\n\rrecover_param\030"
  "\006 \001(\r\"J\n\026EccGetPublicKeyRequest\022\016\n\006hdPat"
  "h\030\001 \001(\t\022 \n\talgorithm\030\002 \001(\0162\r.EccAlgorith"
  "m\"X\n\024EccGetPublicKeyReply\022\016\n\006hdPath\030\001 \001("
  "\t\022 \n\talgorithm\030\002 \001(\0162\r.EccAlgorithm\022\016\n\006p"
  "ubkey\030\003 \001(\014\"R\n\036EccGetExtendedPublicKeyRe"
  "quest\022\016\n\006hdPath\030\001 \001(\t\022 \n\talgorithm\030\002 \001(\016"
  "2\r.EccAlgorithm\"s\n\034EccGetExtendedPublicK"
  "eyReply\022\016\n\006hdPath\030\001 \001(\t\022 \n\talgorithm\030\002 \001"
  "(\0162\r.EccAlgorithm\022\016\n\006pubkey\030\003 \001(\014\022\021\n\tcha"
  "inCode\030\004 \001(\014\"\\\n\022EccMultiplyRequest\022\016\n\006hd"
  "Path\030\001 \001(\t\022 \n\talgorithm\030\002 \001(\0162\r.EccAlgor"
  "ithm\022\024\n\014input_pubkey\030\003 \001(\014\"~\n\020EccMultipl"
  "yReply\022\016\n\006hdPath\030\001 \001(\t\022 \n\talgorithm\030\002 \001("
  "\0162\r.EccAlgorithm\022\024\n\014input_pubkey\030\003 \001(\014\022\022"
  "\n\ndev_pubkey\030\004 \001(\014\022\016\n\006result\030\005 \001(\014\"\022\n\020Er"
  "aseDataRequest*/\n\nDeviceMode\022\023\n\017MODE_BOO"
  "TLOADER\020\000\022\014\n\010MODE_APP\020\001*1\n\tLockState\022\n\n\006"
  "UNKNOWN\020\000\022\014\n\010UNLOCKED\020\001\022\n\n\006LOCKED\020\002*\035\n\014Ec"
  "cAlgorithm\022\r\n\tSECP256K1\020\000b\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_messages_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_messages_2eproto_sccs[20] = {
  &scc_info_EccGetExtendedPublicKeyReply_messages_2eproto.base,
  &scc_info_EccGetExtendedPublicKeyRequest_messages_2eproto.base,
  &scc_info_EccGetPublicKeyReply_messages_2eproto.base,
  &scc_info_EccGetPublicKeyRequest_messages_2eproto.base,
  &scc_info_EccMultiplyReply_messages_2eproto.base,
  &scc_info_EccMultiplyRequest_messages_2eproto.base,
  &scc_info_EccSignOptions_messages_2eproto.base,
  &scc_info_EccSignRequest_messages_2eproto.base,
  &scc_info_EccSignResult_messages_2eproto.base,
  &scc_info_EraseDataRequest_messages_2eproto.base,
  &scc_info_GenericConfirmReply_messages_2eproto.base,
  &scc_info_GetModeAndVersionReply_messages_2eproto.base,
  &scc_info_GetModeAndVersionRequest_messages_2eproto.base,
  &scc_info_LockSerialNo_messages_2eproto.base,
  &scc_info_RequestRejected_messages_2eproto.base,
  &scc_info_SendUpgradeFirmware_messages_2eproto.base,
  &scc_info_UpgradeStartRequest_messages_2eproto.base,
  &scc_info_WriteSerialNo_messages_2eproto.base,
  &scc_info_WriteSerialNoReply_messages_2eproto.base,
  &scc_info_lockSerialNoReply_messages_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_messages_2eproto_once;
static bool descriptor_table_messages_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_messages_2eproto = {
  &descriptor_table_messages_2eproto_initialized, descriptor_table_protodef_messages_2eproto, "messages.proto", 1674,
  &descriptor_table_messages_2eproto_once, descriptor_table_messages_2eproto_sccs, descriptor_table_messages_2eproto_deps, 20, 0,
  schemas, file_default_instances, TableStruct_messages_2eproto::offsets,
  file_level_metadata_messages_2eproto, 20, file_level_enum_descriptors_messages_2eproto, file_level_service_descriptors_messages_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_messages_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_messages_2eproto), true);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DeviceMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_2eproto);
  return file_level_enum_descriptors_messages_2eproto[0];
}
bool DeviceMode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LockState_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_2eproto);
  return file_level_enum_descriptors_messages_2eproto[1];
}
bool LockState_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EccAlgorithm_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_messages_2eproto);
  return file_level_enum_descriptors_messages_2eproto[2];
}
bool EccAlgorithm_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void RequestRejected::InitAsDefaultInstance() {
}
class RequestRejected::_Internal {
 public:
};

RequestRejected::RequestRejected()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:RequestRejected)
}
RequestRejected::RequestRejected(const RequestRejected& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  errmessage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_errmessage().empty()) {
    errmessage_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errmessage_);
  }
  ::memcpy(&requestid_, &from.requestid_,
    static_cast<size_t>(reinterpret_cast<char*>(&errcode_) -
    reinterpret_cast<char*>(&requestid_)) + sizeof(errcode_));
  // @@protoc_insertion_point(copy_constructor:RequestRejected)
}

void RequestRejected::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RequestRejected_messages_2eproto.base);
  errmessage_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errcode_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(errcode_));
}

RequestRejected::~RequestRejected() {
  // @@protoc_insertion_point(destructor:RequestRejected)
  SharedDtor();
}

void RequestRejected::SharedDtor() {
  errmessage_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RequestRejected::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RequestRejected& RequestRejected::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RequestRejected_messages_2eproto.base);
  return *internal_default_instance();
}


void RequestRejected::Clear() {
// @@protoc_insertion_point(message_clear_start:RequestRejected)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  errmessage_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&requestid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&errcode_) -
      reinterpret_cast<char*>(&requestid_)) + sizeof(errcode_));
  _internal_metadata_.Clear();
}

const char* RequestRejected::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 requestId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          requestid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 errCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          errcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string errMessage = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_errmessage();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "RequestRejected.errMessage"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RequestRejected::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:RequestRejected)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 requestId = 1;
  if (this->requestid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_requestid(), target);
  }

  // int32 errCode = 2;
  if (this->errcode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_errcode(), target);
  }

  // string errMessage = 3;
  if (this->errmessage().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_errmessage().data(), static_cast<int>(this->_internal_errmessage().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "RequestRejected.errMessage");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_errmessage(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:RequestRejected)
  return target;
}

size_t RequestRejected::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:RequestRejected)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string errMessage = 3;
  if (this->errmessage().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_errmessage());
  }

  // uint32 requestId = 1;
  if (this->requestid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_requestid());
  }

  // int32 errCode = 2;
  if (this->errcode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_errcode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RequestRejected::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:RequestRejected)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestRejected* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RequestRejected>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:RequestRejected)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:RequestRejected)
    MergeFrom(*source);
  }
}

void RequestRejected::MergeFrom(const RequestRejected& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:RequestRejected)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.errmessage().size() > 0) {

    errmessage_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.errmessage_);
  }
  if (from.requestid() != 0) {
    _internal_set_requestid(from._internal_requestid());
  }
  if (from.errcode() != 0) {
    _internal_set_errcode(from._internal_errcode());
  }
}

void RequestRejected::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:RequestRejected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestRejected::CopyFrom(const RequestRejected& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:RequestRejected)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRejected::IsInitialized() const {
  return true;
}

void RequestRejected::InternalSwap(RequestRejected* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  errmessage_.Swap(&other->errmessage_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(requestid_, other->requestid_);
  swap(errcode_, other->errcode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RequestRejected::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GenericConfirmReply::InitAsDefaultInstance() {
}
class GenericConfirmReply::_Internal {
 public:
};

GenericConfirmReply::GenericConfirmReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GenericConfirmReply)
}
GenericConfirmReply::GenericConfirmReply(const GenericConfirmReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GenericConfirmReply)
}

void GenericConfirmReply::SharedCtor() {
}

GenericConfirmReply::~GenericConfirmReply() {
  // @@protoc_insertion_point(destructor:GenericConfirmReply)
  SharedDtor();
}

void GenericConfirmReply::SharedDtor() {
}

void GenericConfirmReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GenericConfirmReply& GenericConfirmReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GenericConfirmReply_messages_2eproto.base);
  return *internal_default_instance();
}


void GenericConfirmReply::Clear() {
// @@protoc_insertion_point(message_clear_start:GenericConfirmReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* GenericConfirmReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GenericConfirmReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GenericConfirmReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GenericConfirmReply)
  return target;
}

size_t GenericConfirmReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GenericConfirmReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GenericConfirmReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GenericConfirmReply)
  GOOGLE_DCHECK_NE(&from, this);
  const GenericConfirmReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GenericConfirmReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GenericConfirmReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GenericConfirmReply)
    MergeFrom(*source);
  }
}

void GenericConfirmReply::MergeFrom(const GenericConfirmReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GenericConfirmReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GenericConfirmReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GenericConfirmReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GenericConfirmReply::CopyFrom(const GenericConfirmReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GenericConfirmReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GenericConfirmReply::IsInitialized() const {
  return true;
}

void GenericConfirmReply::InternalSwap(GenericConfirmReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GenericConfirmReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetModeAndVersionRequest::InitAsDefaultInstance() {
}
class GetModeAndVersionRequest::_Internal {
 public:
};

GetModeAndVersionRequest::GetModeAndVersionRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetModeAndVersionRequest)
}
GetModeAndVersionRequest::GetModeAndVersionRequest(const GetModeAndVersionRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:GetModeAndVersionRequest)
}

void GetModeAndVersionRequest::SharedCtor() {
}

GetModeAndVersionRequest::~GetModeAndVersionRequest() {
  // @@protoc_insertion_point(destructor:GetModeAndVersionRequest)
  SharedDtor();
}

void GetModeAndVersionRequest::SharedDtor() {
}

void GetModeAndVersionRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetModeAndVersionRequest& GetModeAndVersionRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetModeAndVersionRequest_messages_2eproto.base);
  return *internal_default_instance();
}


void GetModeAndVersionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:GetModeAndVersionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* GetModeAndVersionRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetModeAndVersionRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetModeAndVersionRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetModeAndVersionRequest)
  return target;
}

size_t GetModeAndVersionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetModeAndVersionRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetModeAndVersionRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GetModeAndVersionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const GetModeAndVersionRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetModeAndVersionRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GetModeAndVersionRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GetModeAndVersionRequest)
    MergeFrom(*source);
  }
}

void GetModeAndVersionRequest::MergeFrom(const GetModeAndVersionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GetModeAndVersionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void GetModeAndVersionRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GetModeAndVersionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetModeAndVersionRequest::CopyFrom(const GetModeAndVersionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetModeAndVersionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetModeAndVersionRequest::IsInitialized() const {
  return true;
}

void GetModeAndVersionRequest::InternalSwap(GetModeAndVersionRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetModeAndVersionRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GetModeAndVersionReply::InitAsDefaultInstance() {
}
class GetModeAndVersionReply::_Internal {
 public:
};

GetModeAndVersionReply::GetModeAndVersionReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:GetModeAndVersionReply)
}
GetModeAndVersionReply::GetModeAndVersionReply(const GetModeAndVersionReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  firmwareversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_firmwareversion().empty()) {
    firmwareversion_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.firmwareversion_);
  }
  deviceserialno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_deviceserialno().empty()) {
    deviceserialno_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deviceserialno_);
  }
  ::memcpy(&mode_, &from.mode_,
    static_cast<size_t>(reinterpret_cast<char*>(&islocked_) -
    reinterpret_cast<char*>(&mode_)) + sizeof(islocked_));
  // @@protoc_insertion_point(copy_constructor:GetModeAndVersionReply)
}

void GetModeAndVersionReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GetModeAndVersionReply_messages_2eproto.base);
  firmwareversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deviceserialno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&islocked_) -
      reinterpret_cast<char*>(&mode_)) + sizeof(islocked_));
}

GetModeAndVersionReply::~GetModeAndVersionReply() {
  // @@protoc_insertion_point(destructor:GetModeAndVersionReply)
  SharedDtor();
}

void GetModeAndVersionReply::SharedDtor() {
  firmwareversion_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deviceserialno_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GetModeAndVersionReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GetModeAndVersionReply& GetModeAndVersionReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GetModeAndVersionReply_messages_2eproto.base);
  return *internal_default_instance();
}


void GetModeAndVersionReply::Clear() {
// @@protoc_insertion_point(message_clear_start:GetModeAndVersionReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  firmwareversion_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  deviceserialno_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&mode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&islocked_) -
      reinterpret_cast<char*>(&mode_)) + sizeof(islocked_));
  _internal_metadata_.Clear();
}

const char* GetModeAndVersionReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .DeviceMode mode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_mode(static_cast<::DeviceMode>(val));
        } else goto handle_unusual;
        continue;
      // string firmwareVersion = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_firmwareversion();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GetModeAndVersionReply.firmwareVersion"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string deviceSerialNo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_deviceserialno();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "GetModeAndVersionReply.deviceSerialNo"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .LockState isLocked = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_islocked(static_cast<::LockState>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GetModeAndVersionReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:GetModeAndVersionReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DeviceMode mode = 1;
  if (this->mode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_mode(), target);
  }

  // string firmwareVersion = 2;
  if (this->firmwareversion().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_firmwareversion().data(), static_cast<int>(this->_internal_firmwareversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GetModeAndVersionReply.firmwareVersion");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_firmwareversion(), target);
  }

  // string deviceSerialNo = 3;
  if (this->deviceserialno().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceserialno().data(), static_cast<int>(this->_internal_deviceserialno().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "GetModeAndVersionReply.deviceSerialNo");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_deviceserialno(), target);
  }

  // .LockState isLocked = 4;
  if (this->islocked() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_islocked(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:GetModeAndVersionReply)
  return target;
}

size_t GetModeAndVersionReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:GetModeAndVersionReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string firmwareVersion = 2;
  if (this->firmwareversion().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_firmwareversion());
  }

  // string deviceSerialNo = 3;
  if (this->deviceserialno().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deviceserialno());
  }

  // .DeviceMode mode = 1;
  if (this->mode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_mode());
  }

  // .LockState isLocked = 4;
  if (this->islocked() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_islocked());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GetModeAndVersionReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:GetModeAndVersionReply)
  GOOGLE_DCHECK_NE(&from, this);
  const GetModeAndVersionReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GetModeAndVersionReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:GetModeAndVersionReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:GetModeAndVersionReply)
    MergeFrom(*source);
  }
}

void GetModeAndVersionReply::MergeFrom(const GetModeAndVersionReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:GetModeAndVersionReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.firmwareversion().size() > 0) {

    firmwareversion_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.firmwareversion_);
  }
  if (from.deviceserialno().size() > 0) {

    deviceserialno_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deviceserialno_);
  }
  if (from.mode() != 0) {
    _internal_set_mode(from._internal_mode());
  }
  if (from.islocked() != 0) {
    _internal_set_islocked(from._internal_islocked());
  }
}

void GetModeAndVersionReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:GetModeAndVersionReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetModeAndVersionReply::CopyFrom(const GetModeAndVersionReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:GetModeAndVersionReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetModeAndVersionReply::IsInitialized() const {
  return true;
}

void GetModeAndVersionReply::InternalSwap(GetModeAndVersionReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  firmwareversion_.Swap(&other->firmwareversion_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  deviceserialno_.Swap(&other->deviceserialno_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(mode_, other->mode_);
  swap(islocked_, other->islocked_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GetModeAndVersionReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpgradeStartRequest::InitAsDefaultInstance() {
}
class UpgradeStartRequest::_Internal {
 public:
};

UpgradeStartRequest::UpgradeStartRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:UpgradeStartRequest)
}
UpgradeStartRequest::UpgradeStartRequest(const UpgradeStartRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  firmwareversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_firmwareversion().empty()) {
    firmwareversion_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.firmwareversion_);
  }
  sha256hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sha256hash().empty()) {
    sha256hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sha256hash_);
  }
  // @@protoc_insertion_point(copy_constructor:UpgradeStartRequest)
}

void UpgradeStartRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpgradeStartRequest_messages_2eproto.base);
  firmwareversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sha256hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

UpgradeStartRequest::~UpgradeStartRequest() {
  // @@protoc_insertion_point(destructor:UpgradeStartRequest)
  SharedDtor();
}

void UpgradeStartRequest::SharedDtor() {
  firmwareversion_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sha256hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpgradeStartRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpgradeStartRequest& UpgradeStartRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpgradeStartRequest_messages_2eproto.base);
  return *internal_default_instance();
}


void UpgradeStartRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:UpgradeStartRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  firmwareversion_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sha256hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* UpgradeStartRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string firmwareVersion = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_firmwareversion();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "UpgradeStartRequest.firmwareVersion"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sha256hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sha256hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpgradeStartRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:UpgradeStartRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string firmwareVersion = 1;
  if (this->firmwareversion().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_firmwareversion().data(), static_cast<int>(this->_internal_firmwareversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "UpgradeStartRequest.firmwareVersion");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_firmwareversion(), target);
  }

  // bytes sha256hash = 2;
  if (this->sha256hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_sha256hash(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:UpgradeStartRequest)
  return target;
}

size_t UpgradeStartRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:UpgradeStartRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string firmwareVersion = 1;
  if (this->firmwareversion().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_firmwareversion());
  }

  // bytes sha256hash = 2;
  if (this->sha256hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sha256hash());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpgradeStartRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:UpgradeStartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const UpgradeStartRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpgradeStartRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:UpgradeStartRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:UpgradeStartRequest)
    MergeFrom(*source);
  }
}

void UpgradeStartRequest::MergeFrom(const UpgradeStartRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:UpgradeStartRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.firmwareversion().size() > 0) {

    firmwareversion_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.firmwareversion_);
  }
  if (from.sha256hash().size() > 0) {

    sha256hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sha256hash_);
  }
}

void UpgradeStartRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:UpgradeStartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpgradeStartRequest::CopyFrom(const UpgradeStartRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:UpgradeStartRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpgradeStartRequest::IsInitialized() const {
  return true;
}

void UpgradeStartRequest::InternalSwap(UpgradeStartRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  firmwareversion_.Swap(&other->firmwareversion_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sha256hash_.Swap(&other->sha256hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata UpgradeStartRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SendUpgradeFirmware::InitAsDefaultInstance() {
}
class SendUpgradeFirmware::_Internal {
 public:
};

SendUpgradeFirmware::SendUpgradeFirmware()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:SendUpgradeFirmware)
}
SendUpgradeFirmware::SendUpgradeFirmware(const SendUpgradeFirmware& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  firmwareversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_firmwareversion().empty()) {
    firmwareversion_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.firmwareversion_);
  }
  sha256hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_sha256hash().empty()) {
    sha256hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sha256hash_);
  }
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_signature().empty()) {
    signature_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  firmware_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_firmware().empty()) {
    firmware_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.firmware_);
  }
  // @@protoc_insertion_point(copy_constructor:SendUpgradeFirmware)
}

void SendUpgradeFirmware::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendUpgradeFirmware_messages_2eproto.base);
  firmwareversion_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sha256hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  firmware_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

SendUpgradeFirmware::~SendUpgradeFirmware() {
  // @@protoc_insertion_point(destructor:SendUpgradeFirmware)
  SharedDtor();
}

void SendUpgradeFirmware::SharedDtor() {
  firmwareversion_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sha256hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  firmware_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void SendUpgradeFirmware::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendUpgradeFirmware& SendUpgradeFirmware::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendUpgradeFirmware_messages_2eproto.base);
  return *internal_default_instance();
}


void SendUpgradeFirmware::Clear() {
// @@protoc_insertion_point(message_clear_start:SendUpgradeFirmware)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  firmwareversion_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sha256hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  signature_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  firmware_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* SendUpgradeFirmware::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string firmwareVersion = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_firmwareversion();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "SendUpgradeFirmware.firmwareVersion"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes sha256hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sha256hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes signature = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_signature();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes firmware = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_firmware();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SendUpgradeFirmware::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SendUpgradeFirmware)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string firmwareVersion = 1;
  if (this->firmwareversion().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_firmwareversion().data(), static_cast<int>(this->_internal_firmwareversion().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "SendUpgradeFirmware.firmwareVersion");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_firmwareversion(), target);
  }

  // bytes sha256hash = 2;
  if (this->sha256hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_sha256hash(), target);
  }

  // bytes signature = 3;
  if (this->signature().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_signature(), target);
  }

  // bytes firmware = 4;
  if (this->firmware().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_firmware(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SendUpgradeFirmware)
  return target;
}

size_t SendUpgradeFirmware::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SendUpgradeFirmware)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string firmwareVersion = 1;
  if (this->firmwareversion().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_firmwareversion());
  }

  // bytes sha256hash = 2;
  if (this->sha256hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_sha256hash());
  }

  // bytes signature = 3;
  if (this->signature().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_signature());
  }

  // bytes firmware = 4;
  if (this->firmware().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_firmware());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendUpgradeFirmware::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SendUpgradeFirmware)
  GOOGLE_DCHECK_NE(&from, this);
  const SendUpgradeFirmware* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendUpgradeFirmware>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SendUpgradeFirmware)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SendUpgradeFirmware)
    MergeFrom(*source);
  }
}

void SendUpgradeFirmware::MergeFrom(const SendUpgradeFirmware& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SendUpgradeFirmware)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.firmwareversion().size() > 0) {

    firmwareversion_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.firmwareversion_);
  }
  if (from.sha256hash().size() > 0) {

    sha256hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.sha256hash_);
  }
  if (from.signature().size() > 0) {

    signature_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  if (from.firmware().size() > 0) {

    firmware_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.firmware_);
  }
}

void SendUpgradeFirmware::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SendUpgradeFirmware)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendUpgradeFirmware::CopyFrom(const SendUpgradeFirmware& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SendUpgradeFirmware)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendUpgradeFirmware::IsInitialized() const {
  return true;
}

void SendUpgradeFirmware::InternalSwap(SendUpgradeFirmware* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  firmwareversion_.Swap(&other->firmwareversion_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  sha256hash_.Swap(&other->sha256hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  signature_.Swap(&other->signature_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  firmware_.Swap(&other->firmware_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata SendUpgradeFirmware::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WriteSerialNo::InitAsDefaultInstance() {
}
class WriteSerialNo::_Internal {
 public:
};

WriteSerialNo::WriteSerialNo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WriteSerialNo)
}
WriteSerialNo::WriteSerialNo(const WriteSerialNo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  deviceserialno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_deviceserialno().empty()) {
    deviceserialno_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deviceserialno_);
  }
  // @@protoc_insertion_point(copy_constructor:WriteSerialNo)
}

void WriteSerialNo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WriteSerialNo_messages_2eproto.base);
  deviceserialno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

WriteSerialNo::~WriteSerialNo() {
  // @@protoc_insertion_point(destructor:WriteSerialNo)
  SharedDtor();
}

void WriteSerialNo::SharedDtor() {
  deviceserialno_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WriteSerialNo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WriteSerialNo& WriteSerialNo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WriteSerialNo_messages_2eproto.base);
  return *internal_default_instance();
}


void WriteSerialNo::Clear() {
// @@protoc_insertion_point(message_clear_start:WriteSerialNo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deviceserialno_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* WriteSerialNo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string deviceSerialNo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_deviceserialno();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "WriteSerialNo.deviceSerialNo"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriteSerialNo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WriteSerialNo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string deviceSerialNo = 1;
  if (this->deviceserialno().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceserialno().data(), static_cast<int>(this->_internal_deviceserialno().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WriteSerialNo.deviceSerialNo");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_deviceserialno(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WriteSerialNo)
  return target;
}

size_t WriteSerialNo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WriteSerialNo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string deviceSerialNo = 1;
  if (this->deviceserialno().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deviceserialno());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteSerialNo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WriteSerialNo)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteSerialNo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WriteSerialNo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WriteSerialNo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WriteSerialNo)
    MergeFrom(*source);
  }
}

void WriteSerialNo::MergeFrom(const WriteSerialNo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WriteSerialNo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.deviceserialno().size() > 0) {

    deviceserialno_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deviceserialno_);
  }
}

void WriteSerialNo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WriteSerialNo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteSerialNo::CopyFrom(const WriteSerialNo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WriteSerialNo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteSerialNo::IsInitialized() const {
  return true;
}

void WriteSerialNo::InternalSwap(WriteSerialNo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  deviceserialno_.Swap(&other->deviceserialno_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteSerialNo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WriteSerialNoReply::InitAsDefaultInstance() {
}
class WriteSerialNoReply::_Internal {
 public:
};

WriteSerialNoReply::WriteSerialNoReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:WriteSerialNoReply)
}
WriteSerialNoReply::WriteSerialNoReply(const WriteSerialNoReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  deviceserialno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_deviceserialno().empty()) {
    deviceserialno_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deviceserialno_);
  }
  writesuccess_ = from.writesuccess_;
  // @@protoc_insertion_point(copy_constructor:WriteSerialNoReply)
}

void WriteSerialNoReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_WriteSerialNoReply_messages_2eproto.base);
  deviceserialno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  writesuccess_ = false;
}

WriteSerialNoReply::~WriteSerialNoReply() {
  // @@protoc_insertion_point(destructor:WriteSerialNoReply)
  SharedDtor();
}

void WriteSerialNoReply::SharedDtor() {
  deviceserialno_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void WriteSerialNoReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WriteSerialNoReply& WriteSerialNoReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WriteSerialNoReply_messages_2eproto.base);
  return *internal_default_instance();
}


void WriteSerialNoReply::Clear() {
// @@protoc_insertion_point(message_clear_start:WriteSerialNoReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deviceserialno_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  writesuccess_ = false;
  _internal_metadata_.Clear();
}

const char* WriteSerialNoReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool writeSuccess = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          writesuccess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string deviceSerialNo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_deviceserialno();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "WriteSerialNoReply.deviceSerialNo"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WriteSerialNoReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:WriteSerialNoReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool writeSuccess = 1;
  if (this->writesuccess() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_writesuccess(), target);
  }

  // string deviceSerialNo = 2;
  if (this->deviceserialno().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceserialno().data(), static_cast<int>(this->_internal_deviceserialno().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "WriteSerialNoReply.deviceSerialNo");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_deviceserialno(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:WriteSerialNoReply)
  return target;
}

size_t WriteSerialNoReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:WriteSerialNoReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string deviceSerialNo = 2;
  if (this->deviceserialno().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deviceserialno());
  }

  // bool writeSuccess = 1;
  if (this->writesuccess() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WriteSerialNoReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:WriteSerialNoReply)
  GOOGLE_DCHECK_NE(&from, this);
  const WriteSerialNoReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WriteSerialNoReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:WriteSerialNoReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:WriteSerialNoReply)
    MergeFrom(*source);
  }
}

void WriteSerialNoReply::MergeFrom(const WriteSerialNoReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:WriteSerialNoReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.deviceserialno().size() > 0) {

    deviceserialno_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deviceserialno_);
  }
  if (from.writesuccess() != 0) {
    _internal_set_writesuccess(from._internal_writesuccess());
  }
}

void WriteSerialNoReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:WriteSerialNoReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WriteSerialNoReply::CopyFrom(const WriteSerialNoReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:WriteSerialNoReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WriteSerialNoReply::IsInitialized() const {
  return true;
}

void WriteSerialNoReply::InternalSwap(WriteSerialNoReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  deviceserialno_.Swap(&other->deviceserialno_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(writesuccess_, other->writesuccess_);
}

::PROTOBUF_NAMESPACE_ID::Metadata WriteSerialNoReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LockSerialNo::InitAsDefaultInstance() {
}
class LockSerialNo::_Internal {
 public:
};

LockSerialNo::LockSerialNo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:LockSerialNo)
}
LockSerialNo::LockSerialNo(const LockSerialNo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:LockSerialNo)
}

void LockSerialNo::SharedCtor() {
}

LockSerialNo::~LockSerialNo() {
  // @@protoc_insertion_point(destructor:LockSerialNo)
  SharedDtor();
}

void LockSerialNo::SharedDtor() {
}

void LockSerialNo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LockSerialNo& LockSerialNo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LockSerialNo_messages_2eproto.base);
  return *internal_default_instance();
}


void LockSerialNo::Clear() {
// @@protoc_insertion_point(message_clear_start:LockSerialNo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* LockSerialNo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* LockSerialNo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:LockSerialNo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:LockSerialNo)
  return target;
}

size_t LockSerialNo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:LockSerialNo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LockSerialNo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:LockSerialNo)
  GOOGLE_DCHECK_NE(&from, this);
  const LockSerialNo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LockSerialNo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:LockSerialNo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:LockSerialNo)
    MergeFrom(*source);
  }
}

void LockSerialNo::MergeFrom(const LockSerialNo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:LockSerialNo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void LockSerialNo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:LockSerialNo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LockSerialNo::CopyFrom(const LockSerialNo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:LockSerialNo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LockSerialNo::IsInitialized() const {
  return true;
}

void LockSerialNo::InternalSwap(LockSerialNo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LockSerialNo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void lockSerialNoReply::InitAsDefaultInstance() {
}
class lockSerialNoReply::_Internal {
 public:
};

lockSerialNoReply::lockSerialNoReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:lockSerialNoReply)
}
lockSerialNoReply::lockSerialNoReply(const lockSerialNoReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  deviceserialno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_deviceserialno().empty()) {
    deviceserialno_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deviceserialno_);
  }
  locksuccess_ = from.locksuccess_;
  // @@protoc_insertion_point(copy_constructor:lockSerialNoReply)
}

void lockSerialNoReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_lockSerialNoReply_messages_2eproto.base);
  deviceserialno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locksuccess_ = false;
}

lockSerialNoReply::~lockSerialNoReply() {
  // @@protoc_insertion_point(destructor:lockSerialNoReply)
  SharedDtor();
}

void lockSerialNoReply::SharedDtor() {
  deviceserialno_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void lockSerialNoReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const lockSerialNoReply& lockSerialNoReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_lockSerialNoReply_messages_2eproto.base);
  return *internal_default_instance();
}


void lockSerialNoReply::Clear() {
// @@protoc_insertion_point(message_clear_start:lockSerialNoReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  deviceserialno_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  locksuccess_ = false;
  _internal_metadata_.Clear();
}

const char* lockSerialNoReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool lockSuccess = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          locksuccess_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string deviceSerialNo = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_deviceserialno();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "lockSerialNoReply.deviceSerialNo"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* lockSerialNoReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:lockSerialNoReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool lockSuccess = 1;
  if (this->locksuccess() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_locksuccess(), target);
  }

  // string deviceSerialNo = 2;
  if (this->deviceserialno().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_deviceserialno().data(), static_cast<int>(this->_internal_deviceserialno().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "lockSerialNoReply.deviceSerialNo");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_deviceserialno(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:lockSerialNoReply)
  return target;
}

size_t lockSerialNoReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:lockSerialNoReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string deviceSerialNo = 2;
  if (this->deviceserialno().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_deviceserialno());
  }

  // bool lockSuccess = 1;
  if (this->locksuccess() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void lockSerialNoReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:lockSerialNoReply)
  GOOGLE_DCHECK_NE(&from, this);
  const lockSerialNoReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<lockSerialNoReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:lockSerialNoReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:lockSerialNoReply)
    MergeFrom(*source);
  }
}

void lockSerialNoReply::MergeFrom(const lockSerialNoReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:lockSerialNoReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.deviceserialno().size() > 0) {

    deviceserialno_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.deviceserialno_);
  }
  if (from.locksuccess() != 0) {
    _internal_set_locksuccess(from._internal_locksuccess());
  }
}

void lockSerialNoReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:lockSerialNoReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void lockSerialNoReply::CopyFrom(const lockSerialNoReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:lockSerialNoReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool lockSerialNoReply::IsInitialized() const {
  return true;
}

void lockSerialNoReply::InternalSwap(lockSerialNoReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  deviceserialno_.Swap(&other->deviceserialno_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(locksuccess_, other->locksuccess_);
}

::PROTOBUF_NAMESPACE_ID::Metadata lockSerialNoReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EccSignOptions::InitAsDefaultInstance() {
}
class EccSignOptions::_Internal {
 public:
};

EccSignOptions::EccSignOptions()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EccSignOptions)
}
EccSignOptions::EccSignOptions(const EccSignOptions& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&rfc6979_, &from.rfc6979_,
    static_cast<size_t>(reinterpret_cast<char*>(&graphene_canonize_) -
    reinterpret_cast<char*>(&rfc6979_)) + sizeof(graphene_canonize_));
  // @@protoc_insertion_point(copy_constructor:EccSignOptions)
}

void EccSignOptions::SharedCtor() {
  ::memset(&rfc6979_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&graphene_canonize_) -
      reinterpret_cast<char*>(&rfc6979_)) + sizeof(graphene_canonize_));
}

EccSignOptions::~EccSignOptions() {
  // @@protoc_insertion_point(destructor:EccSignOptions)
  SharedDtor();
}

void EccSignOptions::SharedDtor() {
}

void EccSignOptions::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EccSignOptions& EccSignOptions::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EccSignOptions_messages_2eproto.base);
  return *internal_default_instance();
}


void EccSignOptions::Clear() {
// @@protoc_insertion_point(message_clear_start:EccSignOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&rfc6979_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&graphene_canonize_) -
      reinterpret_cast<char*>(&rfc6979_)) + sizeof(graphene_canonize_));
  _internal_metadata_.Clear();
}

const char* EccSignOptions::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool rfc6979 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          rfc6979_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool graphene_canonize = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          graphene_canonize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EccSignOptions::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EccSignOptions)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool rfc6979 = 1;
  if (this->rfc6979() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_rfc6979(), target);
  }

  // bool graphene_canonize = 2;
  if (this->graphene_canonize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(2, this->_internal_graphene_canonize(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EccSignOptions)
  return target;
}

size_t EccSignOptions::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EccSignOptions)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bool rfc6979 = 1;
  if (this->rfc6979() != 0) {
    total_size += 1 + 1;
  }

  // bool graphene_canonize = 2;
  if (this->graphene_canonize() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EccSignOptions::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EccSignOptions)
  GOOGLE_DCHECK_NE(&from, this);
  const EccSignOptions* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EccSignOptions>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EccSignOptions)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EccSignOptions)
    MergeFrom(*source);
  }
}

void EccSignOptions::MergeFrom(const EccSignOptions& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EccSignOptions)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rfc6979() != 0) {
    _internal_set_rfc6979(from._internal_rfc6979());
  }
  if (from.graphene_canonize() != 0) {
    _internal_set_graphene_canonize(from._internal_graphene_canonize());
  }
}

void EccSignOptions::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EccSignOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EccSignOptions::CopyFrom(const EccSignOptions& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EccSignOptions)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EccSignOptions::IsInitialized() const {
  return true;
}

void EccSignOptions::InternalSwap(EccSignOptions* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(rfc6979_, other->rfc6979_);
  swap(graphene_canonize_, other->graphene_canonize_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EccSignOptions::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EccSignRequest::InitAsDefaultInstance() {
  ::_EccSignRequest_default_instance_._instance.get_mutable()->options_ = const_cast< ::EccSignOptions*>(
      ::EccSignOptions::internal_default_instance());
}
class EccSignRequest::_Internal {
 public:
  static const ::EccSignOptions& options(const EccSignRequest* msg);
};

const ::EccSignOptions&
EccSignRequest::_Internal::options(const EccSignRequest* msg) {
  return *msg->options_;
}
EccSignRequest::EccSignRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EccSignRequest)
}
EccSignRequest::EccSignRequest(const EccSignRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hdpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hdpath().empty()) {
    hdpath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hdpath_);
  }
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash().empty()) {
    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from._internal_has_options()) {
    options_ = new ::EccSignOptions(*from.options_);
  } else {
    options_ = nullptr;
  }
  algorithm_ = from.algorithm_;
  // @@protoc_insertion_point(copy_constructor:EccSignRequest)
}

void EccSignRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EccSignRequest_messages_2eproto.base);
  hdpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&options_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&algorithm_) -
      reinterpret_cast<char*>(&options_)) + sizeof(algorithm_));
}

EccSignRequest::~EccSignRequest() {
  // @@protoc_insertion_point(destructor:EccSignRequest)
  SharedDtor();
}

void EccSignRequest::SharedDtor() {
  hdpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete options_;
}

void EccSignRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EccSignRequest& EccSignRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EccSignRequest_messages_2eproto.base);
  return *internal_default_instance();
}


void EccSignRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:EccSignRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hdpath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && options_ != nullptr) {
    delete options_;
  }
  options_ = nullptr;
  algorithm_ = 0;
  _internal_metadata_.Clear();
}

const char* EccSignRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string hdPath = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hdpath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "EccSignRequest.hdPath"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes hash = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .EccAlgorithm algorithm = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_algorithm(static_cast<::EccAlgorithm>(val));
        } else goto handle_unusual;
        continue;
      // .EccSignOptions options = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_options(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EccSignRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EccSignRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hdPath = 1;
  if (this->hdpath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hdpath().data(), static_cast<int>(this->_internal_hdpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EccSignRequest.hdPath");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hdpath(), target);
  }

  // bytes hash = 2;
  if (this->hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_hash(), target);
  }

  // .EccAlgorithm algorithm = 3;
  if (this->algorithm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_algorithm(), target);
  }

  // .EccSignOptions options = 4;
  if (this->has_options()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::options(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EccSignRequest)
  return target;
}

size_t EccSignRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EccSignRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hdPath = 1;
  if (this->hdpath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hdpath());
  }

  // bytes hash = 2;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hash());
  }

  // .EccSignOptions options = 4;
  if (this->has_options()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *options_);
  }

  // .EccAlgorithm algorithm = 3;
  if (this->algorithm() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_algorithm());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EccSignRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EccSignRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EccSignRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EccSignRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EccSignRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EccSignRequest)
    MergeFrom(*source);
  }
}

void EccSignRequest::MergeFrom(const EccSignRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EccSignRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hdpath().size() > 0) {

    hdpath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hdpath_);
  }
  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.has_options()) {
    _internal_mutable_options()->::EccSignOptions::MergeFrom(from._internal_options());
  }
  if (from.algorithm() != 0) {
    _internal_set_algorithm(from._internal_algorithm());
  }
}

void EccSignRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EccSignRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EccSignRequest::CopyFrom(const EccSignRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EccSignRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EccSignRequest::IsInitialized() const {
  return true;
}

void EccSignRequest::InternalSwap(EccSignRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  hdpath_.Swap(&other->hdpath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(options_, other->options_);
  swap(algorithm_, other->algorithm_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EccSignRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EccSignResult::InitAsDefaultInstance() {
}
class EccSignResult::_Internal {
 public:
};

EccSignResult::EccSignResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EccSignResult)
}
EccSignResult::EccSignResult(const EccSignResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hdpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hdpath().empty()) {
    hdpath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hdpath_);
  }
  pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pubkey().empty()) {
    pubkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
  }
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hash().empty()) {
    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  r_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_r().empty()) {
    r_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.r_);
  }
  s_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_s().empty()) {
    s_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.s_);
  }
  recover_param_ = from.recover_param_;
  // @@protoc_insertion_point(copy_constructor:EccSignResult)
}

void EccSignResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EccSignResult_messages_2eproto.base);
  hdpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  r_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  s_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recover_param_ = 0u;
}

EccSignResult::~EccSignResult() {
  // @@protoc_insertion_point(destructor:EccSignResult)
  SharedDtor();
}

void EccSignResult::SharedDtor() {
  hdpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pubkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  r_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  s_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EccSignResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EccSignResult& EccSignResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EccSignResult_messages_2eproto.base);
  return *internal_default_instance();
}


void EccSignResult::Clear() {
// @@protoc_insertion_point(message_clear_start:EccSignResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hdpath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  hash_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  r_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  s_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recover_param_ = 0u;
  _internal_metadata_.Clear();
}

const char* EccSignResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string hdPath = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hdpath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "EccSignResult.hdPath"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes pubkey = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_pubkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes hash = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_hash();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes R = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_r();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes S = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_s();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 recover_param = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          recover_param_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EccSignResult::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EccSignResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hdPath = 1;
  if (this->hdpath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hdpath().data(), static_cast<int>(this->_internal_hdpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EccSignResult.hdPath");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hdpath(), target);
  }

  // bytes pubkey = 2;
  if (this->pubkey().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_pubkey(), target);
  }

  // bytes hash = 3;
  if (this->hash().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_hash(), target);
  }

  // bytes R = 4;
  if (this->r().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_r(), target);
  }

  // bytes S = 5;
  if (this->s().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_s(), target);
  }

  // uint32 recover_param = 6;
  if (this->recover_param() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_recover_param(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EccSignResult)
  return target;
}

size_t EccSignResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EccSignResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hdPath = 1;
  if (this->hdpath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hdpath());
  }

  // bytes pubkey = 2;
  if (this->pubkey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pubkey());
  }

  // bytes hash = 3;
  if (this->hash().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_hash());
  }

  // bytes R = 4;
  if (this->r().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_r());
  }

  // bytes S = 5;
  if (this->s().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_s());
  }

  // uint32 recover_param = 6;
  if (this->recover_param() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_recover_param());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EccSignResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EccSignResult)
  GOOGLE_DCHECK_NE(&from, this);
  const EccSignResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EccSignResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EccSignResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EccSignResult)
    MergeFrom(*source);
  }
}

void EccSignResult::MergeFrom(const EccSignResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EccSignResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hdpath().size() > 0) {

    hdpath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hdpath_);
  }
  if (from.pubkey().size() > 0) {

    pubkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
  }
  if (from.hash().size() > 0) {

    hash_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hash_);
  }
  if (from.r().size() > 0) {

    r_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.r_);
  }
  if (from.s().size() > 0) {

    s_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.s_);
  }
  if (from.recover_param() != 0) {
    _internal_set_recover_param(from._internal_recover_param());
  }
}

void EccSignResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EccSignResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EccSignResult::CopyFrom(const EccSignResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EccSignResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EccSignResult::IsInitialized() const {
  return true;
}

void EccSignResult::InternalSwap(EccSignResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  hdpath_.Swap(&other->hdpath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pubkey_.Swap(&other->pubkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  hash_.Swap(&other->hash_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  r_.Swap(&other->r_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  s_.Swap(&other->s_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(recover_param_, other->recover_param_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EccSignResult::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EccGetPublicKeyRequest::InitAsDefaultInstance() {
}
class EccGetPublicKeyRequest::_Internal {
 public:
};

EccGetPublicKeyRequest::EccGetPublicKeyRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EccGetPublicKeyRequest)
}
EccGetPublicKeyRequest::EccGetPublicKeyRequest(const EccGetPublicKeyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hdpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hdpath().empty()) {
    hdpath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hdpath_);
  }
  algorithm_ = from.algorithm_;
  // @@protoc_insertion_point(copy_constructor:EccGetPublicKeyRequest)
}

void EccGetPublicKeyRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EccGetPublicKeyRequest_messages_2eproto.base);
  hdpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  algorithm_ = 0;
}

EccGetPublicKeyRequest::~EccGetPublicKeyRequest() {
  // @@protoc_insertion_point(destructor:EccGetPublicKeyRequest)
  SharedDtor();
}

void EccGetPublicKeyRequest::SharedDtor() {
  hdpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EccGetPublicKeyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EccGetPublicKeyRequest& EccGetPublicKeyRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EccGetPublicKeyRequest_messages_2eproto.base);
  return *internal_default_instance();
}


void EccGetPublicKeyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:EccGetPublicKeyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hdpath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  algorithm_ = 0;
  _internal_metadata_.Clear();
}

const char* EccGetPublicKeyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string hdPath = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hdpath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "EccGetPublicKeyRequest.hdPath"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .EccAlgorithm algorithm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_algorithm(static_cast<::EccAlgorithm>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EccGetPublicKeyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EccGetPublicKeyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hdPath = 1;
  if (this->hdpath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hdpath().data(), static_cast<int>(this->_internal_hdpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EccGetPublicKeyRequest.hdPath");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hdpath(), target);
  }

  // .EccAlgorithm algorithm = 2;
  if (this->algorithm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_algorithm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EccGetPublicKeyRequest)
  return target;
}

size_t EccGetPublicKeyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EccGetPublicKeyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hdPath = 1;
  if (this->hdpath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hdpath());
  }

  // .EccAlgorithm algorithm = 2;
  if (this->algorithm() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_algorithm());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EccGetPublicKeyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EccGetPublicKeyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EccGetPublicKeyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EccGetPublicKeyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EccGetPublicKeyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EccGetPublicKeyRequest)
    MergeFrom(*source);
  }
}

void EccGetPublicKeyRequest::MergeFrom(const EccGetPublicKeyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EccGetPublicKeyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hdpath().size() > 0) {

    hdpath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hdpath_);
  }
  if (from.algorithm() != 0) {
    _internal_set_algorithm(from._internal_algorithm());
  }
}

void EccGetPublicKeyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EccGetPublicKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EccGetPublicKeyRequest::CopyFrom(const EccGetPublicKeyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EccGetPublicKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EccGetPublicKeyRequest::IsInitialized() const {
  return true;
}

void EccGetPublicKeyRequest::InternalSwap(EccGetPublicKeyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  hdpath_.Swap(&other->hdpath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(algorithm_, other->algorithm_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EccGetPublicKeyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EccGetPublicKeyReply::InitAsDefaultInstance() {
}
class EccGetPublicKeyReply::_Internal {
 public:
};

EccGetPublicKeyReply::EccGetPublicKeyReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EccGetPublicKeyReply)
}
EccGetPublicKeyReply::EccGetPublicKeyReply(const EccGetPublicKeyReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hdpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hdpath().empty()) {
    hdpath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hdpath_);
  }
  pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pubkey().empty()) {
    pubkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
  }
  algorithm_ = from.algorithm_;
  // @@protoc_insertion_point(copy_constructor:EccGetPublicKeyReply)
}

void EccGetPublicKeyReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EccGetPublicKeyReply_messages_2eproto.base);
  hdpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  algorithm_ = 0;
}

EccGetPublicKeyReply::~EccGetPublicKeyReply() {
  // @@protoc_insertion_point(destructor:EccGetPublicKeyReply)
  SharedDtor();
}

void EccGetPublicKeyReply::SharedDtor() {
  hdpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pubkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EccGetPublicKeyReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EccGetPublicKeyReply& EccGetPublicKeyReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EccGetPublicKeyReply_messages_2eproto.base);
  return *internal_default_instance();
}


void EccGetPublicKeyReply::Clear() {
// @@protoc_insertion_point(message_clear_start:EccGetPublicKeyReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hdpath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  algorithm_ = 0;
  _internal_metadata_.Clear();
}

const char* EccGetPublicKeyReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string hdPath = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hdpath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "EccGetPublicKeyReply.hdPath"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .EccAlgorithm algorithm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_algorithm(static_cast<::EccAlgorithm>(val));
        } else goto handle_unusual;
        continue;
      // bytes pubkey = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_pubkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EccGetPublicKeyReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EccGetPublicKeyReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hdPath = 1;
  if (this->hdpath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hdpath().data(), static_cast<int>(this->_internal_hdpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EccGetPublicKeyReply.hdPath");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hdpath(), target);
  }

  // .EccAlgorithm algorithm = 2;
  if (this->algorithm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_algorithm(), target);
  }

  // bytes pubkey = 3;
  if (this->pubkey().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_pubkey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EccGetPublicKeyReply)
  return target;
}

size_t EccGetPublicKeyReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EccGetPublicKeyReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hdPath = 1;
  if (this->hdpath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hdpath());
  }

  // bytes pubkey = 3;
  if (this->pubkey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pubkey());
  }

  // .EccAlgorithm algorithm = 2;
  if (this->algorithm() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_algorithm());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EccGetPublicKeyReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EccGetPublicKeyReply)
  GOOGLE_DCHECK_NE(&from, this);
  const EccGetPublicKeyReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EccGetPublicKeyReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EccGetPublicKeyReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EccGetPublicKeyReply)
    MergeFrom(*source);
  }
}

void EccGetPublicKeyReply::MergeFrom(const EccGetPublicKeyReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EccGetPublicKeyReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hdpath().size() > 0) {

    hdpath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hdpath_);
  }
  if (from.pubkey().size() > 0) {

    pubkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
  }
  if (from.algorithm() != 0) {
    _internal_set_algorithm(from._internal_algorithm());
  }
}

void EccGetPublicKeyReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EccGetPublicKeyReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EccGetPublicKeyReply::CopyFrom(const EccGetPublicKeyReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EccGetPublicKeyReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EccGetPublicKeyReply::IsInitialized() const {
  return true;
}

void EccGetPublicKeyReply::InternalSwap(EccGetPublicKeyReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  hdpath_.Swap(&other->hdpath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pubkey_.Swap(&other->pubkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(algorithm_, other->algorithm_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EccGetPublicKeyReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EccGetExtendedPublicKeyRequest::InitAsDefaultInstance() {
}
class EccGetExtendedPublicKeyRequest::_Internal {
 public:
};

EccGetExtendedPublicKeyRequest::EccGetExtendedPublicKeyRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EccGetExtendedPublicKeyRequest)
}
EccGetExtendedPublicKeyRequest::EccGetExtendedPublicKeyRequest(const EccGetExtendedPublicKeyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hdpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hdpath().empty()) {
    hdpath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hdpath_);
  }
  algorithm_ = from.algorithm_;
  // @@protoc_insertion_point(copy_constructor:EccGetExtendedPublicKeyRequest)
}

void EccGetExtendedPublicKeyRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EccGetExtendedPublicKeyRequest_messages_2eproto.base);
  hdpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  algorithm_ = 0;
}

EccGetExtendedPublicKeyRequest::~EccGetExtendedPublicKeyRequest() {
  // @@protoc_insertion_point(destructor:EccGetExtendedPublicKeyRequest)
  SharedDtor();
}

void EccGetExtendedPublicKeyRequest::SharedDtor() {
  hdpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EccGetExtendedPublicKeyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EccGetExtendedPublicKeyRequest& EccGetExtendedPublicKeyRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EccGetExtendedPublicKeyRequest_messages_2eproto.base);
  return *internal_default_instance();
}


void EccGetExtendedPublicKeyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:EccGetExtendedPublicKeyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hdpath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  algorithm_ = 0;
  _internal_metadata_.Clear();
}

const char* EccGetExtendedPublicKeyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string hdPath = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hdpath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "EccGetExtendedPublicKeyRequest.hdPath"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .EccAlgorithm algorithm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_algorithm(static_cast<::EccAlgorithm>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EccGetExtendedPublicKeyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EccGetExtendedPublicKeyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hdPath = 1;
  if (this->hdpath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hdpath().data(), static_cast<int>(this->_internal_hdpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EccGetExtendedPublicKeyRequest.hdPath");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hdpath(), target);
  }

  // .EccAlgorithm algorithm = 2;
  if (this->algorithm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_algorithm(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EccGetExtendedPublicKeyRequest)
  return target;
}

size_t EccGetExtendedPublicKeyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EccGetExtendedPublicKeyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hdPath = 1;
  if (this->hdpath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hdpath());
  }

  // .EccAlgorithm algorithm = 2;
  if (this->algorithm() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_algorithm());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EccGetExtendedPublicKeyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EccGetExtendedPublicKeyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EccGetExtendedPublicKeyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EccGetExtendedPublicKeyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EccGetExtendedPublicKeyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EccGetExtendedPublicKeyRequest)
    MergeFrom(*source);
  }
}

void EccGetExtendedPublicKeyRequest::MergeFrom(const EccGetExtendedPublicKeyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EccGetExtendedPublicKeyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hdpath().size() > 0) {

    hdpath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hdpath_);
  }
  if (from.algorithm() != 0) {
    _internal_set_algorithm(from._internal_algorithm());
  }
}

void EccGetExtendedPublicKeyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EccGetExtendedPublicKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EccGetExtendedPublicKeyRequest::CopyFrom(const EccGetExtendedPublicKeyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EccGetExtendedPublicKeyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EccGetExtendedPublicKeyRequest::IsInitialized() const {
  return true;
}

void EccGetExtendedPublicKeyRequest::InternalSwap(EccGetExtendedPublicKeyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  hdpath_.Swap(&other->hdpath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(algorithm_, other->algorithm_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EccGetExtendedPublicKeyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EccGetExtendedPublicKeyReply::InitAsDefaultInstance() {
}
class EccGetExtendedPublicKeyReply::_Internal {
 public:
};

EccGetExtendedPublicKeyReply::EccGetExtendedPublicKeyReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EccGetExtendedPublicKeyReply)
}
EccGetExtendedPublicKeyReply::EccGetExtendedPublicKeyReply(const EccGetExtendedPublicKeyReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hdpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hdpath().empty()) {
    hdpath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hdpath_);
  }
  pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_pubkey().empty()) {
    pubkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
  }
  chaincode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chaincode().empty()) {
    chaincode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chaincode_);
  }
  algorithm_ = from.algorithm_;
  // @@protoc_insertion_point(copy_constructor:EccGetExtendedPublicKeyReply)
}

void EccGetExtendedPublicKeyReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EccGetExtendedPublicKeyReply_messages_2eproto.base);
  hdpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chaincode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  algorithm_ = 0;
}

EccGetExtendedPublicKeyReply::~EccGetExtendedPublicKeyReply() {
  // @@protoc_insertion_point(destructor:EccGetExtendedPublicKeyReply)
  SharedDtor();
}

void EccGetExtendedPublicKeyReply::SharedDtor() {
  hdpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pubkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chaincode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EccGetExtendedPublicKeyReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EccGetExtendedPublicKeyReply& EccGetExtendedPublicKeyReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EccGetExtendedPublicKeyReply_messages_2eproto.base);
  return *internal_default_instance();
}


void EccGetExtendedPublicKeyReply::Clear() {
// @@protoc_insertion_point(message_clear_start:EccGetExtendedPublicKeyReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hdpath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  pubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chaincode_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  algorithm_ = 0;
  _internal_metadata_.Clear();
}

const char* EccGetExtendedPublicKeyReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string hdPath = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hdpath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "EccGetExtendedPublicKeyReply.hdPath"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .EccAlgorithm algorithm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_algorithm(static_cast<::EccAlgorithm>(val));
        } else goto handle_unusual;
        continue;
      // bytes pubkey = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_pubkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes chainCode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_chaincode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EccGetExtendedPublicKeyReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EccGetExtendedPublicKeyReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hdPath = 1;
  if (this->hdpath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hdpath().data(), static_cast<int>(this->_internal_hdpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EccGetExtendedPublicKeyReply.hdPath");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hdpath(), target);
  }

  // .EccAlgorithm algorithm = 2;
  if (this->algorithm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_algorithm(), target);
  }

  // bytes pubkey = 3;
  if (this->pubkey().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_pubkey(), target);
  }

  // bytes chainCode = 4;
  if (this->chaincode().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_chaincode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EccGetExtendedPublicKeyReply)
  return target;
}

size_t EccGetExtendedPublicKeyReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EccGetExtendedPublicKeyReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hdPath = 1;
  if (this->hdpath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hdpath());
  }

  // bytes pubkey = 3;
  if (this->pubkey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_pubkey());
  }

  // bytes chainCode = 4;
  if (this->chaincode().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chaincode());
  }

  // .EccAlgorithm algorithm = 2;
  if (this->algorithm() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_algorithm());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EccGetExtendedPublicKeyReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EccGetExtendedPublicKeyReply)
  GOOGLE_DCHECK_NE(&from, this);
  const EccGetExtendedPublicKeyReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EccGetExtendedPublicKeyReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EccGetExtendedPublicKeyReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EccGetExtendedPublicKeyReply)
    MergeFrom(*source);
  }
}

void EccGetExtendedPublicKeyReply::MergeFrom(const EccGetExtendedPublicKeyReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EccGetExtendedPublicKeyReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hdpath().size() > 0) {

    hdpath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hdpath_);
  }
  if (from.pubkey().size() > 0) {

    pubkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.pubkey_);
  }
  if (from.chaincode().size() > 0) {

    chaincode_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.chaincode_);
  }
  if (from.algorithm() != 0) {
    _internal_set_algorithm(from._internal_algorithm());
  }
}

void EccGetExtendedPublicKeyReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EccGetExtendedPublicKeyReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EccGetExtendedPublicKeyReply::CopyFrom(const EccGetExtendedPublicKeyReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EccGetExtendedPublicKeyReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EccGetExtendedPublicKeyReply::IsInitialized() const {
  return true;
}

void EccGetExtendedPublicKeyReply::InternalSwap(EccGetExtendedPublicKeyReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  hdpath_.Swap(&other->hdpath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  pubkey_.Swap(&other->pubkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  chaincode_.Swap(&other->chaincode_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(algorithm_, other->algorithm_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EccGetExtendedPublicKeyReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EccMultiplyRequest::InitAsDefaultInstance() {
}
class EccMultiplyRequest::_Internal {
 public:
};

EccMultiplyRequest::EccMultiplyRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EccMultiplyRequest)
}
EccMultiplyRequest::EccMultiplyRequest(const EccMultiplyRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hdpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hdpath().empty()) {
    hdpath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hdpath_);
  }
  input_pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_input_pubkey().empty()) {
    input_pubkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.input_pubkey_);
  }
  algorithm_ = from.algorithm_;
  // @@protoc_insertion_point(copy_constructor:EccMultiplyRequest)
}

void EccMultiplyRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EccMultiplyRequest_messages_2eproto.base);
  hdpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  input_pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  algorithm_ = 0;
}

EccMultiplyRequest::~EccMultiplyRequest() {
  // @@protoc_insertion_point(destructor:EccMultiplyRequest)
  SharedDtor();
}

void EccMultiplyRequest::SharedDtor() {
  hdpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  input_pubkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EccMultiplyRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EccMultiplyRequest& EccMultiplyRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EccMultiplyRequest_messages_2eproto.base);
  return *internal_default_instance();
}


void EccMultiplyRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:EccMultiplyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hdpath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  input_pubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  algorithm_ = 0;
  _internal_metadata_.Clear();
}

const char* EccMultiplyRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string hdPath = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hdpath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "EccMultiplyRequest.hdPath"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .EccAlgorithm algorithm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_algorithm(static_cast<::EccAlgorithm>(val));
        } else goto handle_unusual;
        continue;
      // bytes input_pubkey = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_input_pubkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EccMultiplyRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EccMultiplyRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hdPath = 1;
  if (this->hdpath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hdpath().data(), static_cast<int>(this->_internal_hdpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EccMultiplyRequest.hdPath");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hdpath(), target);
  }

  // .EccAlgorithm algorithm = 2;
  if (this->algorithm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_algorithm(), target);
  }

  // bytes input_pubkey = 3;
  if (this->input_pubkey().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_input_pubkey(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EccMultiplyRequest)
  return target;
}

size_t EccMultiplyRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EccMultiplyRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hdPath = 1;
  if (this->hdpath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hdpath());
  }

  // bytes input_pubkey = 3;
  if (this->input_pubkey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_input_pubkey());
  }

  // .EccAlgorithm algorithm = 2;
  if (this->algorithm() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_algorithm());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EccMultiplyRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EccMultiplyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EccMultiplyRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EccMultiplyRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EccMultiplyRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EccMultiplyRequest)
    MergeFrom(*source);
  }
}

void EccMultiplyRequest::MergeFrom(const EccMultiplyRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EccMultiplyRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hdpath().size() > 0) {

    hdpath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hdpath_);
  }
  if (from.input_pubkey().size() > 0) {

    input_pubkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.input_pubkey_);
  }
  if (from.algorithm() != 0) {
    _internal_set_algorithm(from._internal_algorithm());
  }
}

void EccMultiplyRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EccMultiplyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EccMultiplyRequest::CopyFrom(const EccMultiplyRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EccMultiplyRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EccMultiplyRequest::IsInitialized() const {
  return true;
}

void EccMultiplyRequest::InternalSwap(EccMultiplyRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  hdpath_.Swap(&other->hdpath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  input_pubkey_.Swap(&other->input_pubkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(algorithm_, other->algorithm_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EccMultiplyRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EccMultiplyReply::InitAsDefaultInstance() {
}
class EccMultiplyReply::_Internal {
 public:
};

EccMultiplyReply::EccMultiplyReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EccMultiplyReply)
}
EccMultiplyReply::EccMultiplyReply(const EccMultiplyReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  hdpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_hdpath().empty()) {
    hdpath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hdpath_);
  }
  input_pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_input_pubkey().empty()) {
    input_pubkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.input_pubkey_);
  }
  dev_pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_dev_pubkey().empty()) {
    dev_pubkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dev_pubkey_);
  }
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_result().empty()) {
    result_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.result_);
  }
  algorithm_ = from.algorithm_;
  // @@protoc_insertion_point(copy_constructor:EccMultiplyReply)
}

void EccMultiplyReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_EccMultiplyReply_messages_2eproto.base);
  hdpath_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  input_pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dev_pubkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  algorithm_ = 0;
}

EccMultiplyReply::~EccMultiplyReply() {
  // @@protoc_insertion_point(destructor:EccMultiplyReply)
  SharedDtor();
}

void EccMultiplyReply::SharedDtor() {
  hdpath_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  input_pubkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dev_pubkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void EccMultiplyReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EccMultiplyReply& EccMultiplyReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EccMultiplyReply_messages_2eproto.base);
  return *internal_default_instance();
}


void EccMultiplyReply::Clear() {
// @@protoc_insertion_point(message_clear_start:EccMultiplyReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hdpath_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  input_pubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dev_pubkey_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  algorithm_ = 0;
  _internal_metadata_.Clear();
}

const char* EccMultiplyReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string hdPath = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_hdpath();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "EccMultiplyReply.hdPath"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .EccAlgorithm algorithm = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          _internal_set_algorithm(static_cast<::EccAlgorithm>(val));
        } else goto handle_unusual;
        continue;
      // bytes input_pubkey = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_input_pubkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes dev_pubkey = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_dev_pubkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes result = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_result();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EccMultiplyReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EccMultiplyReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string hdPath = 1;
  if (this->hdpath().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_hdpath().data(), static_cast<int>(this->_internal_hdpath().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "EccMultiplyReply.hdPath");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_hdpath(), target);
  }

  // .EccAlgorithm algorithm = 2;
  if (this->algorithm() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_algorithm(), target);
  }

  // bytes input_pubkey = 3;
  if (this->input_pubkey().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_input_pubkey(), target);
  }

  // bytes dev_pubkey = 4;
  if (this->dev_pubkey().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_dev_pubkey(), target);
  }

  // bytes result = 5;
  if (this->result().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EccMultiplyReply)
  return target;
}

size_t EccMultiplyReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EccMultiplyReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string hdPath = 1;
  if (this->hdpath().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_hdpath());
  }

  // bytes input_pubkey = 3;
  if (this->input_pubkey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_input_pubkey());
  }

  // bytes dev_pubkey = 4;
  if (this->dev_pubkey().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_dev_pubkey());
  }

  // bytes result = 5;
  if (this->result().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_result());
  }

  // .EccAlgorithm algorithm = 2;
  if (this->algorithm() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_algorithm());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EccMultiplyReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EccMultiplyReply)
  GOOGLE_DCHECK_NE(&from, this);
  const EccMultiplyReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EccMultiplyReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EccMultiplyReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EccMultiplyReply)
    MergeFrom(*source);
  }
}

void EccMultiplyReply::MergeFrom(const EccMultiplyReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EccMultiplyReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.hdpath().size() > 0) {

    hdpath_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.hdpath_);
  }
  if (from.input_pubkey().size() > 0) {

    input_pubkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.input_pubkey_);
  }
  if (from.dev_pubkey().size() > 0) {

    dev_pubkey_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.dev_pubkey_);
  }
  if (from.result().size() > 0) {

    result_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.result_);
  }
  if (from.algorithm() != 0) {
    _internal_set_algorithm(from._internal_algorithm());
  }
}

void EccMultiplyReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EccMultiplyReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EccMultiplyReply::CopyFrom(const EccMultiplyReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EccMultiplyReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EccMultiplyReply::IsInitialized() const {
  return true;
}

void EccMultiplyReply::InternalSwap(EccMultiplyReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  hdpath_.Swap(&other->hdpath_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  input_pubkey_.Swap(&other->input_pubkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  dev_pubkey_.Swap(&other->dev_pubkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  result_.Swap(&other->result_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(algorithm_, other->algorithm_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EccMultiplyReply::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void EraseDataRequest::InitAsDefaultInstance() {
}
class EraseDataRequest::_Internal {
 public:
};

EraseDataRequest::EraseDataRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:EraseDataRequest)
}
EraseDataRequest::EraseDataRequest(const EraseDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:EraseDataRequest)
}

void EraseDataRequest::SharedCtor() {
}

EraseDataRequest::~EraseDataRequest() {
  // @@protoc_insertion_point(destructor:EraseDataRequest)
  SharedDtor();
}

void EraseDataRequest::SharedDtor() {
}

void EraseDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const EraseDataRequest& EraseDataRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_EraseDataRequest_messages_2eproto.base);
  return *internal_default_instance();
}


void EraseDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:EraseDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

const char* EraseDataRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* EraseDataRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:EraseDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:EraseDataRequest)
  return target;
}

size_t EraseDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:EraseDataRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void EraseDataRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:EraseDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const EraseDataRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<EraseDataRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:EraseDataRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:EraseDataRequest)
    MergeFrom(*source);
  }
}

void EraseDataRequest::MergeFrom(const EraseDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:EraseDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void EraseDataRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:EraseDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EraseDataRequest::CopyFrom(const EraseDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:EraseDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EraseDataRequest::IsInitialized() const {
  return true;
}

void EraseDataRequest::InternalSwap(EraseDataRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EraseDataRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::RequestRejected* Arena::CreateMaybeMessage< ::RequestRejected >(Arena* arena) {
  return Arena::CreateInternal< ::RequestRejected >(arena);
}
template<> PROTOBUF_NOINLINE ::GenericConfirmReply* Arena::CreateMaybeMessage< ::GenericConfirmReply >(Arena* arena) {
  return Arena::CreateInternal< ::GenericConfirmReply >(arena);
}
template<> PROTOBUF_NOINLINE ::GetModeAndVersionRequest* Arena::CreateMaybeMessage< ::GetModeAndVersionRequest >(Arena* arena) {
  return Arena::CreateInternal< ::GetModeAndVersionRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::GetModeAndVersionReply* Arena::CreateMaybeMessage< ::GetModeAndVersionReply >(Arena* arena) {
  return Arena::CreateInternal< ::GetModeAndVersionReply >(arena);
}
template<> PROTOBUF_NOINLINE ::UpgradeStartRequest* Arena::CreateMaybeMessage< ::UpgradeStartRequest >(Arena* arena) {
  return Arena::CreateInternal< ::UpgradeStartRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::SendUpgradeFirmware* Arena::CreateMaybeMessage< ::SendUpgradeFirmware >(Arena* arena) {
  return Arena::CreateInternal< ::SendUpgradeFirmware >(arena);
}
template<> PROTOBUF_NOINLINE ::WriteSerialNo* Arena::CreateMaybeMessage< ::WriteSerialNo >(Arena* arena) {
  return Arena::CreateInternal< ::WriteSerialNo >(arena);
}
template<> PROTOBUF_NOINLINE ::WriteSerialNoReply* Arena::CreateMaybeMessage< ::WriteSerialNoReply >(Arena* arena) {
  return Arena::CreateInternal< ::WriteSerialNoReply >(arena);
}
template<> PROTOBUF_NOINLINE ::LockSerialNo* Arena::CreateMaybeMessage< ::LockSerialNo >(Arena* arena) {
  return Arena::CreateInternal< ::LockSerialNo >(arena);
}
template<> PROTOBUF_NOINLINE ::lockSerialNoReply* Arena::CreateMaybeMessage< ::lockSerialNoReply >(Arena* arena) {
  return Arena::CreateInternal< ::lockSerialNoReply >(arena);
}
template<> PROTOBUF_NOINLINE ::EccSignOptions* Arena::CreateMaybeMessage< ::EccSignOptions >(Arena* arena) {
  return Arena::CreateInternal< ::EccSignOptions >(arena);
}
template<> PROTOBUF_NOINLINE ::EccSignRequest* Arena::CreateMaybeMessage< ::EccSignRequest >(Arena* arena) {
  return Arena::CreateInternal< ::EccSignRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::EccSignResult* Arena::CreateMaybeMessage< ::EccSignResult >(Arena* arena) {
  return Arena::CreateInternal< ::EccSignResult >(arena);
}
template<> PROTOBUF_NOINLINE ::EccGetPublicKeyRequest* Arena::CreateMaybeMessage< ::EccGetPublicKeyRequest >(Arena* arena) {
  return Arena::CreateInternal< ::EccGetPublicKeyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::EccGetPublicKeyReply* Arena::CreateMaybeMessage< ::EccGetPublicKeyReply >(Arena* arena) {
  return Arena::CreateInternal< ::EccGetPublicKeyReply >(arena);
}
template<> PROTOBUF_NOINLINE ::EccGetExtendedPublicKeyRequest* Arena::CreateMaybeMessage< ::EccGetExtendedPublicKeyRequest >(Arena* arena) {
  return Arena::CreateInternal< ::EccGetExtendedPublicKeyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::EccGetExtendedPublicKeyReply* Arena::CreateMaybeMessage< ::EccGetExtendedPublicKeyReply >(Arena* arena) {
  return Arena::CreateInternal< ::EccGetExtendedPublicKeyReply >(arena);
}
template<> PROTOBUF_NOINLINE ::EccMultiplyRequest* Arena::CreateMaybeMessage< ::EccMultiplyRequest >(Arena* arena) {
  return Arena::CreateInternal< ::EccMultiplyRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::EccMultiplyReply* Arena::CreateMaybeMessage< ::EccMultiplyReply >(Arena* arena) {
  return Arena::CreateInternal< ::EccMultiplyReply >(arena);
}
template<> PROTOBUF_NOINLINE ::EraseDataRequest* Arena::CreateMaybeMessage< ::EraseDataRequest >(Arena* arena) {
  return Arena::CreateInternal< ::EraseDataRequest >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
